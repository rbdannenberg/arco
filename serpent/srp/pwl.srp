# pwl.srp -- piece-wise linear envelope
#
# Roger B. Dannenberg
# May 2023

class Pwl (Ugen):
    def init(points):
        super.init(create_ugen_id(), "Pwl", 1, 'a', "", omit_chans = true)
        set_point_array(points)

    def set_points(rest points):
        set_point_array(points)

    def set_point_array(points):
    # define the shape of the envelope with an array of floats, 
    # d0 y0 d1 y1 ... where di is duration (secs) and yi is amplitude.
    # If the length is odd, a final yn = 0.0 is appended.
        o2_send_start()
        o2_add_int32(arco_ugen_id(id))
        # track cummulative time and samples to avoid accumulated time error
        var time = 0
        var count = 0
        for i = 0 to len(points) by 2:  // process points pair-wise
            time = time + points[i]
            var samps = round(time * AR - count)
            count = count + samps
            o2_add_float(samps)  // the number of samples to ramp
            if i + 1 < len(points):  // allowed to omit final zero amplitude
                o2_add_float(points[i + 1])  // the destination amplitude
        o2_send_finish(0, "/arco/pwl/env", true)
        this

    def start():
        o2_send_cmd("/arco/pwl/start", 0, "U", id)
        this

    def decay(dur):
    # end envelope with decay to zero over given duration (seconds)
        o2_snd_cmd("/arco/pwl/decay", 0, "Uf", id, dur * AR)

    def set(y):
    # set current value to y
        o2_snd_cmd("/arco/pwl/set", 0, "Uf", id, y)



def pwl(keyword init, start = true, rest points):
    var pwl = Pwl(points)
    if init:
       pwe.set(init)
    if start:
       pwe.start()
    return pwl



class Pwlb (Ugen):
    var action_id

    def init(points):
        super.init(create_ugen_id(), "Pwlb", 1, 'b', "", omit_chans = true)
        set_point_array(points)

    def set_points(rest points):
        set_point_array(points)

    def set_point_array(points):
    # define the shape of the envelope with an array of floats, 
    # d0 y0 d1 y1 ... where di is duration (secs) and yi is amplitude.
    # If the length is odd, a final yn = 0.0 is appended. Times are
    # converted to block periods (seconds * block_rate).
        // display "Pwlb", points
        o2_send_start()
        o2_add_int32(arco_ugen_id(id))
        # track cummulative time and samples to avoid accumulated time error
        var time = 0   // accumulate the total duration (d0 + d1 + ...) here
        var count = 0  // accumulate the integer block counts here
        // print "               ";
        for i = 0 to len(points) by 2:  // process points pair-wise
            time = time + points[i]
	    // Avoid accumulated rounding error from converting durations to
	    // block counts as follows:
	    //   count is the block count where this segment begins
	    //   time * BR is the exact fractional block count where it ends
	    //   samps is therefore the duration we want with compensation
	    //   for any accumulated rounding error.
            var samps = round(time * BR - count)
            count = count + samps
            // print samps,
            o2_add_float(samps)  // the number of samples to ramp
            if i + 1 < len(points):  // allowed to omit final zero amplitude
                // print points[i + 1],
                o2_add_float(points[i + 1])  // the destination amplitude
        // print
        o2_send_finish(0, "/arco/pwlb/env", true)
        this


    def start():
        o2_send_cmd("/arco/pwlb/start", 0, "U", id)
        this


    def decay(dur):
    # end envelope with decay to zero over given duration (seconds)
        o2_snd_cmd("/arco/pwlb/decay", 0, "Uf", id, dur * BR)


    def set(y):
    # set current value to y
        o2_send_cmd("/arco/pwlb/set", 0, "Uf", id, y)



def pwlb(keyword init, start = true, rest points):
    var pwlb = Pwlb(points)
    if init:
        pwlb.set(init)
    if start:
        pwlb.start()
    return pwlb
