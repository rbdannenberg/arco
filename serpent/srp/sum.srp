# sum.srp -- sum and sumb unit generators
#
# Roger B. Dannenberg
# June 2023

class Sum(Ugen):
    def init(chans, wrap, optional id_num):
        super.init(arco_ugen_new_id(id_num) if id_num else create_ugen_id(),
                   "Sum", chans, A_RATE, "i", 'wrap', 1 if wrap else 0)
        register_action(this, ACTION_REM, this, 'action_rem')

    def action_rem(status, uid, parameters):
        // find input with uid if any -- similar to mix but inputs
        // directly map to ugens:
        display "Sum.action_rem", status, uid, parameters
        for ugen in inputs.values():
            if arco_ugen_id(ugen.id) == uid:
                inputs.remove(uid)

    def ins(rest ugens):
        for ugen in ugens:
            // for sum, use integer Arco id as input name in dictionary:
            inputs[arco_ugen_id(ugen.id)] = ugen
            o2_send_cmd("/arco/sum/ins", 0, "UU", id, ugen.id)
        this

    def rem(rest ugens):
        for ugen in ugens:
            var name = arco_ugen_id(ugen.id)
            if inputs.has_key(name):
                inputs.remove(name)
                o2_send_cmd("/arco/sum/rem", 0, "UU", id, ugen.id)
        this

    def swap(ugen, replacement):
        var name = arco_ugen_id(ugen.id)
        if inputs.has_key(name):
            // locally, act as if ugen is removed and replacement is inserted
            inputs.remove(name)
            inputs[arco_ugen_id(replacement.id)] = replacement
            o2_send_cmd("/arco/sum/swap", 0, "UUU", id, ugen.id, replacement.id)
        this


def sum(optional chans = 1, keyword wrap = true): Sum(chans, wrap)


class Sumb(Ugen):
    def init(chans, wrap, optional id_num):
        super.init(arco_ugen_new_id(id_num) if id_num else create_ugen_id(),
                   "Sumb", chans, B_RATE, "i", 'wrap', 1 if wrap else 0)
        register_action(this, ACTION_REM, this, 'action_rem')

    def action_rem(status, uid, parameters):
        // find input with uid if any -- similar to mix but inputs
        // directly map to ugens:
        display "Sum.action_rem", status, uid, parameters
        for ugen in inputs.values():
            if arco_ugen_id(ugen.id) == uid:
                inputs.remove(uid)

    def ins(rest ugens):
        for ugen in ugens:
            inputs[arco_ugen_id(ugen.id)] = ugen
            o2_send_cmd("/arco/sumb/ins", 0, "UU", id, ugen.id)
        this

    def rem(rest ugens):
        for ugen in ugens:
            var name = arco_ugen_id(ugen.id)
            if inputs.has_key(name):
                inputs.remove(name)
                o2_send_cmd("/arco/sumb/rem", 0, "UU", id, ugen.id)
        this

    def swap(ugen, replacement):
        var name = arco_ugen_id(ugen.id)
        if inputs.has_key(name):
            // locally, act as if ugen is removed and replacement is inserted
            inputs.remove(name)
            inputs[arco_ugen_id(replacement.id)] = replacement
            o2_send_cmd("/arco/sumb/swap", 0, "UUU",
                        id, ugen.id, replacement.id)
        this


def sumb(optional chans = 1, keyword wrap = true): Sumb(chans, wrap)
