# reverb.srp -- simple reverb ported from Nyquist REVERB-MONO
#
# Roger B. Dannenberg


REVERB_COMBDELAY = [0.028049887, 0.031315193, 0.036439909,
                    0.040294785, 0.044195011, 0.046780045]

REVERB_ALPASSDELAY = [143.6482085, 454.6391753, 621.1267606,
                      832.0754717, 1422.580645]  // in Hz
for hz at i in REVERB_ALPASSDELAY:
    REVERB_ALPASSDELAY[i] = 1 / hz
    
REVERB_DECAY = [0.822, 0.802, 0.773, 0.753, 0.753, 0.753]


class Reverb (Instrument):
    var combs
    var alpasses
    var out

    def init(input, rt60):
        combs = array(len(REVERB_COMBDELAY))
        alpasses = array(len(REVERB_ALPASSDELAY))
        instr_begin()
        var acomball = mix(1)
        for delay at i in REVERB_COMBDELAY:
            combs[i] = delay(input, delay,
                             exp(-6.9087 * delay / (rt60 * REVERB_DECAY[i])),
                             delay + 0.001)
            acomball.ins(intern("comb" + str(i)), combs[i], 1.0)
                         
        out = acomball
        for delay at i in REVERB_ALPASSDELAY:
            out = alpass(out, delay, exp(-6.9087 * delay / (rt60 * 0.7)),
                         delay + 0.001)
            alpasses[i] = out
        out = lowpass(out, 9000.0)
        super.init("Reverb", out)


    def set_input(input):
        for cb in combs:
            cb.set('input', input)
        

    def set_rt60(rt60):
        for cb at i in combs:
            cb.set('fb', exp(-6.9087 * REVERB_COMBDELAY[i] /
                             (rt60 * REVERB_DECAY[i])))
        for ap at i in alpasses:
            ap.set('fb', exp(-6.9087 * REVERB_ALPASSDELAY[i] / (rt60 * 0.7)))

    def set_cutoff(freq):
      out.set('cutoff', freq)



def reverb(input, rt60): return Reverb(input, rt60)


class Stereo_reverb(Instrument):
# Stereo_reverb takes in input, wet (reverb gain), and reverb time
# It constructs two Reverb instruments and scales the gain and cutoff
# of the right reverb by 1.1 to get slightly different output
# The reverb outputs are assigned to left and right channels and the
# input is added to form a stereo output. A mono input will be
# duplicated, which will give it a boost in power.

    var left, right, mix
    
    def init(input, wet, rt60):
        left = Reverb(input, rt60)
        right = Reverb(input, rt60)
        mix = mix(2)
        mix.ins('left', left, [wet, 0])
        mix.ins('right', right, [0, wet])
        mix.ins('input', input, [1, 1])
        super.init("Stereo_reverb",  mix)

    def set_input(input):
        left.set_input(input)
        right.set_input(input)

    def set_rt60(rt60)
        left.set_rt60(rt60)
        right.set_rt60(rt60)

    def set_cutoff(freq)
        left.set_cutoff(freq)
        right.set_cutoff(freq)

