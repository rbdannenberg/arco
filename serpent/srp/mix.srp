# mix.srp -- audio mixer
#
# Roger B. Dannenberg
# May 2023

class Mix (Ugen):
    
    def init(chans_):
        super.init(create_ugen_id(), "Mix", chans_, A_RATE, "")

        
    def set(input, value, optional chan = 0):
        print "ERROR: set method not available for Mix class"


    def ins(name, ugen, gain, optional atend):
        if isnumber(gain) or isarray(gain):
            gain = const(gain)
        inputs[name] = [name, ugen, gain]
        o2_send_cmd("/arco/mix/ins", 0, "UsUU", id, str(name), ugen.id, gain.id)
        if atend:
            if atend == SIGNAL and issubclass(ugen, Instrument) and 
               ugen.get['envelope']:
                create_action(ugen.envelope, this, 'rem', ugen)
            elif atend == GAIN and issubclass(gain, Pwlb):
                create_action(gain, this, 'rem', ugen)
            else:
                print "Mix.ins() ignoring unknown atend parameter -", atend
        return this
    

    def rem(name):
        if inputs.has_key(name):
            inputs.remove(key)
            o2_send_cmd("/arco/mix/rem", 0, "Us", id, str(name))
        return this


    def find_name_of(ugen):
        for key in inputs.keys():
            if inputs[key][1] == ugen:
                return key
        return nil


    def set_gain(name, gain, optional chan = 0):
    # general set gain to either a Ugen or float (constant value)
        if not inputs.has_key(name):
            print "ERROR: Mix set_gain cannot find input", name
            return
        var gain_ugen = inputs[name][2]
        display "in set_gain", inputs[name], gain_ugen, repr(gain_ugen.rate)
        if isinstance(gain_ugen, Ugen) and gain_ugen.rate == C_RATE:
            if chan >= gain_ugen.chans:
                print "WARNING: Mix gain for", name, "is a", gain_ugen.chans,
                print "channel Const, but set_gain requests channel", chan
            // a Const exists, so we just write to it using set_gain
            display "mix set_gain, calling /set_gain", id, name, chan, gain
            o2_send_cmd("/arco/mix/set_gain", 0, "Usif", id, str(name), chan, gain)
        else:  // have to replace with either gain as Ugen or make a const
            if isnumber(gain) or isarray(gain):
                if chan != 0:
                    print "WARNING: set_gain is creating Const, but chan != 0"
                gain = const(gain)
                display "mix set_gain is number(s), convert", gain.id
            inputs[name][2] = gain
            display "mix set_gain, calling /repl_gain", id, name, gain.id
            o2_send_cmd("/arco/mix/repl_gain", 0, "UsU", id, str(name), gain.id)
    

def mix(optional chans = 1):
    Mix(chans)

