# mix.srp -- audio mixer
#
# Roger B. Dannenberg
# May 2023

class Mix (Ugen):
    
    def init(chans_, wrap):
        super.init(create_ugen_id(), "Mix", chans_, A_RATE,
                   "i", 'wrap', 1 if wrap else 0, "f")
        register_action(this, ACTION_REM, this, 'action_rem')


    def action_rem(status, uid, parameters):
        // find input with uid if any
        display "Mix.action_rem", status, uid, parameters
        for input in inputs.values():  // [name, ugen, gain] arrays
            var ugen = input[1]
            if arco_ugen_id(ugen.id) == uid:
                inputs.remove(input[0])
            
        
    def set(input, value, optional chan = 0):
        print "ERROR: set method called but not available for Mix class"


    def ins(name, ugen, gain, optional dur, mode, keyword atend):
        var gain_param
        var input_param

        if isnumber(gain) or isarray(gain):
            gain = const(gain)
        elif isinstance(gain, Param_descr):
            gain_param = gain
            gain = gain_param.get_ugen_value("Mix", 'gain')
        elif gain.rate == 'a':
            print "WARNING: In Mix.ins, audio-rate mix gain must not be audio."
            return

        if isinstance(ugen, Param_descr):
            ugen_param = ugen
            ugen = ugen_param.get_ugen_value("Mix", 'in')
        if ugen.rate != 'a':
            print "ERROR: In Mix.set_in(), new input for", repr(name),
            print     "has non-audio-rate", repr(ugen.rate);
            print     ". Ignoring this input."
            return
        if ugen.chans != 1 and gain.chans != 1 and ugen.chans != gain.chans:
            print "WARNING: In Mix.set_in("; repr(name), "...), input and",
            print     "gain Ugens have mismatched channel counts. Ignoring",
            print     "this input."
            return
    
        if not dur:
            dur = 0
        if not mode:
            mode = FADE_SMOOTH
        inputs[name] = [name, ugen, gain]
        o2_send_cmd("/arco/mix/ins", 0, "UsUUfi", id, str(name), ugen.id,
                                                      gain.id, dur, mode)
        if gain_param:  // we actually added the input, so tell param_descrs:
            gain_param.add_method(this, ['set_gain', name])
            ugen_param.add_method(this, ['set_in', name])

        if atend:
            var env = ugen.get['envelope']
            if atend == SIGNAL and issubclass(ugen, Instrument) and env:
                create_action(env, this, 'rem', ugen)
            elif atend == GAIN and issubclass(gain, Pwlb):
                create_action(gain, this, 'rem', ugen)
            else:
                print "WARNING: In Mix.ins() ignoring unknown atend",
                print "parameter -", atend
        return this
    

    def rem(name, dur, mode):
        if inputs.has_key(name) or force:
            if not dur:
                dur = 0
            if not mode:
                mode = FADE_SMOOTH
            o2_send_cmd("/arco/mix/rem", 0, "Usfi", id, str(name), dur, mode)
            display "/arco/mix/rem", id, str(name), dur, mode
            inputs.remove(name)
        return this


    def find_name_of(ugen):
        for key in inputs.keys():
            if inputs[key][1] == ugen:
                return key
        return nil


    def set_gain(name, gain, optional chan = 0):
    # general set gain to either a Ugen or float (constant value)
        if not inputs.has_key(name):
            print "ERROR: Mix.set_gain() cannot find input", name
            return
        var gain_ugen = inputs[name][2]
        display "in set_gain", inputs[name], gain_ugen, repr(gain_ugen.rate)
        if isinstance(gain_ugen, Ugen) and gain_ugen.rate == C_RATE:
            if chan >= gain_ugen.chans:
                print "WARNING: In Mix.set_gain(), gain for", name, "is a", 
                print gain_ugen.chans, 
                print "channel Const, but set_gain requests channel", chan
            // a Const exists, so we just write to it using set_gain
            // display "mix set_gain, calling /set_gain", id, name, chan, gain
            o2_send_cmd("/arco/mix/set_gain", 0, "Usif", id, str(name),
                                                         chan, gain)
        else:  // have to replace with either gain as Ugen or make a const
            if isnumber(gain) or isarray(gain):
                if chan != 0:
                    print "WARNING: In Mix.set_gain(), creating a Const,",
                    print "but chan != 0"
                gain = const(gain)
                // display "mix set_gain is number(s), convert", gain.id
            elif gain.rate == 'a':
                print "WARNING: In Mix.set_gain(), audio-rate mix gain",
                print "will be downsampled and then interpolated"
            inputs[name][2] = gain
            // display "mix set_gain, calling /repl_gain", id, name, gain.id
            o2_send_cmd("/arco/mix/repl_gain", 0, "UsU", id, str(name), gain.id)
        this


    def set_in(name, input):
    # general set input to an a-rate Ugen
        if not inputs.has_key(name):
            print "ERROR: Mix.set_in() cannot find input", name
            return
        var in_ugen = inputs[name][1]
        display "in set_in", inputs[name], in_ugen, repr(in_ugen.rate)
        if input.rate != 'a':
            print "ERROR: In Mix.set_in(), new input for", repr(name),
            print     "has non-audio-rate", repr(input.rate);
            print     ". Input not replaced."
            return
        inputs[name][1] = input
        // display "mix set_in, calling /repl_in", id, name, input.id
        o2_send_cmd("/arco/mix/repl_in", 0, "UsU", id, str(name), input.id)
        this


def mix(optional chans = 1, keyword wrap = true):
    Mix(chans, wrap)


def mix_name(i):
# handy function to convert index into a symbol to name an input when
# inputs are originally created in a loop or come from an array
    intern("in" + str(i))
