# audiodev.srp -- select and control audio devices
#
# Roger B. Dannenberg
# April 2023

# Do not load this directly. It is loaded automatically by arco when
# running in wxserpent.

require "arcoslider"
require "vumeter"
require "evlight"

fileinput_files = nil

def arco_set_input_files(files):
    fileinput_files = files


def audiodev_init()
    audio_devices_menu.item("Configure Audio",
                            "open a window to select audio devices", nil, nil,
                            'configure_audio_handler')
    audio_devices_menu.item("Monitor Audio",
                            "open a window to monitor and control audio", 
                            nil, nil, 'monitor_audio_handler')
    configure_audio = nil  // must be initialized to know window is not open
    monitor_audio = nil    // same for this window
    o2_method_new("/actl/inpks", nil, 'actl_inpks', false)
    o2_method_new("/actl/outpks", nil, 'actl_outpks', false)


def actl_inpks(timestamp, address, types, rest peaks):
    if audioin_monitor:
        audioin_monitor.set_peaks(peaks)


def actl_outpks(timestamp, address, types, rest peaks):
    if audioout_monitor:
        audioout_monitor.set_peaks(peaks)



# this is called when the application starts. If devices are selected, we can
# open them. Otherwise, we open the Audio Configuration window for the user.
def auto_open_audio():
    var ca = configure_audio
    if not ca
        configure_audio_handler()
    configure_audio.open_audio_handler()
    if not ca
        config_win.delete()
        display "auto_open_audio - deleting config_win", gccyclesst, maxugenst
        configure_audio = nil


# open window to select audio devices
def configure_audio_handler(rest ignore):
    if not configure_audio:
        configure_audio = Configure_audio()
        poll_for_status_id = poll_for_status_id + 1
        poll_for_status(poll_for_status_id)


# open window to select audio devices
def monitor_audio_handler(rest ignore):
    if not monitor_audio:
        monitor_audio = Monitor_audio()


def find_channels(item, dir):
    var pos = find(item, "(") + 1
    if pos == -1:
        display "Internal error in find_channels", item, pos
        return 0
    if dir == 'out':
        pos = find(item, ",", pos) + 1
    var chans = int(subseq(item, pos))
    return chans


# makes a list of device descriptions where the number of input or output
# channels > 0. dir is 'in' or 'out'. Also strips off the device id but
# constructs a mapping from descriptions to device ids in audio_devices_map.
def find_devices(devs, dir):
    var found = ["None", "Default"]
    for item in devs:
        if find_channels(item, dir) > 0:
            var dev = int(item)
            var pos = find(item, " - ")
            if pos > 0:
                var name = subseq(item, pos + 3)
                audio_devices_map[name] = dev
                found.append(name)
    return found


// references to controls. These are tested to 
// see if controls exist yet, so must be initialized:
config_win = nil
audio_input_rb = nil

def select_preference(rb, items, attr):
    var pref = prefs.get(attr, "Default")
    for name at i in items:
        if name == pref:
            rb.set_value(i)


def create_device_selections():
# create radio boxes to select audio input. Y coord is device_selections_y
    if not config_win:
        return
    if audio_input_rb:
        audio_input_rb.delete()
        audio_output_rb.delete()

    // audio devices are listed in audio_devices as strings
    audio_devices_map = {"None": -2, "Default": -1}
    var input_items = find_devices(audio_devices, 'in')
    var rbheight = 35 + len(input_items) * 25
    Radiobox(config_win, "Audio Input", input_items, 
             10, device_selections_y, 400, rbheight, 'audio_input_rb')
    var bottom = wxs_y + wxs_h
    display "after input", bottom
    select_preference(audio_input_rb, input_items, 'audio_in_dev')

    var output_items = find_devices(audio_devices, 'out')
    rbheight = 35 + len(output_items) * 25
    Radiobox(config_win, "Audio Output", output_items, 
             'R', 'S', 'S', rbheight, 'audio_output_rb')
    bottom = max(bottom, wxs_y + wxs_h) + 10
    display "after output", bottom
    select_preference(audio_output_rb, output_items, 'audio_out_dev')


poll_for_status_id = 0

def poll_for_status(id):
    if id != poll_for_status_id or not config_win:
        return  // quit this "process"
    display "poll_for_status", gccyclesst, maxugenst
    if gccyclesst:
        gccyclesst.set_string("GC cycles: " + str(gc_cycles()))
        maxugenst.set_string("Max Ugen ID: " + str(max_ugen_id_used))
        arco_get_cpu_load('show_cpu_load')
    sched_cause(1.0, nil, 'poll_for_status', id)


def show_cpu_load(cpu):
    if cpuloadst:  // caution: Static_text control may have been deleted
        cpuloadst.set_string("CPU Load: " + str(round(cpu, 2)))
        cpuloadgauge.set_value(int(100 * cpu))


gccyclesst = nil // text boxes are created after Arco audio is started
cpuloadst = nil

class Configure_audio:
    def init():
        Window("Configure Audio", 520, 20, 850, 360, 'config_win')
        config_win.set_rgb(200, 230, 200)
        config_win.add_target_method(this, 'win_handler')

        Button(config_win, "Open Audio", 10, 10, 120, 'H', 
               'open_audio_button')
        open_audio_button.add_target_method(this, 'open_audio_handler')

        Button(config_win, "Close Audio", 'R', 'S', 'S', 'H', 
               'close_audio_button')
        close_audio_button.add_target_method(this, 'close_audio_handler')

        Button(config_win, "Rescan Audio", 'R', 'S', 'S', 'H', 
               'rescan_audio_button')
        rescan_audio_button.add_target_method(this, 'rescan_audio_handler')

        Button(config_win, "Reset Audio", 'R', 'S', 'S', 'H', 
               'reset_audio_button')
        reset_audio_button.add_target_method(this, 'reset_audio_handler')

        Statictext(config_win, "Cpu Load:", 10, 'D', 110, 20, 'cpuloadst')
        var y = wxs_y  // save y offset
        Gauge(config_win, 100, 'R', y - 3, 120, 20, 'cpuloadgauge')
        wxs_w = 140  // give extra space before GC cycles
        Statictext(config_win, "GC cycles: 0", 'R', y, 100, 20, 'gccyclesst')
        Statictext(config_win, "Max Ugen ID: 0", 'R', y, 130, 20, 'maxugenst')

        wxs_compute_coordinates('S', 'D', 'S', 'S')  // compute Y below maxugens
        device_selections_y = wxs_y  // save coordinate for future layout
        create_device_selections()
        config_win.fit_to_children()


    def win_handler(obj, event, x, y):
        if event == WXS_CLOSE_WINDOW:
            config_win.delete()    // destroy the window and components
            configure_audio = nil  // destroy reference to this object
        wxs_event_not_handled()    // allow window to close


    def device_id(rb, attr):  // compute device id, given radio button
        var dev = rb.item_string(rb.value())
        prefs.set(attr, dev, t)
        audio_devices_map[dev]


    def open_audio_handler(rest ignore):
        if not set_arco_state('opening'):
            return

        var in_dev = device_id(audio_input_rb, 'audio_in_dev')
        var out_dev = device_id(audio_output_rb, 'audio_out_dev')

        // set audio gain before opening
        arco_gain(db_to_linear(audiomaster_gain))

        display "Calling arco_open", in_dev, out_dev
        // Indicate no input or no output by setting channels to zero:
        arco_open(in_dev, out_dev, 0 if in_dev == -2 else arco_input_chans,
                  0 if out_dev == -2 else arco_output_chans,
                  arco_latency, arco_buffersize)


    def close_audio_handler(rest ignore):
        if not set_arco_state('stopped'):
            return
        saved_vtsched_bps = vtsched.bps
        vtsched.set_bps(STOPPED_BPS)
        o2_send_cmd("/arco/close", 0, "")
        poll_for_status_id = poll_for_status_id + 1


    def rescan_audio_handler(rest ignore):
        if not set_arco_state('devinf2'):
            return
        audio_devices.clear()
        audio_devices_map.clear()
        o2_send_cmd("/arco/devinf", 0, "s", "/actl/devinf")
        

    def reset_audio_handler(rest ignore):
        reset_arco()

##################################################################


// clipping light
class Clip_light (Eventlight):
    var off_time

    def init(window, x, y, optional varname):
        super.init(window, 10, x, y, varname)
        on_color = "RED" // make it look more like overload warning

    def clip():
        set(true)
        sched_select(rtsched)
        off_time = sched_rtime + 0.1
        sched_cause(0.11, this, 'turn_off')

    def turn_off():
        if sched_rtime > off_time:
            set(false)



// this class receives level and peak messages
class Audio_monitor:
    var clip_obj
    var vu_obj
    
    def init(clip, vu):
        clip_obj = clip
        vu_obj = vu

    def set_clip()
        clip_obj.clip()

    def set_peaks(vector)
        for x at chan in vector
            vu_obj.update(chan, x)
            if x > 0.99:
                set_clip()
        vu_obj.tick()

    def delete():  // make sure no reference left to widgets
        clip_obj = nil
        vu_obj = nil



class Monitor_audio:
    var current_input  // string with current input selection
    var input_vu
    var output_vu
    var monitoring_input
    var test_tone_osc
    var input_logger
    var output_logger

    def init():
        var left = 5
        Window("Monitor Audio", 520, 400, 300, 30, 'mon_win')
        mon_win.set_rgb(200, 200, 230)
        mon_win.add_target_method(this, 'win_handler')

        var in_out_y = 45

        ## Audio Input Controls
        if arco_input_chans > 0:
            Statictext(mon_win, "In", left, in_out_y + 1, 40, 20)
            inclip_light = Clip_light(mon_win, left + 15, in_out_y + 5,
                                      'inclip_light')
            var right_of_light = wxs_x + wxs_w + 15  // some extra space
            input_vu_meter = Vumeter(mon_win, arco_input_chans, 
                                     left + 5, in_out_y + 26, 'input_vu_meter')
            audioin_monitor = Audio_monitor(inclip_light, input_vu_meter)
            input_vu = vu("/actl/inpks", 0.05)
            input_vu.set('inp', input_ugen)
            input_vu.run()  // add to run_set to make it compute peaks

            # Audio Input Selection
            Listbox(mon_win, 'S', 'D', 100, 50, nil, 'audioin_lb')
            current_input = "Audio Input"
            audioin_lb.append(current_input)
            audioin_lb.append("Mute Input")

            if fileinput_files:
                for file in fileinput_files:
                    // only add files that actually exist:
                    rslt = open(file, "rb")
                    if rslt:
                        audioin_lb.append(file)
                        rslt.close()
            rslt = nil // just to be tidy
            audioin_lb.add_target_method(this, 'audioin_select')

            # monitor input button
            Checkbox(mon_win, "Mon", right_of_light, in_out_y, 60, 20,
                     'mon_input_bn')
            mon_input_bn.add_target_method(this, 'mon_input')

            # login (log input audio) button
            Checkbox(mon_win, "LogInp", 'R', 'S', 75, 'S', 'audio_login_cb')
            audio_login_cb.add_target_method(this, 'audio_loginp')

        ## Audio Output Controls
        if arco_output_chans > 0:
            Labeled_slider(mon_win, "Master", left, 10, 330, 25, 50, 
                           -100.0, 24.0,
                           audiomaster_gain, 'db', 'master_slider')
            master_slider.add_target_method(this, 'set_audiomaster_gain')

            ## enable audio button
            Checkbox(mon_win, "Mute", wxs_x + wxs_w + 15, 'S', 60, 25,
                     'mute_audio_bn')
            mute_audio_bn.add_target_method(this, 'mute_audio')

            left = left + 185
            Statictext(mon_win, "Out", left, in_out_y + 1, 40, 20)
            Clip_light(mon_win, left + 27, in_out_y + 5, 'outclip_light')
            right_of_light = wxs_x + wxs_w + 15  // some extra space

            ## test tone button:
            Checkbox(mon_win, "Tone", right_of_light, in_out_y, 60, 20, 
                     'test_tone_cb')
            test_tone_cb.add_target_method(this, 'test_tone')
            test_tone_osc = nil

            ## log button
            Checkbox(mon_win, "LogOut", 'R', 'S', 75, 'S', 'audio_logout_cb')
            audio_logout_cb.add_target_method(this, 'audio_logout')

            Vumeter(mon_win, arco_output_chans, 
                    left, in_out_y + 26, 'output_vu_meter')
            audioout_monitor = Audio_monitor(outclip_light, output_vu_meter)
            output_vu = vu("/actl/outpks", 0.05)
            output_vu.set('inp', prev_output_ugen)
            output_vu.run()  // add to run_set to make it compute peaks

        ## probe and scope to monitor input
        // master_probe = probe()
        // var probe_what = input_ugen
        // if arco_input_chans == 0:
        //     probe_what = prev_output_ugen
        //     print "** Note: no input, Oscilloscope shows nothing **"
        // probe.set('inp', probe_what)

        var ms_x = 245
        var ms_y = 5
        var ms_h = 200 
        // master_scope = Arco_scope(mon_win, "scope", ms_x, ms_y, 212, ms_h, 
        //                           master_probe)
        // master_scope.start()

        Checkbox(mon_win, "Enbl", ms_x + 55, ms_y + ms_h + 5, 48, 15,
                 'enable_scope_bn')
        enable_scope_bn.set_value(t) // initially enabled
        enable_scope_bn.add_target_method(this, 'enable_scope')

        Statictext(mon_win, "Chan", ms_x + 120, ms_y + ms_h + 5, 40, 20,
                   'scope_channel_lb')
        Spinctrl(mon_win, 0, arco_output_chans - 1, 0,
                 ms_x + 155, ms_y + ms_h, 40, 30, 'scope_channel_sp')
        scope_channel_sp.set_size(40, 30) // reset size to work around bug
        scope_channel_sp.add_target_method(this, 'scope_channel_select')
        mon_win.fit_to_children()  // make window big enough


    def delete():
        mon_win.delete()
        if audioin_monitor:
            audioin_monitor.delete()
            audioin_monitor = nil
        if audioout_monitor:
            audioout_monitor.delete()
            audioout_monitor = nil
        if input_vu:
            input_vu.set('inp', zero_ugen)  // disconnect from input
            input_vu.unrun()                //      to stop it
        if output_vu:
            output_vu.set('inp', zero_ugen)  // disconnect from prev_output
            output_vu.unrun()                //     to stop it
        test_tone(nil, nil, false, nil);
        audio_login(nil, nil, false, nil);
        audio_logout(nil, nil, false, nil);
        monitor_audio = nil  // remove global reference to this object


    def win_handler(obj, event, x, y):
        if event == WXS_CLOSE_WINDOW:
            monitor_audio.delete()  // destroy this object and window
        wxs_event_not_handled()    // allow window to close


    def mon_input(obj, event, x, y):
        display "mon_input", x
        if x and not monitoring_input:
            input_ugen.play()
        elif not x and monitoring_input:
            input_ugen.mute()
        monitoring_input = x


    def test_tone(obj, event, x, y):
        display "test_tone", x
        if x and not test_tone_osc:
            test_tone_osc = sine(1000.0, db_to_linear(-30), arco_output_chans)
            test_tone_osc.play()
        elif not x and test_tone_osc:
            test_tone_osc.mute()
            test_tone_osc = nil


    def audio_loginp(obj, event, x, y):
        if x and not input_logger:
            input_logger = filerec("input.wav", input_ugen, arco_input_chans)
            input_logger.run()
            input_logger.go()
        elif not x and input_logger:
            input_logger.go(false)
            input_logger.unrun()
            input_logger = false;


    def audio_logout(obj, event, x, y):
        if x and not output_logger:
            output_logger = filerec("output.wav", prev_output_ugen,
                                    arco_output_chans)
            output_logger.run()
            output_logger.go()
        elif not x and output_logger:
            output_logger.go(false)
            output_logger.unrun()
            output_logger = false;


    def audioin_select(obj, event, x, y):
        display "audioin_select", x
        var inp
        if x == current_input:
            return
        if x == "Mute Input":
            // we need a unique Zero object to provide input:
            var silence = Zero()
            input_ugen.set_alternate(silence)
            // silence is local variable so the only reference we leave is
            // from input_ugen to silence. The last reference is deleted and
            // silence is freed when the input is unmuted.
        elif x == "Audio Input":
            input_ugen.set_alternate(zero_ugen)  // clears alternate input
        else:
            if not fileinput_player:
                fileinput_player = fileplay(x, arco_input_channels, 0, 0,
                                            false, true, true)
                fileinput_player.go()
                input_ugen.set_alternate(fileinput)


    def mute_audio(rest ignore):
    # handler for mute button: something changed, so do an update
        set_audiomaster_gain(nil, audiomaster_gain)


    def set_audiomaster_gain(slider, g)
        audiomaster_gain = g
        display "set master gain", mute_audio_bn.value()
        arco_gain(0 if mute_audio_bn.value() else 
                  db_to_linear(audiomaster_gain))
        prefs.set('master_gain', g)
        print "Saving audiomaster_gain as", g
        prefs.save()


#// this class receives level and peak messages
#class Audio_monitor:
#    var clip_obj
#    var vu_obj
#    var name  // used for debugging
#    
#
#
#    def init2(clip, vu, optional name_):
#        clip_obj = clip
#        vu_obj = vu
#        name = name_
#
#    def set_clip()
#        clip_obj.clip()
#
#    def set_peaks(vector)
#        var ch = 0
#        for x in vector
#            vu_obj.update(ch, x)
#            ch = ch + 1
#        vu_obj.tick()
#
#
#def audioin_mute():
#    audioin_listbox.set_value("Mute Input")
#
#
#def audioin_select(obj, event, x, y)
#    display "audioin_select", x, audioin_aura.to_string()
#    var inp
#    if x == "Mute Input":
#        inp = aura_null
#    elif x == "Audio Input":
#        inp = audioeng_aura
#    else:
#        if not fileinput_player:
#            fileinput_player = istream_player_create("", 2, 0.0, 0.0, false,
#                                                      audio_space_zone)
#            fileinput_player <- set_blocksize(16000)
#        fileinput_player <- set_enabled(t)
#        fileinput_player <- set_source(x, 0.0, 0.0, false)
#        inp = fileinput_player
#        fileinput_player_active = true
#    if fileinput_player_active and not (inp == fileinput_player):
#        audioeng_aura <- remove(fileinput_player)
#        fileinput_player_active = false
#    elif not fileinput_player_active and (inp == fileinput_player):
#        audioeng_aura <- insert(fileinput_player)
#    display "audioin_select", current_audioin.to_string(), inp.to_string()
#    if not current_audioin.equals(inp):
#        if not current_audioin.equals(aura_null):
#            audioin_aura <- remove_chan(current_audioin, -1)
#        if not inp.equals(aura_null):
#            audioin_aura <- insert_chan(inp, -1, 1)
#        current_audioin = inp
#        display "audioin_select", inp.to_string()
#
#
#def print_tree(obj, event, x, y)
#    print "print_tree"
#    audioeng_aura <- print_tree()
#
#
#monitor_state = false
#def monitor_input(obj, event, x, y)
#    display "monitor_input", monitor_state, x
#    assert(monitor_state != x)
#    if x:
#        audioeng_aura <- play(audioin_aura)
#    else:
#        audioeng_aura <- mute(audioin_aura)
#    monitor_state = x
#
#
#// enable/disable audio, showing state on the "Enable" button
#def aura_audio_enable(flag)
#    enable_audio_button.set_value(flag)
#
#aura_audio_enabled = false
#
#// callback for enable button
#def enable_audio(obj, event, x, y):
#    if x != aura_audio_enabled:
#        aura_audio_enabled = x
#        aura_audio_open() if x else aura_audio_close()
#        
#def enable_scope(obj, event, x, y):
#    display "enable_scope", x
#    master_scope.start() if x else master_scope.stop()
#
#def scope_channel_select(obj, event, x, y)
#    display "scope_channel_select", event, x, y
#    aura_send_to(master_probe, "set_in_audio", ["ail", audioeng_aura, x, t])
#
#def test_tone(obj, event, x, y)
#    display "test_tone", event, x
#    if not test_tone_osc:
#        // initial master gain is -12, so we expect amplitude will be -42dB
#        test_tone_osc = Mult(Osc(880.0, name = "test-tone"), db_to_linear(-30.0),
#                             name = "test-tone-gain")
#        test_tone_osc.make_permanent()
#    if x
#        // first, make sure audio is enabled
#        aura_audio_enable(true)
#        // make sure solo_input is disabled
#        display "test_tone: play", test_tone_osc.to_string()
#        test_tone_osc.play()
#    else
#        test_tone_osc.mute()
#
#def audio_log(obj, event, x, y)
#    display "audio_log", event
#    audioeng_aura <- set_log_output(x)
#
#def audio_login(obj, event, x, y)
#    display "audio_login", event
#    audioeng_aura <- set_log_input(x)
#
#
#// clipping light
#class Clip_light:
#    var light
#    var off_time
#    var x, y
#
#    def init2(window, the_x, the_y):
#        x = the_x
#        y = the_y
#        light = Eventlight(window, 10, x, y)
#        light.on_color = "RED" // make it look more like overload warning
#
#    def clip():
#        if not light:
#            print "error in Clip_light -- light is nil, x", x, "y", y
#            return
#        light.set(true)
#        off_time = aura_get_logical_time() + 0.1
#        cause(0.11, 'turn_off')
#
#    def turn_off():
#        if aura_get_logical_time() > off_time:
#            light.set(false)
#
#
#//class Outclip_light (Clip_light):
#//    def outclip():
#//        clip()
#//    def clip():
#//        t // ignore clip messages -- we want to listen to outclip only
#
#audiomaster_gain = prefs.get('master_gain', -12.0)
#display "audiomaster_gain", audiomaster_gain
#
#def audiomaster_create(w, x, y)
#    display "audiomaster_create called", w, x, y
#    init_ugen() // make sure we have ugen library initialized
#    // audio gain slider
#    if aura_get_audio_output_channels() > 0:
#        master_slider = Aura_slider(w, "Master", x, y,
#                                    -100.0, 24.0, audiomaster_gain,
#                                    'db', audioeng_aura, "set_gain",
#                                    slider_width = 240)
#        master_slider.method = 'set_audiomaster_gain'
#        // set audio gain to match initial slider value
#        audioeng_aura <- set_gain(audiomaster_gain)
#        // aura_send_to(audioeng_aura, "set_gain", ["d", -12.0])
#        Statictext(w, "Out", x + 95, y + 23, 40, 20)
#        //display "creating Clip_light", w, x, y
#        //print "created Clip_light"
#        outclip_light = Clip_light(w, x + 122, y + 28)
#        output_vu = Vumeter(w, aura_get_audio_output_channels(), x + 125, y + 39)
#        //print "created vumeter"
#        audioout_monitor = Audio_monitor(outclip_light, output_vu, "output")
#        //print "created Audio_monitors"
#        display "audiomaster_create: creating audio_out", audio_space_zone
#        // now unique and created by aura4audio.srp:
#        //     audioout_aura = audio_out_create(audio_space_zone)
#        ivu_out_aura = ivu_create(audioout_aura, audio_space_zone)
#        aura_connect_from(audioout_monitor.aura, ivu_out_aura)
#        // audio_monitor.aura <- set_debuglevel(100)
#
#
#    if aura_get_audio_input_channels() > 0:
#        Statictext(w, "In", x, y + 23, 40, 20)
#        inclip_light = Clip_light(w, x + 15, y + 28)
#        input_vu = Vumeter(w, aura_get_audio_input_channels(), x + 5, y + 39)
#        audioin_monitor = Audio_monitor(inclip_light, input_vu, "input")
#        ivu_in_aura = ivu_create(audioin_aura, audio_space_zone)
#        aura_connect_from(audioin_monitor.aura, ivu_in_aura)
#        // audio input selection -- audio in or file reader
#        audioin_listbox = Listbox(w, x + 7, y + 106, 100, 50, nil)
#        audioin_listbox.append("Audio Input")
#        audioin_listbox.append("Mute Input")
#
#        for file in fileinput_files:
#            // only add files that actually exist:
#            rslt = open(file, "rb")
#            if rslt:
#                audioin_listbox.append(file)
#                rslt.close()
#        rslt = nil // just to be tidy
#        audioin_listbox.method = 'audioin_select'
#        // initially, audio_in is copied from "real" input:
#        current_audioin = audioeng_aura
#        // current_audioin is variable, depending on input you select, and
#        // it could be AURA_NULL if you select "Mute", so use audioin_aura
#        // if you want an audio source that reflects the current selection
#
#        // login button
#        audio_login_button = Checkbox(w, "LogIn", x + 110, y + 130, 75, 15)
#        audio_login_button.method = 'audio_login'
#
#        // monitor input button
#        monitor_input_button = Checkbox(w, "Mon", x + 30, y + 20, 60, 15)
#        monitor_input_button.method = 'monitor_input'
#
#    // print_tree button
#    print_tree_button = Button(w, "Print Tree", x + 110, y + 106, 75, 20)
#    print_tree_button.method = 'print_tree'
#
#    // enable audio button;
#    enable_audio_button = Checkbox(w, "Enbl", x + 135, y + 20, 48, 15)
#    enable_audio_button.set_value(t) // initially enabled
#    enable_audio_button.method = 'enable_audio'
#
#    // test tone button:
#    test_tone_button = Checkbox(w, "Tone", x + 185, y + 20, 55, 15)
#    test_tone_button.method = 'test_tone'
#    test_tone_osc = nil
#
#    // log button
#    audio_log_button = Checkbox(w, "Log", x + 245, y + 20, 50, 15)
#    audio_log_button.method = 'audio_log'
#
#    // probe and scope to monitor input
#    display "creating Iprobe", hex(audio_space_zone)
#    master_probe = aura_create_inst("Iprobe", audio_space_zone)
#    var probe_what = audioin_aura
#    if aura_get_audio_input_channels() == 0:
#        probe_what = audioeng_aura
#        print "** Note: no input, Oscilloscope shows nothing **"
#    aura_send_to(master_probe, "init2", ["al", probe_what, t])
#
#    var ms_x = 245
#    var ms_y = 5
#    var ms_h = 200 
#    master_scope = Aura_scope(w, "scope", ms_x, ms_y, 212, ms_h, master_probe)
#    master_scope.start()
#
#    enable_scope_button = Checkbox(w, "Enbl", ms_x + 55, ms_y + ms_h + 5, 
#                                   48, 15)
#    enable_scope_button.set_value(t) // initially enabled
#    enable_scope_button.method = 'enable_scope'
#
#    scope_channel_label = Statictext(w, "Chan", ms_x + 120, ms_y + ms_h + 5, 
#                                     40, 20)
#    scope_channel_spin = Spinctrl(w, 0, aura_get_audio_output_channels() - 1, 0, 
#                                    ms_x + 155, ms_y + ms_h, 40, 30)
#    scope_channel_spin.set_size(40, 30) // reset size to work around bug
#    scope_channel_spin.method = 'scope_channel_select'
#
#    //audioeng_aura <- set_debuglevel(11)
#
#    #### debugging only -- pass input direct to output
##    audioeng_aura <- play(audioin_aura)
##    print "TEST:     audioin_aura <- remove_chan(audioeng_aura, -1)"
##    audioin_aura <- remove_chan(audioeng_aura, -1)

