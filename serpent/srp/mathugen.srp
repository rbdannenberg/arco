# add.srp - constructor implementation for mult, add, ugen_div, ugen_max,
#           ugen_min, ugen_clip, ugen_less, ugen_greater, ugen_soft_clip.
#           For completeness, you can create a Math as well with ugen_math.

MATH_OP_MUL = 0
MATH_OP_ADD = 1
MATH_OP_SUB = 2
MATH_OP_DIV = 3
MATH_OP_MAX = 4
MATH_OP_MIN = 5
MATH_OP_CLP = 6  // min(max(x, -y), y) i.e. clip if |x| > y
MATH_OP_POW = 7
MATH_OP_LT = 8
MATH_OP_GT = 9
MATH_OP_SCP = 10
MATH_OP_PWI = 11
MATH_OP_RND = 12
MATH_OP_SH = 13
MATH_OP_QNT = 14
MATH_OP_RLI = 15

def math(op, x1, x2, optional chans):
    if not chans:
        chans = max_chans(max_chans(1, x1), x2)
    Ugen(create_ugen_id(), "math", chans, 'a', "iUU",
         'op', op, 'x1', x1, 'x2', x2)


def mathb(op, x1, x2, optional chans):
    if not isnumber(x1) and x1.rate != 'b':
        display "ERROR: 'x1' input to Ugen 'mathb' must be block rate", op
        return nil
    if not isnumber(x2) and x2.rate != 'b':
        display "ERROR: 'x2' input to Ugen 'mathb' must be block rate", op
        return nil
    if not chans:
        chans = max_chans(max_chans(1, x1), x2)
    Ugen(create_ugen_id(), "mathb", chans, 'b', "iUU",
         'op', op, 'x1', x1, 'x2', x2)


def mult(x1, x2, optional chans, keyword x2_init):
    if x2_init:
        if not chans:
            chans = max_chans(max_chans(1, x1), x2)
        Ugen(create_ugen_id(), "multx", chans, 'a', "UUf", 'x1', x1, 'x2', x2,
             'init', x2_init)
    else:
        math(MATH_OP_MUL, x1, x2, chans)


def multb(x1, x2, optional chans):
    mathb(MATH_OP_MUL, x1, x2, chans)


def add(x1, x2, optional chans):
    math(MATH_OP_ADD, x1, x2, chans)
def addb(x1, x2, optional chans):
    mathb(MATH_OP_ADD, x1, x2, chans)

def sub(x1, x2, optional chans):
    math(MATH_OP_SUB, x1, x2, chans)
def subb(x1, x2, optional chans):
    mathb(MATH_OP_SUB, x1, x2, chans)

def ugen_div(x1, x2, optional chans):
    math(MATH_OP_DIV, x1, x2, chans)
def ugen_divb(x1, x2, optional chans):
    mathb(MATH_OP_DIV, x1, x2, chans)

def ugen_max(x1, x2, optional chans):
    math(MATH_OP_MAX, x1, x2, chans)
def ugen_maxb(x1, x2, optional chans):
    mathb(MATH_OP_MAX, x1, x2, chans)

def ugen_min(x1, x2, optional chans):
    math(MATH_OP_MIN, x1, x2, chans)
def ugen_minb(x1, x2, optional chans):
    mathb(MATH_OP_MIN, x1, x2, chans)

def ugen_clip(x1, x2, optional chans):
    math(MATH_OP_CLP, x1, x2, chans)
def ugen_clipb(x1, x2, optional chans):
    mathb(MATH_OP_CLP, x1, x2, chans)

def ugen_pow(x1, x2, optional chans):
    math(MATH_OP_POW, x1, x2, chans)
def ugen_powb(x1, x2, optional chans):
    mathb(MATH_OP_POW, x1, x2, chans)

def ugen_less(x1, x2, optional chans):
    math(MATH_OP_LT, x1, x2, chans)
def ugen_lessb(x1, x2, optional chans):
    mathb(MATH_OP_LT, x1, x2, chans)

def ugen_greater(x1, x2, optional chans):
    math(MATH_OP_GT, x1, x2, chans)
def ugen_greaterb(x1, x2, optional chans):
    mathb(MATH_OP_GT, x1, x2, chans)

def ugen_soft_clip(x1, x2, optional chans):
    math(MATH_OP_SCP, x1, x2, chans)
def ugen_soft_clipb(x1, x2, optional chans):
    mathb(MATH_OP_SCP, x1, x2, chans)

def ugen_powi(x1, x2, optional chans):
    math(MATH_OP_PWI, x1, x2, chans)
def ugen_powib(x1, x2, optional chans):
    mathb(MATH_OP_PWI, x1, x2, chans)

def ugen_rand(x1, x2, optional chans):
    math(MATH_OP_RND, x1, x2, chans)
def ugen_randb(x1, x2, optional chans):
    mathb(MATH_OP_RND, x1, x2, chans)

def sample_hold(x1, x2, optional chans):
    math(MATH_OP_SH, x1, x2, chans)
def sample_holdb(x1, x2, optional chans):
    mathb(MATH_OP_SH, x1, x2, chans)

def ugen_quantize(x1, x2, optional chans):
    math(MATH_OP_QNT, x1, x2, chans)
def ugen_quantizeb(x1, x2, optional chans):
    mathb(MATH_OP_QNT, x1, x2, chans)

def ugen_rli(x1, x2, optional chans):
    math(MATH_OP_RLI, x1, x2, chans)
def ugen_rlib(x1, x2, optional chans):
    mathb(MATH_OP_RLI, x1, x2, chans)
