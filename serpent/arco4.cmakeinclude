# arco4 incorporated with serpent into a custom application
# Roger B. Dannenberg
# Feb 2022

# This is based on serpent/64bit/CMakeLists.txt

# Structure of the CMake system:
# 
# apps/test/CMakeLists.txt
#     serpent/arco4.cmakeinclude
#         arco4/CMakeLists.txt -- arco sources for arco library
#         ../64bit/src/CMakeLists.txt
#         ../serpent/wxs/CMakeLists.txt
#
# library organization:
#    wxslib -- wxWidgets gui and main for serpent, arco interface functions
#    srplib -- serpent implementation sans main program
#    arco4lib -- arco audio processing, including unit generators
#    o2_static, portmidi_static, portaudio_static, libflac_static, 
#        sndfile_static, vorbis_static -- arco depends on these too

cmake_minimum_required(VERSION 3.21)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR})

message(STATUS CMAKE_SOURCE_DIR=${CMAKE_SOURCE_DIR} " "
               CMAKE_CURRENT_LIST_DIR=${CMAKE_CURRENT_LIST_DIR})
# "FRIENDS" is where to find dependent software: o2, serpent, liblo, portaudio,
#  etc.  We are in arco4/serpent, so go up two levels:
get_filename_component(FRIENDS ${CMAKE_CURRENT_LIST_DIR} DIRECTORY)
get_filename_component(FRIENDS ${FRIENDS} DIRECTORY)

set(SERPENT_BASE_DIR ${FRIENDS}/serpent)
get_filename_component(SERPENT_BASE_DIR ${SERPENT_BASE_DIR} REALPATH)
message(STATUS SERPENT_BASE_DIR=${SERPENT_BASE_DIR})

set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING
              "Semicolon-separated list of supported configuration types"
              FORCE)

set(CMAKE_OSX_ARCHITECTURES x86_64 CACHE STRING "only build forx86_64" FORCE)

option(USE_STATIC_LIBS "Build with static libs?" TRUE)
option(USE_LIBSNDFILE_EXTERNALS "Link with Ogg, Vorbis, and FLAC" FALSE)

# should all this be in arco/CMakeLists.txt?

# since libraries depend on the USE_STATIC_LIBS option, clear the libraries
#  from the cache
# portmidi is handled by serpent
set(SNDFILE_LIB SNDFILE_LIB-NOTFOUND)
set(OGG_LIB OGG_LIB-NOTFOUND) 
set(FLAC_LIB FLAC_LIB-NOTFOUND)
set(VORBIS_LIB VORBIS_LIB-NOTFOUND)
set(VORBISENC_LIB VORBISENC_LIB-NOTFOUND) 

if(USE_STATIC_LIBS)
  message(STATUS "** Searching for static libs FRIENDS ${FRIENDS}")

  # searches are in pairs - first look locally, then look for defaults

  find_library(PORTAUDIO_LIB
               NAMES portaudio_static.a portaudio_static 
                     libportaudio.a portaudio
               PATHS "${FRIENDS}/nyquist/Release" 
                     "${FRIENDS}/nyquist/Debug" 
                     "${FRIENDS}/portaudio/lib" 
                     "${FRIENDS}/portaudio/Release" 
                     "${FRIENDS}/portaudio/Debug" 
                     "/usr/lib/x86_64-linux-gnu"
               PATH-SUFFIXES Release Debug)
  message(STATUS "find_library PORTAUDIO_LIB -> ${PORTAUDIO_LIB}")
  # if we found the library locally, use local installation as include 
  #   path: go up two directory levels from _LIB and then down to /include:
  string(REGEX MATCH "/home/" HAS_HOME "${PORTAUDIO_LIB}")
  string(REGEX MATCH "/User/" HAS_USER "${PORTAUDIO_LIB}")
  string(REGEX MATCH "/nyquist/" HAS_NYQ "${PORTAUDIO_LIB}")
  if(HAS_NYQ)
    get_filename_component(PORTAUDIO_INCLUDES ${PORTAUDIO_LIB} DIRECTORY) 
    get_filename_component(PORTAUDIO_INCLUDES ${PORTAUDIO_INCLUDES} 
                                              DIRECTORY) 
    set(PORTAUDIO_INCLUDES "${PORTAUDIO_INCLUDES}/portaudio/include") 
    message(STATUS "found libportaudio in Nyquist, include path 
            ${PORTAUDIO_INCLUDES}")
  elseif(HAS_HOME OR HAS_USER)
    get_filename_component(PORTAUDIO_INCLUDES ${PORTAUDIO_LIB} DIRECTORY) 
    get_filename_component(PORTAUDIO_INCLUDES ${PORTAUDIO_INCLUDES} DIRECTORY) 
    set(PORTAUDIO_INCLUDES "${PORTAUDIO_INCLUDES}/include") 
    message(STATUS "found local libportaudio, include path 
                   ${PORTAUDIO_INCLUDES}")
  elseif("${PORTAUDIO_LIB}" STREQUAL "PORTAUDIO_LIB-NOTFOUND" OR
         "${PORTAUDIO_LIB}" STREQUAL "")
#    message(STATUS "Using find_package to find portaudio")
#    find_package(portaudio REQUIRED)
#    set(PORTAUDIO_INCLUDES ${Portaudio_INCLUDE_DIRS})
    set(PORTAUDIO_LIB "/usr/lib/x86_64-linux-gnu/libportaudio.so.2"
            CACHE FILEPATH "PortAudio library" FORCE)
  endif()

  find_library(SNDFILE_LIB NAMES libsndfile_static.a sndfile_static
                                 libsndfile.a sndfile
               HINTS "${FRIENDS}/libsndfile"
                     "${FRIENDS}/libsndfile/src/.libs"
                     "${FRIENDS}/nyquist/Release"
                     "${FRIENDS}/nyquist/Debug"
                     "/usr/lib/x86_64-linux-gnu"
               PATH_SUFFIXES Release Debug)
  message(STATUS "after find_library, PATHS has ${FRIENDS}/libsndfile, SNDFILE_LIB = ${SNDFILE_LIB}")
  # if we found the library locally, use local installation as include 
  #   path: go up two directory levels from _LIB:
  string(REGEX MATCH "/libsndfile" HAS_LSF "${SNDFILE_LIB}")
  string(REGEX MATCH "/home/" HAS_HOME "${SNDFILE_LIB}")
  string(REGEX MATCH "/User/" HAS_USER "${SNDFILE_LIB}")
  string(REGEX MATCH "/nyquist/" HAS_NYQ "${SNDFILE_LIB}")
  if(HAS_LSF)
    get_filename_component(SNDFILE_INCLUDES ${SNDFILE_LIB} DIRECTORY)
    set(SNDFILE_INCLUDES "${SNDFILE_INCLUDES}/include")
    message(STATUS "found libsndfile in libsndfile, include path
            ${SNDFILE_INCLUDES}")
  elseif(HAS_NYQ)
    get_filename_component(SNDFILE_INCLUDES ${SNDFILE_LIB} DIRECTORY) 
    get_filename_component(SNDFILE_INCLUDES ${SNDFILE_INCLUDES} 
                                                      DIRECTORY) 
    set(SNDFILE_INCLUDES "${SNDFILE_INCLUDES}/nylsf/include") 
    message(STATUS "found libsndfile in Nyquist, include path 
            ${SNDFILE_INCLUDES}")
  elseif(HAS_HOME OR HAS_USER)
    get_filename_component(SNDFILE_INCLUDES ${SNDFILE_LIB} DIRECTORY) 
    get_filename_component(SNDFILE_INCLUDES ${SNDFILE_INCLUDES} DIRECTORY) 
    set(SNDFILE_INCLUDES "${SNDFILE_INCLUDES}") 
    message(STATUS "found libsndfile, include path ${SNDFILE_INCLUDES}") 
  endif()

  set(SNDFILE_LIBS ${SNDFILE_LIB})

  if(USE_LIBSNDFILE_EXTERNALS)
    # libsndfile also uses libogg and libvorbis. For these, we don't need
    #   the include path because they are accessed only indirectly through 
    #   libsndfile
    find_library(OGG_LIB NAMES ogg_static.a ogg_static libogg.a ogg
                 HINTS "${FRIENDS}/ogg/src/.libs" "${FRIENDS}/nyquist"
                       "${FRIENDS}/nyquist/Release"
                       "${FRIENDS}/nyquist/Debug"
                       "/usr/lib/x86_64-linux-gnu"
                 PATH_SUFFIXES Release Debug)
    message(STATUS "OGG_LIB is ${OGG_LIB}")

    find_library(FLAC_LIB NAMES flac_static.a FLAC_static.a 
                                flac_static FLAC_static 
                                libflac.a libFLAC.a
                                flac FLAC
                 HINTS "${FRIENDS}/flac/src/libFLAC/.libs" "${FRIENDS}/nyquist"
                       "/usr/lib/x86_64-linux-gnu"
                 PATH_SUFFIXES Release Debug)
    message(STATUS "FLAC_LIB is ${FLAC_LIB}")

    find_library(VORBIS_LIB NAMES vorbis_static.a vorbis_static vorbis.a vorbis
                 HINTS "${FRIENDS}/vorbis/lib/.libs" "${FRIENDS}/nyquist"
                       "/usr/lib/x86_64-linux-gnu"
                 PATH_SUFFIXES Release Debug)

    find_library(VORBISENC_LIB NAMES vorbisenc_static.a vorbisenc_static 
                                     vorbisenc.a vorbisenc
                 HINTS "${FRIENDS}/vorbis/lib/.libs" "${FRIENDS}/nyquist"
                       "/usr/lib/x86_64-linux-gnu"
                 PATH_SUFFIXES Release Debug)
    message(STATUS "VORBIS_LIB is ${VORBIS_LIB}, 
            VORBISENC_LIB is ${VORBISENC_LIB}")

    list(APPEND SNDFILE_LIBS ${OGG_LIB} ${FLAC_LIB} ${VORBIS_LIB}
                             ${VORBISENC_LIB})
  endif()
else(USE_STATIC_LIBS)
  find_library(PORTAUDIO_LIB NAMES portaudio PATHS /usr/local/lib
                             ${FRIENDS}/portaudio/lib)
  find_library(SNDFILE_LIB NAMES sndfile PATHS
                           /usr/local/lib ${FRIENDS}/libsndfile/src/.libs)
  set(SNDFILE_LIBS ${SNDFILE_LIB})
  message(STATUS "WARNING: the cmake branch for not USE_STATIC_LIBS has not been tested and is probably not going to work")
endif(USE_STATIC_LIBS)

message(STATUS "PORTAUDIO_LIB ${PORTAUDIO_LIB} SNDFILE_LIBS ${SNDFILE_LIBS}")

# add arco -- builds audio and arco libraries
add_subdirectory(${CMAKE_CURRENT_LIST_DIR}/../arco build)

set(EXTENSION_INCLUDES ${ARCO_INCLUDES})
add_subdirectory(${SERPENT_BASE_DIR}/64bit/src 
                 ${CMAKE_CURRENT_BINARY_DIR}/serpent)

# include_directories(${SERPENT_BASE_DIR}/64bit/src)
message(STATUS "source is " ${SERPENT_EXTRAS_FULL})

# set parameters to customize daserpent
set(WXSERPENT_TARGET ${ARCO_TARGET_NAME})
add_executable(${ARCO_TARGET_NAME})

message(STATUS "target name is ${WXSERPENT_TARGET}")

# Arco-related sources added to wxslib:
set(ARCO_WXS_SOURCES src/arco4_init.cpp src/arco4_init.h src/sarco.cpp
                     ../arco/src/arcotypes.h)
list(TRANSFORM ARCO_WXS_SOURCES PREPEND "${CMAKE_CURRENT_LIST_DIR}/")
list(APPEND CUSTOM_WXS_SRC ${ARCO_WXS_SOURCES})
set(CUSTOM_WXS_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_LIST_DIR}/../arco/src")
message(STATUS "CUSTOM_WXS_SRC ${CUSTOM_WXS_SRC} 
    CUSTOM_WXS_INCLUDE_DIRECTORIES ${CUSTOM_WXS_INCLUDE_DIRECTORIES}")

set(WXSLIBRARIES_DIRECTORIES ${ARCO_LINK_DIRECTORIES} 
                             ${ARCO_APP_LINK_DIRECTORIES})

# create the executable
add_subdirectory(${SERPENT_BASE_DIR}/wxs "${CMAKE_CURRENT_BINARY_DIR}/wxsbuild")

# replace the serpent Info.plist information with Arco information
# first change will get the version into the compiler command line:
SET(SERPENT_VERSION "s${SERPENT_VERSION}-a1") # really it's arco version
# next change will get the version into Info.plist:
SET(MACOSX_BUNDLE_BUNDLE_VERSION ${SERPENT_VERSION})
SET(MACOSX_BUNDLE_BUNDLE_NAME "${WXSERPENT_TARGET}_launch")
# where to find Aura's Info.plist template MacOSXBundleInfo.plist.in
SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR})

