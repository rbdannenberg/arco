# arco4 incorporated with serpent into a custom application
# Roger B. Dannenberg
# Feb 2022

# This is based on serpent/64bit/CMakeLists.txt

# Structure of the CMake system:
# 
# apps/test/CMakeLists.txt
#     serpent/arco4.cmakeinclude
#         arco/CMakeLists.txt -- arco sources for arco library
#         ../serpent/64bit/src/CMakeLists.txt
#         ../serpent/wxs/CMakeLists.txt
#
# library organization:
#    wxslib -- wxWidgets gui and main for serpent, arco interface functions
#    srplib -- serpent implementation sans main program
#    arco4lib -- arco audio processing, including unit generators
#    o2_static, portmidi_static, portaudio_static, libflac_static, 
#        sndfile_static, vorbis_static -- arco depends on these too

cmake_minimum_required(VERSION 3.24)

message(STATUS CMAKE_SOURCE_DIR=${CMAKE_SOURCE_DIR} " "
               CMAKE_CURRENT_LIST_DIR=${CMAKE_CURRENT_LIST_DIR})
# "FRIENDS" is where to find dependent software: o2, serpent, liblo, portaudio,
#  etc.  We are in arco4/serpent, so go up two levels:
get_filename_component(FRIENDS ${CMAKE_CURRENT_LIST_DIR} DIRECTORY)
get_filename_component(FRIENDS ${FRIENDS} DIRECTORY)

set(SERPENT_BASE_DIR ${FRIENDS}/serpent)
get_filename_component(SERPENT_BASE_DIR ${SERPENT_BASE_DIR} REALPATH)
message(STATUS SERPENT_BASE_DIR=${SERPENT_BASE_DIR})

# get macro definitions and initialize variables and settings; assumes
# the current directory is <arco-root>/apps/<this-app-name>/:
include("${SERPENT_BASE_DIR}/src/srp_cmake_macros.txt")
globals_initialize()  # clear global lists for includes and definitions

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR})

set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING
              "Semicolon-separated list of supported configuration types"
              FORCE)

set(CMAKE_OSX_ARCHITECTURES x86_64 CACHE STRING "only build forx86_64" FORCE)

option(USE_STATIC_LIBS "Build with static libs?" TRUE)

# add arco -- builds audio and arco libraries
add_subdirectory(${CMAKE_CURRENT_LIST_DIR}/../arco build)

# serpent/wxs/CMakeLists.txt does not add serpent/src because
# serpent/src is also used by serpent64, so we build it here,
# but serpent/wxs will expect it and link it to wxserpent64
add_subdirectory(${SERPENT_BASE_DIR}/64bit/src 
                 ${CMAKE_CURRENT_BINARY_DIR}/serpent)

# set parameters to customize daserpent
set(WXSERPENT_TARGET ${ARCO_TARGET_NAME})
add_executable(${ARCO_TARGET_NAME})

message(STATUS "target name is ${WXSERPENT_TARGET}")

# Arco-related sources added to wxslib:
set(ARCO_WXS_SOURCES src/arco4_init.cpp src/arco4_init.h src/sarco.cpp
                     ../arco/src/arcotypes.h)
list(TRANSFORM ARCO_WXS_SOURCES PREPEND "${CMAKE_CURRENT_LIST_DIR}/")
list(APPEND CUSTOM_WXS_SRC ${ARCO_WXS_SOURCES})
set(CUSTOM_WXS_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_LIST_DIR}/../arco/src")
message(STATUS "CUSTOM_WXS_SRC ${CUSTOM_WXS_SRC} 
    CUSTOM_WXS_INCLUDE_DIRECTORIES ${CUSTOM_WXS_INCLUDE_DIRECTORIES}")

set(EXTERNAL_LIBRARIES arco4lib)  # externals for wxserpent

# create the executable
add_subdirectory(${SERPENT_BASE_DIR}/wxs "${CMAKE_CURRENT_BINARY_DIR}/wxsbuild")

# replace the serpent Info.plist information with Arco information
# first change will get the version into the compiler command line:
SET(SERPENT_VERSION "s${SERPENT_VERSION}-a1") # really it's arco version
# next change will get the version into Info.plist:
SET(MACOSX_BUNDLE_BUNDLE_VERSION ${SERPENT_VERSION})
SET(MACOSX_BUNDLE_BUNDLE_NAME "${WXSERPENT_TARGET}_launch")
# where to find Aura's Info.plist template MacOSXBundleInfo.plist.in
SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR})

apply_common_settings()
message(STATUS "---------- bottom of arco4.cmakeinclude -----------")
