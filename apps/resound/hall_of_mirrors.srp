# Project Author: Roger B. Dannenberg
# Date: June 7, 2023

class Shift_delay_bank:
# Creates a shift delay bank
    var shift_objs, delay_objs // pitch-shift and delay objects
    var len_objs // length of delay and pitch-shift objects

    def init(length):
        len_objs = length
        shift_objs = array(length)
        delay_objs = array(length)
        for i = 0 to length:
            delay_objs[i] = delay(input_ugen, 1.0, 0.0, 2.0)
            shift_objs[i] = olapitchshift(delay_objs[i], 1, 0.01, 0.05)

    def set_delay(i, delay_value):
    # Sets the delay of the ith delay objects
        delay_objs[i].set('dur', delay_value)

    def set_ratio(i, ratio_value):
    # Sets the ratio of the ith pitch shift object
        shift_objs[i].set_ratio(ratio_value)
    


class Hall_of_mirrors (Movement):
# Instance variables
    var win, init_x, init_y // GUI params
    var shift_delay_bank // bank containing shift and delay units
    var mixer // Mixer containing delay and pitch-shifted ugens
    var mix_gain // smoothb objects to adjust mixer gains smoothly
    var played_once
    var latency
    

    def init(window, x, y):
    # Initialization of instance variables
        super.init("II", 7)
        win = window // Main UI window
        init_x = x // Starting x coord of movement
        init_y = y // Starting y coord of movement
        played_once = nil
        latency = latency_slider.value() / 1000
        mixer = nil
        setup_ui()


    def setup_ui():
    # Setting up Movement's UI
        // Create Radiobox
        Radiobox(win, "II. Hall of Mirrors",
                ["off", "1", "2", "3", "4", "5"], init_x, init_y,
                150, 200, 'hallmirror')
        hallmirror.add_target_method(this, 'hallmirror_handler')
        latency_slider.add_target_method(this, 'lshandler')


    def lshandler(obj, x):
    # Latency slider handler
        latency = x / 1000


    def disable_real():
        dispose_dsp()


    def dispose_dsp():
    # Mutes mixer, shift and delay objects and set to nil
        if not mixer:
            return  // already removed mixer and dsp
        print "dispose_dsp - removing all ugens"
        mixer.fade(0.2)
        mixer = nil
        shift_delay_bank = nil
        mix_gain = nil
        hallmirror.set_value(0)


    def create_dsp()
    # Restart the hall of mirror movement if not already started
        if mixer:
            return  // already started
        print "create_dsp - creating all ugens"
        // Create shift delay bank
        shift_delay_bank = Shift_delay_bank(5)

        // Initialize mixer
        mixer = mix(2)
        mix_gain = []

        // insert shift objects into the mixer
        for i = 0 to 5:
            var mg = smoothb(0, 10, 2)
            mix_gain.append(mg)
            mixer.ins(str(i), shift_delay_bank.shift_objs[i], mg)
        
        mixer.play()


    def freq_ratio(semi_arr):
    # returns an array of freq_ratios from 
    # semi_arr (semitone array)
        result = []
        for i=0 to len(semi_arr):
            ratio = 2**(semi_arr[i] / 12)
            result.append(ratio)
        return result


    def hallmirror_handler(obj, event, x, y):
    # Shift delay hit events
        // Setup shift-delays by passing delay and semitone
        // array
        tempo = 60 / 50 // seconds per beat at 50 BPM
        if x == 0:
            dispose_dsp()
        else:
            create_dsp()  // normally remains on until disable_real()

        if x == 1:
            semitone_arr = [2]
            set_shift_delay(tempo / 2, freq_ratio(semitone_arr))
        elif x == 2:
            semitone_arr = [2, 7]
            set_shift_delay(tempo / 3, freq_ratio(semitone_arr))
        elif x == 3:
            semitone_arr = [2, 4, 11]
            set_shift_delay(tempo / 4, freq_ratio(semitone_arr))
        elif x == 4:
            semitone_arr = [2, 4, 11, 8]
            set_shift_delay(tempo / 5, freq_ratio(semitone_arr))
        elif x == 5:
            semitone_arr = [-14, 9, 2, 5, 12]
            set_shift_delay(tempo / 6, freq_ratio(semitone_arr))


    def set_shift_delay(delay, shift_arr):
    # Sets up the delay and shift values 
    # in the shift-delay bank
        print "set_shift_delay with shift_arr", shift_arr
        # turn off shift units that are to be inactive
        for i = len(shift_arr) to shift_delay_bank.len_objs:
            mix_gain[i].set_chan(0, 0) // set gain for left channel
            mix_gain[i].set_chan(1, 0) // set gain for right channel 

        for i = 0 to len(shift_arr):
            shift_delay_bank.set_delay(i, (i + 1) * delay - latency) 
            shift_delay_bank.set_ratio(i, shift_arr[i]) // Set freq ratio
            
            // Adjust gains of active delay and pitch-shift objects
            mix_gain[i].set_chan(0, 1) // set gain for left channel
            mix_gain[i].set_chan(1, 1) // set gain for right channel


    def state_change():
        // initially 0, values end at len(mvt2_seq)
        // both state 0 and state 1 invoke choice 0 = "off":
        // state 2 invokes choice 1, etc.
        hallmirror.set_and_act(max(state - 1, 0))

