# Project Author: Roger B. Dannenberg
# Date: June 7, 2023

class Shift_delay_bank:
# Creates a shift delay bank
    var shift_objs, delay_objs // pitch-shift and delay objects
    var len_objs // length of delay and pitch-shift objects

    def init(length):
        len_objs = length
        shift_objs = array(length)
        delay_objs = array(length)
        for i = 0 to length:
            delay_objs[i] = delay(input_ugen, 1.0, 0.1, 2.0)
            shift_objs[i] = ola_pitch_shift(delay_objs[i], 1, 0.01, 0.05)
            

    def set_delay(i, delay_value):
    # Sets the delay of the ith delay objects
        delay_objs[i].set('dur', delay_value)

    def set_ratio(i, ratio_value):
    # Sets the ratio of the ith pitch shift object
        shift_objs[i].set_ratio(ratio_value)
    
    def get_shiftobjs():
    # Getter method to access pitch-shift objects
        return shift_objs
    
    def get_delayobjs():
    # Getter method to access delay objects
        return delay_objs
    
    def get_len():
    # Getter method to access length of objects
        return len_objs


class Hall_of_mirrors:
# Instance variables
    var win, init_x, init_y // GUI params
    var shift_delay_bank // bank containing shift and delay units
    var active // Checks if the mixer is currently playing
    var mixer // Mixer containing delay and pitch-shifted ugens
    var played_once
    

    def init(window, x, y):
    # Initialization of instance variables
        win = window // Main UI window
        init_x = x // Starting x coord of movement
        init_y = y // Starting y coord of movement
        played_once = nil
        

        // Create shift delay bank
        shift_delay_bank = Shift_delay_bank(5)

        // Initialize mixer
        mixer = mix(2)

        // insert shift objects into the mixer
        for i = 0 to 5:
            mixer.ins(str(i), shift_delay_bank.get_shiftobjs()[i], [0, 0])
        
        // Setup UI
        this.set_ui()

    def set_ui():
    # Setting up Movement's UI
        // Create Radiobox
        Radiobox(win, "II. Hall of Mirrors",
                ["off", "1", "2", "3", "4", "5"], init_x, init_y,
                125, 225, 'hallmirror')
        hallmirror.add_target_method(this, 'sd_hit')
    
    def get_control():
    # Returns the currently selected control
    # in the Radiobox
        return hallmirror.value()

    def play(flag):
    # Play shift-delays depending on radiobox selection
        if active != flag and active == nil:
            // If movement has been played once, restart it 
            if played_once:
              restart_hall()
            mixer.play() // Play mixer if it was inactive
            active = flag
        elif active == flag: // Do nothing
            display "Current state", active
        else:
            // if off is clicked after
            // playing movement, turn off everything
            if active:
                active = nil
                sched_select(rtsched) // select scheduler
                sched_cause(1.0, this, 'finish_hall') 
                // Since movement has been played once, note it
                played_once = t

    def finish_hall():
    # Mutes mixer, shift and delay objects and set to nil
        // Do I delete mixer?
        // What if the movement is played more than once?
        mixer.mute()  
        mixer = nil
        shift_delay_bank = nil

    def restart_hall():
    # Restart the hall of mirror movement
      // Create shift delay bank
      shift_delay_bank = Shift_delay_bank(5)

      // Initialize mixer
      mixer = mix(2)

      // insert shift objects into the mixer
      for i = 0 to 5:
        mixer.ins(str(i), shift_delay_bank.get_shiftobjs()[i], [0, 0])
        
    
    def freq_ratio(semi_arr):
    # returns an array of freq_ratios from 
    # semi_arr (semitone array)
        result = []
        for i=0 to len(semi_arr):
            ratio = 2**(semi_arr[i]/12)
            result.append(ratio)
        return result

    def sd_hit(obj, event, x, y):
    # Shift delay hit events
        display "Current control", get_control()

         // play mixer based on Radiobox selection
        this.play(get_control() != 0)

 
        // Setup shift-delays by passing delay and semitone
        // array
        tempo = 1 // seconds per beat
        if get_control() == 1:
            semitone_arr = [2]
            set_shift_delay(tempo, freq_ratio(semitone_arr))
        elif get_control() == 2:
            semitone_arr = [2, 7]
            set_shift_delay(tempo/2, freq_ratio(semitone_arr))
        elif get_control() == 3:
            semitone_arr = [0, 4, 11]
            set_shift_delay(tempo/3, freq_ratio(semitone_arr)) # (0,4,11) diff from aura, why?
        elif get_control() == 4:
            semitone_arr = [2, 4, 11, 8]
            set_shift_delay(tempo/4, freq_ratio(semitone_arr))
        elif get_control() == 5:
            semitone_arr = [-14, 9, 2, 5, 12]
            set_shift_delay(tempo/5, freq_ratio(semitone_arr))

    def set_shift_delay(delay, shift_arr):
    # Sets up the delay and shift values 
    # in the shift-delay bank

        # turn off shift units that are to be inactive
        for i = len(shift_arr) to shift_delay_bank.get_len():
            mixer.set_gain(str(i), 0, 0) // set gain for left channel
            mixer.set_gain(str(i), 0, 1) // set gain for right channel 


        for i = 0 to len(shift_arr):
            shift_delay_bank.set_delay(i, (i+1)*delay) // Do I include latency? Confirm!!
            shift_delay_bank.set_ratio(i, shift_arr[i]) // Set freq ratio
            
            // Adjust gains of active delay and pitch-shift objects
            mixer.set_gain(str(i), 1, 0) // set gain for left channel
            mixer.set_gain(str(i), 1, 1) // set gain for right channel
