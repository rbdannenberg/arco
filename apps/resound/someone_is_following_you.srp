# Project Author: Roger B. Dannenberg
# Date: June 7, 2023


class Someone_is_following_you (Movement):
# Instance variables
    var dly1, dly2
    var dly1_value, dly2_value
    var latency_value
    var fade_value
    var mix1
    var mult1
    var pwe1
    var win, init_x, init_y
    var fade_lock


    def init(window, x, y):
    # Initialization of instance variables
        super.init("VII", 2)
        win = window // Main UI window
        init_x = x // set the starting x coord of the movement
        init_y = y // set the starting y coord of the movement

        // Setup UI
        this.setup_ui()

        latency_value = latency_slider.value() * 0.001
        dly1_value = max(0, d1_slide.value() - latency_value)
        dly2_value = max(0, d2_slide.value() - latency_value)
        display "Someone_is_following_you", dly1_value, dly2_value
        dly1 = delay(input_ugen, dly1_value, 0.1, 2.0, 2)
        dly2 = delay(input_ugen, dly2_value, 0.1, 2.0, 2)
        fade_value = fl_slide.value()
        latency_slider.add_target_method(this, 'latency_handler')


    def setup_ui():
    # Setting up Movement1's UI
        Checkbox(win, "VII. Someone is Following You", init_x + 5, init_y + 5, 
                 300, 'H', 'followcheck') // checkbox doubling as title
        followcheck.add_target_method(this, 'followcheck_handler')

        // Sliders
        Labeled_slider(win, "del1", init_x+5, init_y + 50, 250, 28, 65,
                       0.8, 1.2, 1, 'linear', 'd1_slide', prefs = prefs)
        d1_slide.add_target_method(this, 'delay1_handler')

        Labeled_slider(win, "del2", init_x+5, 'D', 250, 28, 65,
                       1.8, 2.2, 2, 'linear', 'd2_slide', prefs = prefs)
        d2_slide.add_target_method(this, 'delay2_handler')

        Labeled_slider(win, "fadelen", init_x+5, 'D', 250, 28, 65,
                       0.1, 4, 2.5, 'exponential', 'fl_slide', prefs = prefs)
        fl_slide.add_target_method(this, 'fadelen_handler')
        

    def latency_handler(obj, x):
    # handler for global audio latency slider
        latency_value = x * 0.001
        dly1_value = max(0, d1_slide.value() - latency_value)
        dly2_value = max(0, d2_slide.value() - latency_value)
        if dly1:
            dly1.set('dur', dly1_value)
        if dly2:
            dly2.set('dur', dly2_value)
                

    def followcheck_handler(obj, event, x, y)
        display "followcheck_handler", x, dly1_value, dly2_value
        if x:
            if fade_lock:  // we're busy, so retry later
                sched_select(rtsched)
                sched_cause(0.1, this, 'followcheck_handler', obj, event, x, y)
            else:    // ready to create ugens
                start_delays()
        elif not x:
            fade_lock = true
            display "followcheck_handler", x, fade_lock, fade_value
            pwe1 = pweb(init = 1, fade_value, 0)
            mult1.set('x2', pwe1)
            sched_select(rtsched)
            sched_cause(fade_value + 0.1, this, 'finish_delays')

    
    def start_delays()
        mix1 = mix(2)
        # delay gets left channel only if input is multichannel:
        # maybe input_ugen should fade-in, but it should be quiet
        # when the movement starts, and if there's any audible pop,
        # it should happen before the trumpet plays:
        dly1 = delay(input_ugen, dly1_value, 0.0, 2.0, 1)
        dly2 = delay(input_ugen, dly2_value, 0.0, 2.0, 1)
        mix1.ins('inp1', dly1, [1, 0], 1.0)
        mix1.ins('inp2', dly2, [0, 1], 1.0)
        mult1 = mult(mix1, 1, 2)
        mult1.play()


    def finish_delays()
        display "finish_delays"
        mult1.mute()
        mult1 = nil
        pwe1 = nil
        mix1 = nil
        dly1 = nil
        dly2 = nil
        fade_lock = false  // all done


    def delay1_handler(obj, x)
        dly1_value = x - latency_value
        if dly1:
            dly1.set('dur', x)


    def delay2_handler(obj, x)
        dly2_value = x - latency_value
        if dly2:
            dly2.set('dur', x)


    def fadelen_handler(obj, x)
        fade_value = x


    def disable_real():
        followcheck.set_and_act(false)


    def state_change():
        if state == 1:
            followcheck.set_and_act(true)
