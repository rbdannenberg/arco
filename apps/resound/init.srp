# Project Author: Roger B. Dannenberg
# Date: June 7, 2023
# Updated: Sep 2024

require "debug"
require "wxserpent"
require "arco"
require "allugens"
require "slider"
require "reverb"
require "movement"
require "four_of_a_kind"
require "hall_of_mirrors"
require "o_for_a_thousand"
require "the_bell_tower"
require "side_band"
require "ripples_in_time"
require "someone_is_following_you"

# screen layout:
COL1 = 10
COL2 = 275
COL3 = 575

#################### BEGIN PEDAL CONTROL CODE ########################
require "midicontrol.srp"

// Object-oriented control plan:
//
// - variables mvt1, mvt2, ... are bound to objects that manage them
// - roman_numeral - is "I", "II", etc.
// - enabled - indicates audio processing is on
// - state_count is instance variable telling how many states we have
// - state - an integer from 0 to state_count - 1
// - enable() method turns the audio processing on (a superclass method that
//       checks state first)
// - enable_real() is per-class implementation that actually turns dsp on
// - disable() method turns the audio processing off (a superclass method that
//       checks state first)
// - disable_real() is per-class implementation that actually turns dsp off
// - state_change() is called to advance to a new state. Before enable() is
//       called, state_change(0) is called.
// - advance() is superclass method to advance to the next state
// - concert_order - the order of movements for a concert with
//       multiple movements: // either nil or [nil, 'mvt1', 'mvt2', ...] where
//       symbols are bound to objects, e.g. symbol_value('mvt1') is an instance
//       of Four_of_a_kind, a subclass of Movement.
// - concert_index - index to current movement in concert mode, nil otherwise;
//       if concert_index = 0, we are in concert mode but have not started
//       the first movement of the concert, which will be at index 1.
// - active_movement - the enabled movement if any, whether or not we are in
//       concert mode
//
// In concert mode, advancing will update the state display as follows, using
// "IV" as an example:
//     initial display when movement is enabled, state = 0: IV
//         (The Roman numeral alone indicates the dsp is on standby.)
//     start to play: state = 1: IVa. In some cases, the transition from 0->1
//         does nothing, i.e. the movement is already running in state 0, but
//         to make behavior more consistent, you *always* advance to state 1
//         with a foot pedal just before playing.
//     each advance increments state and display, e.g. state = 2: IVb
//     after the last state, movement is disabled and display is cleared
//     this corresponds to when the state reaches state_count
//
concert_order = nil  // e.g. ['mvt1', 'mvt2', ...]
concert_index = nil  // index to current movement in concert mode, nil otherwise
active_movement = nil   // enabled movement if any

//
mvt_name_x = COL3 + 220
mvt_name_y = 200


def menu_from_concert_order(order):
# produce a string like "Start Concert: " + VII, VI, IV, III, II", from
# ['mvt7', 'mvt6', 'mvt4', 'mvt3', 'mvt2']
    var s = "Start Concert: "
    var needs_comma = false
    for mvt in order:
        if mvt:  # skip the initial nil
            s = s + (", " if needs_comma else "") + mvt_to_roman.get(mvt, "?")
            needs_comma = true
    print "menu_from_concert_order:", order, s
    return s


// menu to select a movement which is then controlled by pedal
//
def mvt_menu_setup():
    concert_order = prefs.get('concert_order', nil)
    display "concert_order set in mvt_menu_setup", concert_order
    mvt_menu = default_window.get_menu("Movement")
    mvt_menu.item("I. Four of a Kind", "", nil, nil, 'start_mvt1')
    mvt_menu.item("II. Hall of Mirrors", "", nil, nil, 'start_mvt2')
    mvt_menu.item("III. O For a Thousand Tongues to Sing", "", nil, nil,
                  'start_mvt3')
    mvt_menu.item("IV. The Bell Tower", "", nil, nil, 'start_mvt4')
    mvt_menu.item("V. The Side Band", "", nil, nil, 'start_mvt5')
    mvt_menu.item("VI. Ripples in Time", "", nil, nil, 'start_mvt6')
    mvt_menu.item("VII. Someone Is Following You", "", nil, nil, 'start_mvt7')
    mvt_menu.item("Set concert order...", "", nil, nil, 'set_concert_order')
    concert_menu_index = nil
    update_concert_menu_item()


def update_concert_menu_item():
# create or set "Start Concert: ..." menu item
    if concert_menu_index:  // remove menu item so we can change it
        mvt_menu.delete(concert_menu_index)
        concert_menu_index = nil
    if concert_order:
        concert_menu_index = mvt_menu.item(
                menu_from_concert_order(concert_order), "", nil, nil,
                'start_concert')


def start_mvt1(rest ignore): start_movement('mvt1')
mvt1 = "I"
def start_mvt2(rest ignore): start_movement('mvt2')
mvt2 = "II"
def start_mvt3(rest ignore): start_movement('mvt3')
mvt3 = "III"
def start_mvt4(rest ignore): start_movement('mvt4')
mvt4 = "IV"
def start_mvt5(rest ignore): start_movement('mvt5')
mvt5 = "V"
def start_mvt6(rest ignore): start_movement('mvt6')
mvt6 = "VI"
def start_mvt7(rest ignore): start_movement('mvt7')
mvt7 = "VII"

concert_index = nil  // integer means we are in concert mode
// [nil, 'mvt7', 'mvt6', 'mvt4', 'mvt3', 'mvt2']
// test: concert_order = [nil, 'mvt3', 'mvt2']


roman_to_mvt = {"I": 'mvt1', "II": 'mvt2', "III": 'mvt3', "IV": 'mvt4',
                "V": 'mvt5', "VI": 'mvt6', "VII": 'mvt7'}
mvt_to_roman = {'mvt1': "I", 'mvt2': "II", 'mvt3': "III", 'mvt4': "IV",
                'mvt5': "V", 'mvt6': "VI", 'mvt7': "VII"}

def concert_order_input_parse_error(order):
    wxs_message_box("There was a problem reading roman numerals " +
            "I - VII from the input: \"" + order + "\"",
            "Invalid Input", WXS_STYLE_ERROR, 0)
    return nil


def set_concert_order(rest ignore):
    var order = wxs_get_text("Enter any number of movements in any order,\n" +
            "using Roman numerals separated by spaces,\n" +
            "e.g. IV II means play only movements IV and II in that order.",
            "Set Concert Order", "", 0)
    if len(order) == 0:
        return
    var mvts = [nil]
    var sp = String_parse(order)
    sp.skip_space()
    while sp.remaining_len() > 0:
        // now, we must be at a roman numeral
        var rn = sp.get_alnum()
        if rn == "":
            return concert_order_input_parse_error(order)
        mvt = roman_to_mvt.get(toupper(rn), nil)
        if not mvt:
            return concert_order_input_parse_error(order)
        mvts.append(mvt)
        sp.skip_space()
        sp.skip(",")  // skip comma if any
        sp.skip_space()
    if len(mvts) > 0:
        concert_order = mvts
        prefs.set('concert_order', concert_order, true)
        display "set_concert_order", repr(order), concert_order
        update_concert_menu_item()


def start_concert(rest ignore):
# sets concert mode and indexes first movement in concert order
    // shut down any movement that's already running:
    if active_movement and active_movement.enabled:
        active_movement.disable()  // sets active_movement to nil
    // set to 0 indicating we haven't started the first movement
    concert_index = 0
    resound_advance()  // enable first movement of concert


mvmt_disp = Statictext(default_window, "", mvt_name_x, mvt_name_y, 100, 100)
mvmt_disp.set_font(72, WXS_FONT_ROMAN, 0, 0, nil, "")
mvmt_disp.set_color("YELLOW")

def start_movement(m):
# called from menu when you select a movement there
    display "start_movement", m, active_movement
    movement = symbol_value(m)
    if active_movement and active_movement != movement:
        active_movement.disable()
    active_movement = movement
    movement.enable()

    // display the current movement
    print "start_movement", movement.roman_numeral
    mvmt_disp.set_string(movement.roman_numeral)


def resound_advance():
    if active_movement:
        print "resound_advance", active_movement.roman_numeral, 
        print "mvt#", concert_index, "state", active_movement.state
    else:
        print "resound_advance - no active_movement" 
    if active_movement:
        active_movement.advance()  // may disable() and clear active_movement
        update_state_display()
        if active_movement and active_movement.enabled:
            return  // movement is still in progress
        active_movement = nil  // no longer an active movement

    // at this point, we have no active movement. Time to start one?
    if concert_index:  // in concert mode, so go to next movement
        concert_index = concert_index + 1
        if len(concert_order) > concert_index:
            active_movement = symbol_value(concert_order[concert_index])
            active_movement.enable()
        else:
            concert_index = nil  // end of concert order
        update_state_display()


def update_state_display():
    var disp = ""
    if active_movement:
        disp = active_movement.roman_numeral
        if active_movement.state > 0:
            disp = disp + chr(ord("`") + active_movement.state)
    print "update_state_display to", disp, "mvt", active_movement
    mvmt_disp.set_string(disp)



######################### END OF PEDAL CONTROL CODE ######################

# Definition of Global Variables
default_window.set_size(1000, 1000) // set size of default window
ui_initialized = false # boolean that denotes if ui has been initialized

def arco_ready():
    # called when arco is initialized and ready to make sound or when
    # arco audio stream has been reopened

    print "**** arco audio is running! ****"
    var default_win = default_window
    if ui_initialized:
        return

    # Setup latency slider
    Labeled_slider(default_win, "Latency", COL3, 5, 350, 28, 80,
                   0, 200, 50, 'integer', 'latency_slider', prefs = prefs)
    latency_slider.add_target_method(nil, 'resound_latency_handler', 'x')
    resound_latency = latency_slider.value() * 0.001

    # four_of_a_kind.srp initialization
    mvt1 = Four_of_a_kind(default_win, COL1, 10)

    # hall_of_mirrors.srp initialization
    mvt2 = Hall_of_mirrors(default_win, COL1, 180)

    # o_for_a_thousand.srp initialization
    mvt3 = O_for_a_thousand(default_win, COL1, 390)

    # the_bell_tower.srp initialization
    mvt4 = The_bell_tower(default_win, COL2, 10)

    # side_band.srp initialization 
    mvt5 = The_side_band(default_win, COL3, 40)

    # ripples_in_time initialization
    mvt6 = Ripples_in_time(default_win, COL3, 130)

    # someone_is_following_you.srp initialization
    mvt7 = Someone_is_following_you(default_win, COL3, 455)

    ui_initialized = true
    default_window.fit_to_children()
  

def resound_latency_handler(val):
    prefs.set('latency', val)  // redundant? rename to 'latency_slider'?
    val = val * 0.001
    resound_latency = val



########## Main Initialization ################

def main():
    // o2_debug_flags("Ss") // ("SsBl")  -- see audiodev.srp and File menu
    arco_init(latency = 10, network = false, title = "Resound",
              appname = "resound")
    arco_run()
    sched_select(rtsched)
    display "####### main.srp GETTING File MENU FROM", default_window
    var file_menu = default_window.get_menu("File")
    file_menu.item("Print Ugen Info", "print Ugen tree and table",
                   nil, nil, 'arco_prugens_handler')
    file_menu.item("Arco Ugen GC Info", "print info about Ugen IDs",
                   nil, nil, 'arco_ugen_gc_info_handler')
    midi_control_init()
    mvt_menu_setup()

main()

    

