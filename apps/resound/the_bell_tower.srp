# Project Author: Roger B. Dannenberg
# Date: July 13, 2023

class Bell_obj:
# Implements one of the bells and its user interface
    var bell_recplay  // recplay bell obj
    var radiobox  // the control
    var number  // 0 to 3 index of this bell
    var name    // symbol used as identifier of mixer input


    def init(win, num_):
        number = num_
        name = intern("bell" + str(number + 1))
        var title = "Bell " + str(number + 1)
        radiobox = Radiobox(win, title, ["reset", "record", "play"],
                            'S', 'D', 175, 125, name)
        radiobox.add_target_method(this, 'bell_handler')


    def audio_init(mixer, rvb_mixer, pan):
        bell_recplay = recplay(input_ugen, 1, 1, 0.1, true)
        mixer.ins(name, bell_recplay, pan)
        rvb_mixer.ins(name, bell_recplay, bellwet_slider.value())


    def audio_finish():
        bell_recplay = nil


    def bell_handler(obj, event, x, y):
    # Handles what happens when "reset". "record" or "play"
    # is clicked
        if not bell_recplay:
            return
        if x == 0:
            bell_recplay.stop()
        elif x == 1:  // Record into bell_recplay buffer
            bell_recplay.run()
            bell_recplay.record(true)
        else:
            bell_recplay.record(false)
            bell_recplay.unrun()
            // assume latency is small and doesn't matter here. Note that
            // resound_latency is end-to-end audio latency, whereas any
            // latency compensation here is unavailable, since it would be
            // click-time vs. audio-input-time.
            bell_recplay.start(0)



class The_bell_tower (Movement):
    var bells  # array of 3 Bell_objs
    var bell_wet, mic_wet 
    var rvb
    var bell_mixer, rvb_mixer
    var final_mix, output
 
    def init(window, x, y):
        super.init("IV", 9)
        wxs_x = x
        wxs_y = y

        // main audio on/off checkbox, y - 4 to align with other text:
        Checkbox(window, "IV. The Bell Tower", x, y - 4, 175, 'H',
                 'btcheckbox')
        btcheckbox.add_target_method(this, 'btcheckbox_handler', 'x')

        # Creates global with Bell_obj's for bell1, bell2, bell3:
        bells = [Bell_obj(window, i) for i = 0 to 3]

        // setup remaining UI elements: sliders and fadeout button
        setup_ui(window)


    def audio_init():
        // bell_mixer is the main mix for stereo output
        bell_mixer = mix(2)
        // rvb_mixer combines bells and mic to form reverb input
        rvb_mixer = mix(1)
        // ~4.5dB pan law for bell1 (left), bell2 (right), bell3 (center):
        var pans = [[0.88, 0.22], [0.22, 0.88], [0.6, 0.6]]

        for bell at i in bells:  // reset all radioboxes to initial (reset)
            bell.radiobox.set_value(0)
            bell.audio_init(bell_mixer, rvb_mixer, pans[i])
        rvb_mixer.ins('mic', input_ugen, micwet_slider.value())
        rvb = reverb(rvb_mixer, rt60_slider.value())
        rvb.set_cutoff(filter_slider.value())

        // final_mix combines reverb and bells
        final_mix = mix(2)
        final_mix.ins('rvb', rvb, [1, 1])  // expand to stereo
        final_mix.ins('bells', bell_mixer, 1)

        // final fade uses multiplier on finalmix output:
        output = mult(final_mix, 1, 2)  // 2 channels (already implied
        output.play()                   //             by final_mix)


    def audio_finish():
        for bell in bells:
            bell.audio_finish()
        output.fade(0.2)
        output = nil
        final_mix = nil
        rvb_mixer = nil
        rvb = nil
        mic_wet = nil
        bell_wet = nil
        bell_mixer = nil
        btfadeout.set_value(false)


    def setup_ui(win):
    # Setting up The_bell_tower's UI
        // Micwet
        Labeled_slider(win, "micwet", 'S', 'D', 275, 30, 75, 0, 1, 0.1,
                       'linear', 'micwet_slider', prefs = prefs)
        micwet_slider.add_target_method(this, 'micwet_handler', 'x')

        // Bellwet
        Labeled_slider(win, "bellwet", 'S', 'D', 275, 30, 75, 0, 1, 0.1,
                       'linear', 'bellwet_slider', prefs = prefs)
        bellwet_slider.add_target_method(this, 'bellwet_handler', 'x')

        // RT60
        Labeled_slider(win, "rt60", 'S', 'D', 275, 30, 75, 0, 10, 5,
                       'linear', 'rt60_slider', prefs = prefs)
        rt60_slider.add_target_method(this, 'rt60_handler', 'x')

        // Filter -  lowest cutoff set to 1 due to dist.
        Labeled_slider(win, "filter", 'S', 'D', 275, 30, 75, 1, 20000, 9000,
                       'integer', 'filter_slider', prefs = prefs)
        filter_slider.add_target_method(this, 'filter_handler', 'x')

        // Fadeout
        Checkbox(win, "fadeout", 'S', 'D', 150, 'H', 'btfadeout')
        btfadeout.add_target_method(this, 'fadeout_handler', 'x')

        // Fadelength
        Labeled_slider(win, "fadelen", 'S', 'D', 275, 30, 75, 0, 30, 30,
                       'integer', 'fadelen_slider', prefs = prefs)


    def fadeout_handler(x):
        // Create pwe envelope
        if not output:
            return
        if x:
            fade_val = fadelen_slider.value()
            var envelope = pweb(0, 1, fade_val, 0)
            output.set('x2', envelope)
        else:
            output.set('x2', 1)


    def btcheckbox_handler(x):
        if x and not bell_mixer:
            audio_init()
        else:
            audio_finish()


    def rt60_handler(x):
    # Set the reverb time (RT60 time)
        if rvb:
            rvb.set_rt60(max(0.1, x))


    def bellwet_handler(x):
    # Determines the wetness of the currently active bell
        if bell_mixer:
            for bell in bells:
                rvb_mixer.set_gain(bell.name, x)


    def micwet_handler(x):
    # Determines the wetness of the mic
        if bell_mixer:
            rvb_mixer.set_gain('mic', x)


    def filter_handler(x):
    # Change the frequency of the lowpass filter
        if rvb:
            rvb.set_cutoff(x)


    // def enable_real():  // do nothing
    //     btcheckbox.set_and_act(true)


    def state_change():
        # state bell value
        #   1 (enable reverb)
        #   2     0    1
        #   3     0    2
        #   4     1    1
        #   5     1    2
        #   6     2    1
        #   7     2    2
        #   8 (fade out)
        #   9 (disable reverb)
        if state == 1:
            btcheckbox.set_and_act(true)
        elif state > 1 and state < 8:
            n = state - 2
            bells[idiv(n, 2)].radiobox.set_and_act(n % 2 + 1)
        elif state == 8:
            btfadeout.set_and_act(true)
        else:
            print "INTERNAL ERROR: the_bell_tower.state_change(", state, ")"


    def disable_real():
        btcheckbox.set_and_act(false)
