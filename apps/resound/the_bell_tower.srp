# Project Author: Roger B. Dannenberg
# Date: July 13, 2023

class BellObjs:
# Instance variables
  var bell_obj1, bell_obj2, bell_obj3
  var checkboxes

  def init():
    bell_obj1 = recplay(input_ugen, 2, 1, 3, true)
    bell_obj2 = recplay(input_ugen, 2, 1, 3, true)
    bell_obj3 = recplay(input_ugen, 2, 1, 3, true)
    checkboxes = array(3)
  
  def trackers(mixer, rest check_bxs):
    for i=1 to 4:
      checkboxes[i-1] = check_bxs[i-1]

  def bell1_event(obj, event, x, y):
    if checkboxes[0].value() == 0:
      bell_obj1 = nil
    elif checkboxes[0].value() == 1:
      // Record into bell_obj1's buffer
      bell_obj1.run()
      bell_obj1.record(true)
    else:
      bell_obj1.record(false)
      bell_obj1.unrun()
      bell_obj1.start(0)
      

  def bell2_event(obj, event, x, y):
    if checkboxes[1].value() == 0:
      bell_obj2 = nil
    elif checkboxes[1].value() == 1:
      // Record into bell_obj2's buffer
      bell_obj2.run()
      bell_obj2.record(true)
    else:
      bell_obj2.record(false)
      bell_obj2.unrun()
      bell_obj2.start(0)

  def bell3_event(obj, event, x, y):
    if checkboxes[2].value() == 0:
      bell_obj3 = nil
    elif checkboxes[2].value() == 1:
      // Record into bell_obj3's buffer
      bell_obj3.run()
      bell_obj3.record(true)
    else:
      bell_obj3.record(false)
      bell_obj3.unrun()
      bell_obj3.start(0)

class The_bell_tower:
# Instance variables
  var bell_objs
  var win, init_x, init_y // GUI params
  var bell_wet, mic_wet 
  var rvb_mic, rvb_bell
  var bell_mixer, rvb_mixer
  var finalmix, output
 
  def init(window, x, y):
  # Initialization of instance variables
    win = window // Main UI window
    init_x = x // set the starting x coord of the movement
    init_y = y // set the starting y coord of the movement 

    // Init bell mixer
    bell_mixer = Mix(2)

    // Create the bell objs
    bell_objs = BellObjs()

    // Add the bells to the mixer
    bell_mixer.ins("1", bell_objs.bell_obj1, [1,1])
    bell_mixer.ins("2", bell_objs.bell_obj2, [1,1])
    bell_mixer.ins("3", bell_objs.bell_obj3, [1,1])

    // Setup UI
    this.set_ui()

    // Track the checkboxes
    bell_objs.trackers(bell_mixer, bell1, bell2, bell3)

    // Init bell wetness
    bell_wet = mult(bell_mixer, bellwet_slider.value(), 2)

    // Init mic wetness
    mic_wet = mult(input_ugen, micwet_slider.value() , 2)

    // Init reverb
    rvb_mic = reverb(mic_wet, 1)
    rvb_bell = reverb(bell_wet, 1)
    rvb_mixer = Mix(2)
    rvb_mixer.ins("rvb_bell", rvb_mic, [1,1])
    rvb_mixer.ins("rvb_mic", rvb_bell, [1,1])

    // Init finalmix
    finalmix = Mix(2)
    //finalmix.ins("mic", input_ugen, [1,1])
    finalmix.ins("rvb", rvb_mixer, [1,1])
    finalmix.ins("bell_mixer", bell_mixer, [1,1])

    // Init output
    output = mult(finalmix, 1, 2)


  def set_ui():
  # Setting up The_bell_tower's UI
    // setting up reverb's checkbox 
    Checkbox(win, "IV. The Bell Tower", init_x, init_y-4,
              150, 'H', 'rverb') // init_y - 5 to allign top of checkbox with other text
    rverb.add_target_method(this, 'reverb_handler')

    // Bell 1
    Radiobox(win, "Bell 1", ["reset", "record", "play"], 
             'S', 'D', 100, 100, 'bell1')
    bell1.add_target_method(bell_objs, 'bell1_event')

    // Bell 2
    Radiobox(win, "Bell 2", ["reset", "record", "play"], 
             'S', 'D', 100, 100, 'bell2')
    bell2.add_target_method(bell_objs, 'bell2_event')

    // Bell 3
    Radiobox(win, "Bell 3", ["reset", "record", "play"], 
             'S', 'D', 100, 100, 'bell3')
    bell3.add_target_method(bell_objs, 'bell3_event')

    // Micwet
    Labeled_slider(win, "micwet", 'S', init_y+330, 250, 30, 50, 0, 1,
                    0.5, 'linear', 'micwet_slider')
    micwet_slider.add_target_method(this, 'micwet_handler')

    // Bellwet
    Labeled_slider(win, "bellwet", 'S', init_y+370, 250, 30, 50, 0, 1,
                    0.5, 'linear', 'bellwet_slider')
    bellwet_slider.add_target_method(this, 'bellwet_handler')

    // RT60
    Labeled_slider(win, "rt60", 'S', init_y+410, 250, 30, 50, 0, 10,
                    5, 'linear', 'rt60_slider')
    rt60_slider.add_target_method(this, 'rt60_handler')

    // Filter
    Labeled_slider(win, "filter", 'S', init_y+450, 250, 30, 50, 0, 20000,
                    0, 'integer', 'filter_slider')

    // Fadeout
    Checkbox(win, "fadeout", 'S', 'D', 150, 'H', 'fadeout')
    fadeout.add_target_method(this, 'fadeout_handler')

    // Fadelength
    Labeled_slider(win, "fadelen", 'S', 'D', 250, 30, 50, 0, 30,
                    30, 'integer', 'fadelen_slider')


  def fadeout_handler(obj, event, x, y):
    // Create pwe envelope
    fade_val = fadelen_slider.value()
    envelope = pweb(0, 1, fade_val, 0)
    output.set('x2', envelope)

  def reverb_handler(obj, event, x, y):
    if x:
      // Play reverb
      output.play()
    else:
      output.mute()
      output = nil
      finalmix = nil
      rvb_mixer = nil
      rvb_bell = nil
      rvb_mic = nil
      mic_wet = nil
      bell_wet = nil
      bell_mixer = nil

  def rt60_handler(obj, x):
  # Set the reverb time (RT60 time)
    rt60_val = rt60_slider.value()
    if rt60_val == 0:
      rt60_val = 0.1
    rvb_mic.set_rt60(rt60_val)
    rvb_bell.set_rt60(rt60_val)

  def bellwet_handler(obj, x):
  # Determines the wetness of the currently active bell
    bell_wet.set('x2', bellwet_slider.value())

  def micwet_handler(obj, x):
  # Determines the wetness of the mic
    mic_wet.set('x2', micwet_slider.value())
