# vu.srp -- record and play audio in memory
#
# Roger B. Dannenberg
# May 2023

def vu(reply_addr, period):
    Vu(reply_addr, period)


class Vu (Ugen):
    def init(reply_addr, period)
        super.init(create_ugen_id(), "Vu", 0, '', "sf",
                   'reply_addr', reply_addr, 'period', period)

    def start(reply_addr, period):
        o2_send_cmd("/arco/vu/start", 0, "sf", reply_addr, period)

    def set(input, value):  // patterned after Ugen.set()
        // Note that the only thing you can set is 'inp'
        inputs['inp'] = value
        display "Vu set", id, value.id
        o2_send_cmd("/arco/vu/repl_inp", 0, "UU", id, value.id)
# pwl.srp -- piece-wise linear envelope
#
# Roger B. Dannenberg
# May 2023

class Pwl (Ugen):
    def init(points):
        super.init(create_ugen_id(), "Pwl", -1, 'a', "")
        o2_send_cmd("/arco/pwl/new", 0, "U", id)
        set_point_array(points)

    def set_points(rest points):
        set_point_array(points)

    def set_point_array(points):
        o2_send_start()
        o2_add_int32(id)
        # track cummulative time and samples to avoid accumulated time error
        var time = 0
        var count = 0
        for i = 0 to len(points) by 2:
            time = time + points[i]
            var samps = round(time * AR - count)
            count = count + samps
            o2_add_float(samps)  // the number of samples to ramp
            if i + 1 < len(points):  // allowed to omit final zero amplitude
                o2_add_float(points[i + 1])  // the destination amplitude
        o2_send_finish(0, "/arco/pwl/env", true)
        this

    def start():
        o2_send_cmd("/arco/pwl/start", 0, "i", id)
        this


def pwl(rest points): Pwl(points)  # pwl as a function


class Pwlb (Ugen):
    var action_id

    def init(points):
        super.init(create_ugen_id(), "Pwlb", -1, 'b', "")
        o2_send_cmd("/arco/pwlb/new", 0, "U", id)
        set_point_array(points)

    def set_points(rest points):
        set_point_array(points)

    def set_point_array(points):
        // display "Pwlb", points
        o2_send_start()
        o2_add_int32(arco_ugen_id(id))
        # track cummulative time and samples to avoid accumulated time error
        var time = 0
        var count = 0
        // print "               ";
        for i = 0 to len(points) by 2:
            time = time + points[i]
            var samps = round(time * BR - count)
            count = count + samps
            // print samps,
            o2_add_float(samps)  // the number of samples to ramp
            if i + 1 < len(points):  // allowed to omit final zero amplitude
                print points[i + 1],
                o2_add_float(points[i + 1])  // the destination amplitude
        // print
        o2_send_finish(0, "/arco/pwlb/env", true)
        this

    def start():
        o2_send_cmd("/arco/pwlb/start", 0, "U", id)
        this


def pwlb(rest points): Pwlb(points)


# mix.srp -- audio mixer
#
# Roger B. Dannenberg
# May 2023

class Mix (Ugen):
    var input_name  // for dictionary of inputs, we need to generate names

    
    def init(chans_):
        input_name = 0
        super.init(create_ugen_id(), "Mix", chans_, 'a', "")


    def set(input, value, optional chan = 0):
        print "ERROR: set method not available for Mix class"


    def ins(ugen, gain, optional atend):
        if isnumber(gain):
            gain = const(gain)
        inputs[input_name] = [ugen, gain]
        input_name = input_name + 1
        o2_send_cmd("/arco/mix/ins", 0, "UUU", id, ugen.id, gain.id)
        if atend:
            if atend == SIGNAL and issubclass(ugen, Instrument) and 
               ugen.get['envelope']:
                create_action(ugen.envelope, this, 'rem', ugen)
            elif atend == GAIN and issubclass(gain, Pwlb):
                create_action(gain, this, 'rem', ugen)
            else:
                print "Mix.ins() ignoring unknown atend parameter -", atend
        return this
    

    def rem(ugen):
        for key in inputs.keys():
            if inputs[key][0] == ugen:
                inputs.remove(key)
                o2_send_cmd("/arco/mix/rem", 0, "UU", id, ugen.id)
                return this
        return this


    def find_name_of(ugen):
        for key in inputs.keys():
            if inputs[key][0] == ugen:
                return key
        return nil


    def set_gain(ugen, gain):
    # general set gain to either a Ugen or float (constant value)
        // inputs are "named" by numbers that start at 0 and increment for
        // each ins() operation. We do not reuse numbers.
        // Start by finding the input name:
        var i = find_name_of(ugen)
        if not i:
            print "ERROR: Mix set_gain cannot find ugen", ugen
            return
        var gain_ugen = inputs[i][1]
        if isinstance(gain_ugen, Ugen) and gain_ugen.rate == "c":
            // a Const exists, so we just write to it using set_gain
            o2_send_cmd("/arco/mix/set_gain", 0, "UUf", id, ugen, gain)
        else:  // have to replace with either gain as Ugen or make a const
            if isnumber(gain):
                gain = const(gain)
            inputs[i][1] = gain
            o2_send_cmd("/arco/mix/repl_gain", 0, "UUU", id, ugen, gain)
    

def mix(optional chans = 1):
    Mix(chans)

# sine.srp - constructor implementation
#
# (machine generated by u2f.py)

def sine(freq, amp, optional chans = 1):
    Ugen(create_ugen_id(), "sine", chans, 'a', "UU", 'freq', freq, 'amp', amp)

def sineb(freq, amp, optional chans = 1):
    if freq.rate != 'b':
        print "ERROR: 'freq' input to Ugen 'sineb' must be block rate"
        return nil
    if amp.rate != 'b':
        print "ERROR: 'amp' input to Ugen 'sineb' must be block rate"
        return nil
    Ugen(create_ugen_id(), "sineb", chans, 'b', "UU", 'freq', freq, 'amp', amp)

# mult.srp - constructor implementation
#
# (machine generated by u2f.py)

def mult(x1, x2, optional chans = 1):
    Ugen(create_ugen_id(), "mult", chans, 'a', "UU", 'x1', x1, 'x2', x2)

def multb(x1, x2, optional chans = 1):
    if x1.rate != 'b':
        print "ERROR: 'x1' input to Ugen 'multb' must be block rate"
        return nil
    if x2.rate != 'b':
        print "ERROR: 'x2' input to Ugen 'multb' must be block rate"
        return nil
    Ugen(create_ugen_id(), "multb", chans, 'b', "UU", 'x1', x1, 'x2', x2)

# reson.srp - constructor implementation
#
# (machine generated by u2f.py)

def reson(snd, center, q, optional chans = 1):
    if snd.rate != 'a':
        print "ERROR: 'snd' input to Ugen 'reson' must be audio rate"
        return nil
    Ugen(create_ugen_id(), "reson", chans, 'a', "UUU", 'snd', snd, 'center', center, 'q', q)

def resonb(snd, center, q, optional chans = 1):
    if snd.rate != 'b':
        print "ERROR: 'snd' input to Ugen 'resonb' must be block rate"
        return nil
    if center.rate != 'b':
        print "ERROR: 'center' input to Ugen 'resonb' must be block rate"
        return nil
    if q.rate != 'b':
        print "ERROR: 'q' input to Ugen 'resonb' must be block rate"
        return nil
    Ugen(create_ugen_id(), "resonb", chans, 'b', "UUU", 'snd', snd, 'center', center, 'q', q)

# fileplay.srp -- stream audio from file
#
# Roger B. Dannenberg
# May 2023

def fileplay(filename, optional chans = 2, start = 0, end = 0, 
            cycle, mix, expand)
    Fileplay(chans, filename, start, end, cycle, mix, expand)



class Fileplay (Ugen):
    var action_id

    def init(chans, filename, start, end, cycle, mix, expand):
        // -chans cuts off standard creation:
        super.init(create_ugen_id(), "Fileplay", chans, 'a', "sffBBB",
                   'filename', filename, 'start', start,'end', end,
                   'cycle', cycle, 'mix', mix, 'expand', expand)

    def go(optional play_flag = true):
        o2_send_cmd("/arco/fileplay/play", 0, "UB", id, play_flag)
    
    def stop():
        go(false)
# filerec.srp -- stream audio from file
#
# Roger B. Dannenberg
# May 2023

def filerec(filename, inp, optional chans = 2)
    Filerec(chans, filename, inp)



class Filerec (Ugen):
    var action_id

    def init(chans, filename, inp):
        super.init(create_ugen_id(), "Filerec", chans, '', "sU",
                   'filename', filename, 'inp', inp)

    def go(optional rec_flag = true):
        o2_send_cmd("/arco/filerec/rec", 0, "UB", id, rec_flag)
    
    def stop():
        go(false)
# recplay.srp -- record and play audio in memory
#
# Roger B. Dannenberg
# May 2023

def recplay(input, optional chans = 1, optional gain = 1, 
            fade_time = 0.1, loop = false):
    Recplay(chans, input, gain, fade_time, loop)


class Recplay (Ugen):
    var action_id

    def init(chans, input, gain, fade_time, loop):
        super.init(create_ugen_id(), "Recplay", chans, 'a', "UUfB",
                   'input', input, 'gain', gain, 'fade_time', fade_time,
                   'loop', loop)

    def record(record_flag):
        o2_send_cmd("/arco/recplay/rec", 0, "UB", id, record_flag)

    def start(start_time):
    # start playing recording from offset start_time
        o2_send_cmd("/arco/recplay/start", 0, "Ud", id, start_time)

    def stop():
        o2_send_cmd("/arco/recplay/stop", 0, "U", id)
        

# thru.srp -- audio pass-through
#
# Roger B. Dannenberg
# May 2023

class Thru (Ugen):

    def init(inp, optional chans, id_num):
        super.init(arco_ugen_new_id(id_num) if id_num else create_ugen_id(), 
                   "Thru", chans, 'a', "U", 'inp', inp)

    def set_alternate(alt):
        o2_send_cmd("/arco/thru/alt", 0, "UU", id, alt)


# DO NOT DEFINE thru() -- SEE arco.srp, WHICH DEFINES zero() TO RETURN thru_ugen
# def thru(): purposefully not defined here!



# zero.srp -- audio zero
#
# Roger B. Dannenberg
# May 2023

class Zero (Ugen):

    def init(optional id_num):
        super.init(arco_ugen_new_id(id_num) if id_num else create_ugen_id(), 
                   "Zero", -1, 'a', "")
        o2_send_cmd("/arco/zero/new", 0, "i", arco_ugen_id(id))


# DO NOT DEFINE zero() -- SEE arco.srp, WHICH DEFINES zero() TO RETURN zero_ugen
# def zero(): purposefully not defined here!


class Zerob (Ugen)

    def init(optional id_num):
        super.init(arco_ugen_new_id(id_num) if id_num else create_ugen_id(), 
                   "Zerob", -1, 'b', "")
        o2_send_cmd("/arco/zerob/new", 0, "i", arco_ugen_id(id))

# DO NOT DEFINE zerob() -- SEE arco.srp, WHICH DEFINES zerob() TO RETURN zerob_ugen
# def zerob(): purposefully not defined here!
