# Project Author: Roger B. Dannenberg
# Date: June 7, 2023


class Four_of_a_kind:
# Instance variables
    var recplay1, recplay2, recplay3 // recplay objects
    var win, init_x, init_y, latency // GUI params

    def init(window, x, y):
    # Initialization of instance variables
        // Recplay checkboxes
        recplay1 = nil
        recplay2 = nil
        recplay3 = nil

        win = window // Main UI window
        init_x = x // set the starting x coord of the movement
        init_y = y // set the starting y coord of the movement

        // Setup UI
        this.set_ui()

        // Initialize latency value in milliseconds
        latency = latency_slider.value()/1000 
        latency = 0 // Remove this after interpolation bug has been fixed.

    def set_ui():
    # Setting up Movement1's UI
        Statictext(win, "I. Four of a Kind",init_x, init_y, 
                    150, 'H', 'title') // The title of the movement

        // Setting up rec1's checkbox and target
        Checkbox(win, "rec1", init_x+5, init_y+25, 'S', 'S', 'r1check') 
        r1check.add_target_method(this, 'rec1handler')

        // Setting up rec2's checkbox and target
        Checkbox(win, "rec2", init_x+5, 'D', 'S', 'S', 'r2check')
        r2check.add_target_method(this, 'rec2handler')

        // Setting up rec3's checkbox and target
        Checkbox(win, "rec3", init_x+5, 'D', 'S', 'S', 'r3check')
        r3check.add_target_method(this, 'rec3handler')

        // Setting up the all checkbox and target
        Checkbox(win, "all", init_x+5, 'D', 'S', 'S', 'allcheck')
        allcheck.add_target_method(this, 'rec4handler')

        latency_slider.add_target_method(this, 'lshandler')


    def lshandler(obj, x):
    # latency slider handler, note that Latency_slider is not a wxserpent
    # built-in control and it has a different signature for the handler
        display "four_of_a_kind lshandler latency (ms)", x
        latency = x / 1000


    def rec1handler(obj, event, x, y):
    # Handler for rec1 checkbox
        display "rec1handler", x

        if x:
            if not recplay1: // long fade time to test this feature
                recplay1 = recplay(input_ugen, 2, 1, 3, false)
            recplay1.run() # needs be in run set to make active
            recplay1.record(true)
        else:
            recplay1.record(false)
            recplay1.unrun() # does not need to be active now


    def rec2handler(obj, event, x, y):
    # Handler for rec2 checkbox
        display "rec2handler", x, latency

        if x and recplay1:
            if not recplay2: // long fade time to test this feature
                recplay2 = recplay(input_ugen, 2, 1, 3, false)
            recplay2.run() # needs be in run set to make active
            recplay2.record(true)

            # Play recplay1
            recplay1.play().atend(MUTE)

            // Bug Alert: Latency causes distortion on audio chans (set to 0 instead)
            // Tested this in apps/test as well. Highly suspect its due to interpolation
            recplay1.start(latency) 
        elif not recplay1:
            print "WARNING: There is no recplay1 Ugen!"
        else:
            recplay2.record(false)
            recplay2.unrun() # does not need to be active now
            recplay1.stop() // atend is already set up to mute when finished


    def rec3handler(obj, event, x, y):
    # Handler for rec3 checkbox
        display "rec3handler", x, latency

        if x and recplay1 and recplay2:
            if not recplay3: // long fade time to test this feature
                recplay3 = recplay(input_ugen, 2, 1, 3, false)
            recplay3.run() # needs be in run set to make active
            recplay3.record(true)

            # Play recplay1 and recplay2
            recplay1.play().atend(MUTE)
            recplay1.start(latency)
            recplay2.play().atend(MUTE)
            recplay2.start(latency)
        elif not recplay1 or not recplay2:
            print "WARNING: Missing recplay1 or/and recplay2 Ugen!"
        else:
            recplay3.record(false)
            recplay3.unrun() # does not need to be active now
            recplay1.stop() // atend is already set up to mute when finished
            recplay2.stop()


    def rec4handler(obj, event, x, y):
    # Handler for all checkbox
        display "rec4handler", x, latency

        if x and recplay1 and recplay2 and recplay3:
            recplay1.play().atend(MUTE)
            recplay1.start(latency)
            recplay2.play().atend(MUTE)
            recplay2.start(latency)
            recplay3.play().atend(MUTE)
            recplay3.start(latency)
        elif (not x) and recplay1 and recplay2 and recplay3:
            recplay1.stop()
            recplay2.stop()
            recplay3.stop()
            recplay1 = nil
            recplay2 = nil
            recplay3 = nil
        else:
            print "WARNING: Missing recplay1 or recplay2 or recplay3 Ugen!"

