# four_of_a_kind.srp - implementation of first movement
# 
# Roger Dannenberg
# jun 2023, revised sep 2024


class Four_of_a_kind (Movement)
# Instance variables
    var recplay1, recplay2, recplay3 // recplay objects
    var win, init_x, init_y, latency // GUI params

    def init(window, x, y):
    # Initialization of instance variables
        super.init("I", 9)
        // Recplay checkboxes
        recplay1 = nil
        recplay2 = nil
        recplay3 = nil

        win = window // Main UI window
        init_x = x // set the starting x coord of the movement
        init_y = y // set the starting y coord of the movement

        // Setup UI
        this.set_ui()


    def set_ui():
    # Setting up Movement1's UI
        Statictext(win, "I. Four of a Kind",init_x, init_y, 
                    150, 'H', 'title') // The title of the movement

        // Setting up rec1's checkbox and target
        Checkbox(win, "rec1", init_x+5, init_y+25, 'S', 'S', 'r1check') 
        r1check.add_target_method(this, 'rec1handler')

        // Setting up rec2's checkbox and target
        Checkbox(win, "rec2", 'S', 'D', 'S', 'S', 'r2check')
        r2check.add_target_method(this, 'rec2handler')

        // Setting up rec3's checkbox and target
        Checkbox(win, "rec3", 'S', 'D', 'S', 'S', 'r3check')
        r3check.add_target_method(this, 'rec3handler')

        // Setting up the all checkbox and target
        Checkbox(win, "all", 'S', 'D', 'S', 'S', 'allcheck')
        allcheck.add_target_method(this, 'rec4handler')


    def rec1handler(obj, event, x, y):
    # Handler for rec1 checkbox
        display "rec1handler", x

        if x:
            if not recplay1: // long fade time to test this feature
                recplay1 = recplay(input_ugen, 2, 1, 3, false)
            recplay1.run() # needs be in run set to make active
            recplay1.record(true)
        else:
            recplay1.record(false)
            recplay1.unrun() # does not need to be active now


    def rec2handler(obj, event, x, y):
    # Handler for rec2 checkbox
        display "rec2handler", x, resound_latency

        if x and recplay1:
            if not recplay2: // long fade time to test this feature
                recplay2 = recplay(input_ugen, 2, 1, 3, false)
            recplay2.run() # needs be in run set to make active
            recplay2.record(true)

            # Play recplay1
            recplay1.play().atend(MUTE)
            recplay1.start(0)  // start from beginning, player syncs to recplay1
        elif not recplay1:
            print "WARNING: There is no recplay1 Ugen!"
        else:
            recplay2.record(false)
            recplay2.unrun() # does not need to be active now
            recplay1.stop() // atend is already set up to mute when finished


    def rec3handler(obj, event, x, y):
    # Handler for rec3 checkbox
        display "rec3handler", x, resound_latency

        if x and recplay1 and recplay2:
            if not recplay3: // long fade time to test this feature
                recplay3 = recplay(input_ugen, 2, 1, 3, false)
            recplay3.run() # needs be in run set to make active
            recplay3.record(true)

            # Play recplay1 and recplay2
            recplay1.play().atend(MUTE)
            recplay1.start(0)
            recplay2.play().atend(MUTE)
            // when recplay2 recorded, it was "late" by resound_latency
            // relatived to recplay1 playback, so start with an offset:
            recplay2.start(resound_latency)
        elif not recplay1 or not recplay2:
            print "WARNING: Missing recplay1 or/and recplay2 Ugen!"
        else:
            recplay3.record(false)
            recplay3.unrun() # does not need to be active now
            recplay1.stop() // atend is already set up to mute when finished
            recplay2.stop()


    def rec4handler(obj, event, x, y):
    # Handler for all checkbox
        display "rec4handler", x, resound_latency

        if x and recplay1 and recplay2 and recplay3:
            recplay1.play().atend(MUTE)
            recplay1.start(0)
            recplay2.play().atend(MUTE)
            recplay2.start(resound_latency)  // see latency notes above
            recplay3.play().atend(MUTE)
            recplay3.start(resound_latency)
        elif (not x) and recplay1 and recplay2 and recplay3:
            disable_real()
        else:
            print "WARNING: Missing recplay1 or recplay2 or recplay3 Ugen!"


    def state_change():
        // note: state 0 does nothing
        if state == 1:
            r1check.set_and_act(t)
        elif state == 2:
            r1check.set_and_act(nil)
        elif state == 3
            r2check.set_and_act(t)
        elif state == 4
            r2check.set_and_act(nil)
        elif state == 5
            r3check.set_and_act(t)
        elif state == 6
            r3check.set_and_act(nil)
        elif state == 7
            allcheck.set_and_act(t)
        elif state == 8
            allcheck.set_and_act(nil)


    def disable_real():
        if recplay1: recplay1.stop()
        if recplay2: recplay2.stop()
        if recplay3: recplay3.stop()
        recplay1 = nil
        recplay2 = nil
        recplay3 = nil
        enabled = false
        active_movement = nil
