# scores.srp -- note lists and player
#
# Roger B. Dannenberg
# Oct 2024

# A score or note list is implemented by Score and the main
# data structure is an array of Notes. A Note is an object
# with time - start time
#      duration - duration
#      params - a dictionary of additional parameters
#               including pan, gain, and id

class Note:
    var time
    var pitch
    var vel
    var dur
    var id
    var params

    def init(time_, pitch_, vel_, dur_, optional id_, pdict,
             dictionary params_):
        time = time_
        pitch = pitch_
        vel = vel_
        dur = dur_
        id = id_
        params = params_
        if pdict:
            if isdict(pdict):
                params = pdict
                if len(params_) > 0:
                    print "WARNING: in Note.init(), a parameter dictionary was"
                    print "    passed AND keyword parameters were passed."
                    print "    Keyword parameters are ignored if you pass in an"
                    print "    optional parameter dictionary."
            else:
                print "WARNING: in Note.init(), a non-dictionary parameter was"
                print "    passed as a Note parameter dictionary:", pdict
                print "    This parameter will be ignored."


    def copy_if_shift(offset):
    # make a new note with the indicated offset if offset is non-zero;
    # otherwise, you can use the note as is
        return this if offset == 0 else
               Note(time + offset, pitch, vel, dur, id, params)

    def play(synth):
        synth.noteon(pitch, vel, dur, id, params)

    def show(optional indent = ""):
        var idstr = (" id=" + str(id)) if id else ""
        print indent; "at", time; "s", "p"; pitch,
        print "v"; vel, dur; "s"; idstr
        print indent; "    "; params


def note_compare(x, y):
    x.time > y.time

def note_compare_resort(x, y):
    x.time < y.time


class Score_action (Note):
# this is a Score event that can take the place of a Note
# when the action is reached, the parameter is called as
# a function.
    def init(fn):
        super.init(0, 1, 1, 0, function = fn)
    
    def play(synth):
        var fn = params['function']
        print "Score_action invokes", fn
        funcall(fn, synth, this) 

    def copy_if_shift(offset):
    # make a new Score_action with the indicated offset if offset is non-zero;
    # otherwise, you can use the Score_action as is. This cannot be inherited
    # from Note, which would make a Note, not another Score_action
        if offset == 0:
            return this
        var rslt = Score_action(params['function'])
        rslt.time = time + offset
        return rslt


class Score:
    var notes
    var time
    var dur
    // DEBUGGING / MEASUREMENT:
    var num_ugens
    var num_ugens_at_start

    def init(optional notes_):
        notes = notes_ or []
        time = 0
        dur = 0

    def play(synth):
        num_ugens = ugens_created
        num_ugens_at_start = ugens_created
        play_note(synth, 0)

    def append_rest(dur_):
    # insert time at the end of the score (simply adds to score.dur)
        dur = dur + dur_

    def merge(score, optional offset = 0):
        if isinstance(score, Score):
            for note in score.notes:
                notes.append(note.copy_if_shift(offset))
            notes.sort('note_compare')
            var end = max(time + dur, score.time + offset + score.dur)
            dur = end - time
        elif isinstance(score, Note):
            var n = score.copy_if_shift(offset)
            notes.append(n)
            dur = max(dur, n.time + n.dur)
            notes.resort('note_compare_resort')

    def append(score):
    # aligns time of the score parameter (or note) to the end time of this
        merge(score, time + dur - score.time)  // position score at our end

    def stretch(x):
        for note in notes:
            note.time = note.time * x
            note.dur = note.dur * x

    def play_note(synth, i, optional starting = false):
        // THIS IS HERE FOR DEBUGGING AND MEASURING:
        // TIMING: when there's a set of notes at time T, we want to output
        // how late we are starting to play them and then output how late we
        // are when we finish them all.
        //     To know if we're starting, we use the parameter starting,
        // which is set when we cause this event with a non-zero delay
        // (so it's not at the same time as the previous note.)
        //     To know if we're ending, we just look for a non-zero delay
        // to the next note. 
        var note = notes[i]
        var when = note.time
        if starting:
            starting = false
            num_ugens_at_start = ugens_created
        if i >= len(notes):
            return
        note.play(synth)
        i = i + 1
        if i >= len(notes)
            print "created", ugens_created - num_ugens, "ugens"
            return
        note = notes[i]
        if note.time != when:  // next note is in the future
            // how far behind are we?
            print "finished at score time", when, "late by", 
            print     sched_time_get() - sched_rtime
            print "created", ugens_created - num_ugens_at_start, "ugens"
            num_ugens_at_start = ugens_created
            starting = true
        sched_cause(note.time - when, this, 'play_note', synth, i, starting)

    def show(optional msg = ""):
        print "----- Score at", time, "dur", dur, msg, "-----"
        for note in notes:
            note.show("    ")
