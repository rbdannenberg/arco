# melo.srp -- control and implementation of "melo" section of
#             Separation Logic
#
# based on previous implementation in Aura
#
# Roger B. Dannenberg
# Oct 2023

melo_mgr = nil

class Melo_mgr:
    var mix, recplay, outgain
    
    def init():
        mix = mix(2)
        recplay = recplay(input_ugen, 1, 1, 0.5)  // inp, chans, gain, fade_time
        recplay.run()
        recplay.record(true)

        # launch some echos
        sched_select(rtsched)
        sched_cause(9.3, this, 'echo', 'in9')
        sched_cause(13.3, this, 'echo', 'in13')
        sched_cause(19.7, this, 'echo', 'in20')
        sched_cause(22.6, this, 'echo', 'in23')
        sched_cause(28, this, 'stop_recording')
        sched_cause(53, this, 'stop')

        outgain = gain_control(mix, melo_gain_sl)
        outgain.play()  // initially no inputs and silence -- see echo()


    def echo(name):
        if not recplay:
            print "##### WARNING: Melo.echo has no recplay buffer to play!!"
            print "      No echo/delayed recording will be played"
            return
        var rp = recplay(zero_ugen, 1, 1)
        rp.borrow(recplay)
        mix.ins(name, rp, pan_45(random()))
        rp.start(0)


    def stop_recording():
        if recplay:  // maybe we are stopped already!
            recplay.record(false)
            recplay.unrun()


    def stop():
        if outgain:  // started and not stopped already
            recplay = nil
            mix = nil
            outgain.fade(1)
            outgain = nil  // free the constraint
