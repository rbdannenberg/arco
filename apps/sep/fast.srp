# fast.srp -- control and implementation of "fast" section of
#             Separation Logic
#
# based on previous implementation in Aura
#
# Roger B. Dannenberg
# Oct 2023

# For first part (CUE_FAST), 3 pitch shifters feed into long-tailed
#     reverb. Shifters are randomly shifted in pitch, updated every
#     0.1 sec, but not every pitch changes every 0.1 sec.
# For the second part (CUE_ENABLE2), we turn on "gatedfoo" which does
#     pitch shifts of 0.5 and 0.3, and delays of 0.15 and 0.2 with 0.6
#     feedback, which are then multiplied by power -- I think this
#     essentially a noise gate: small signals are multiplied by small
#     power so they get even smaller, but large signals get more gain.
# Also, the first part is used at the very end (CUE_AIR) with a
#     different gain.
#
# start() -- start the first section
# finish() -- stop the first section
# start2() -- start the second section
# finish2() -- stop the second section
#
# outputs go directly to the final output (using .play()).
# two outputs are played:
#    dry_output is stereo, with input from:
#        psum = sum of 3 pitch shifters, input controlled by fast_gain_slider
#        reverb = (multi_reverb of psum) * reverb_gain (is a pweb)
#    gfoutput is gain_control(mix of two Gated_foo, cycles_gain_slider)
#        
#
# Reverb gain modification: The original live version was pretty
# quiet in this section. Too much reverb would cause feedback, and
# too-long reverb times would smear together multiple flute riffs.
#     In the recording, we increased the level of reverb tail from the
# computer using mixer automation. With this option, we automate this
# approach. We use the trigger input to set the gain to RVB_WET
# (quickly). (The input signal is already scaled by fast_gain_sl, the
# slider.) As long as there is no trigger, the gain increases
# exponentially (offsetting the exponential decay of the reverb) to
# some limit. The flute input already has some expansion, which is
# designed to avoid feedback runaway.

RVB_EXPAND = true
RVB_WET = 0.007

require "gatedfoo"
require "pitchdly"

    
class Fast_mgr:
    var started
    var inst_num  // increments when we restart - protects against
    // starting a long fade with a scheduled output cut and then
    // restarting before the long fade finishes -- we do not want
    // to cut the newly restarted instance of the effect
    var pitdly1, pitdly2, pitdly3
    var shift2, shift3    // pitch shifts
    var cycle_period      // how often we update pitch shifts
    var cycle_transpose   // overall transposition of pitch shifts
    var pattern_x         // every period, we update shift1 to 0 to 11
            // and every other period, we update shift2 to -12 to -1
            // and in a pattern of 1-period, 3-periods, 1-period, 3-periods ...
            // we update shift3 to -24 to -13 (probably this was a mistake
            // and we intended to update every 2 periods).
    // Unit Generators:
    var fast_input  // input after slider-controlled gain
    var reverb      // output for first part (CUE_FAST, AIR)
    var gfoutput    // output for 2nd part   (CUE_ENABLE2)
    var dry_output  // if RVB_EXPAND, dry_output is the (dry) reverb input
    var reverb_gain // if RVB_EXPAND, reverb_gain is the pwe controlling wet


    def init():
        cycle_period = 0.1
        cycle_transpose = 0
        inst_num = 0


    def cycles():  # called periodically, started in .start() method
        var shift1 = irandom(12)
        if pattern_x & 1 == 1:
            shift2 = irandom(12) - 12
        if pattern_x & 2 == 2:
            shift3 = irandom(12) - 24
        pattern_x = pattern_x + 1
        pitdly1.set_ratio(step_to_ratio(shift1 + cycle_transpose))
        pitdly2.set_ratio(step_to_ratio(shift2 + cycle_transpose))
        pitdly3.set_ratio(step_to_ratio(shift3 + cycle_transpose))


    def get_fast_input():
    # input is shared with Gated_foo instruments, but we only need one,
    # so create it only if we need it; otherwise return what's already there:
        if not fast_input:
            fast_input = gain_control(input_ugen, fast_gain_sl, term = true)
            fast_input = fader(fast_input, 1)
            fast_input.trace()
        fast_input    


    def start(optional trigger_enable = true):
    # create effect and reverb, connect reverb to output
        if started:
            print "######## Fast_mgr: already started"
            return
        started = true
        inst_num = inst_num + 1
        if trigger_enable:  // detect when flute is playing - see onoff()
            trigger_mgr.start_onoff('fast')
        if not reverb:
            get_fast_input()
            pitdly1 = Pitchdly(fast_input, 1, 0, 1.0, 0.03, 0.03, 0,
                               name = "pitchdly1")
            pitdly2 = Pitchdly(fast_input, 1, 0, 1.0, 0.03, 0.03, 0,
                               name = "pitchdly2")
            pitdly3 = Pitchdly(fast_input, 1, 0, 1.0, 0.03, 0.03, 0,
                               name = "pitchdly3")
            var psum = sum(1)
            psum.ins(pitdly1, pitdly2, pitdly3)
            // psum = mono_to_stereo(psum, 1.0, name = "ipsum-to-stereo")
            var wet = RVB_WET
            if RVB_EXPAND:
                // dry signal is routed separately from reverb:
                dry_output = route(2).ins(psum, 0, 0, 0, 1)
                // if RVB_EXPAND, wet is variable to get dynamic expansion
                // and performed *after* the reverb
                wet = 1
            reverb = multi_reverb(psum, 12.0, wet, 9000, 2)
            if RVB_EXPAND:            
                // note: we could simply play() the reverb, but then we'd
                // have a small race condition where either dry_output or
                // reverb starts first and the other creates a click when
                // inserted later. If both start at the same time, both
                // reverb and dry get Pitchdly output from the beginning,
                // and there's a little windowing on Pitchdly grains, so
                // it should not click even if the flute is playing when
                // this start() method is called.
                reverb_gain = pweb(0, RVB_WET)
                reverb = mult(reverb, reverb_gain)
                dry_output.ins(reverb, 0, 0, 1, 1)  // add in reverb
                dry_output.play()
            else:
                reverb.play()
        pattern_x = 0
        shift2 = 0
        shift3 = 0
        Periodic(cycle_period, this, 'cycles', unique = 'fast_cycles')
        fast_cycles.start()


    def finish():
        if not started:
            return
        fast_cycles.stop()
        if fast_input and reverb:
            // note that fast_input is a Fader
            fast_input.set_dur(0.1) // cut all input
            fast_input.set_goal(0)
            fast_input = nil
            sched_cause(20, this, 'cycles_fade', inst_num)
        if gfoutput:
            gfoutput.fade(1)
            gfoutput = nil
        started = false


    def cycles_fade(inum):
        if inum != inst_num:
            print "Fast_mgr.cycles_fade: ignoring because inst_num changed"
            return
        if RVB_EXPAND:
           dry_output.fade(1)
        else:
            reverb.fade(1)  // slow fade -- no rush
        dry_output = nil
        reverb = nil
        fast_input = nil


    def start2():
    # prerequisite: start() has been called, started == true (see init.srp)
        get_fast_input()
        var mix = mix(2)
        var gf1 = Gated_foo(fast_input, 0.5, 0.15, 0.6, 100, 0.1, 0.1, 0.05, 1)
        mix.ins('gf1', gf1, [.01, 0.0075])

        var gf2 = Gated_foo(fast_input, 0.3, 0.2, 0.6, 100, 0.1, 0.1, 0.05, 1)
        mix.ins('gf2', gf2, [.012, .016])

        gfoutput = gain_control(mix, cycles_gain_sl, term = true)
        gfoutput.trace()
        gfoutput.play()


    def onoff(onoff):
        if RVB_EXPAND:
            reverb_gain.stop()
            if onoff == 0
                display "fast.onoff starting to raise gain over 10 sec"
                reverb_gain.set_points(10, 2)
            else
                display "fast.onoff returning gain to", RVB_WET
                reverb_gain.set_points(0.005, RVB_WET)  // 5 msec fade to RVB_WET
            reverb_gain.start()
