# pizz.srp -- control and implementation of "pizz" section of
#             Separation Logic
#
# based on previous implementation in Aura
#
# Roger B. Dannenberg
# Oct 2023

pizz_instr = nil

class Pizz (Instrument):
    var mix, count, off, outgain

    def init(recplay, delay_spread, rate_origin, rate_slope, gain, dur,
             gain_slider):
    # count is number of pizz players to launch
    # delay_spread is the spread in seconds between each launch (not counting
    #       added jitter of 0 to 1 seconds)
    # rate_origin is the initial rate in (half)steps
    # each pizz player's rate (after the initial one) is incremented by
    #       rate_slope (also measured in (half)steps)
        instr_begin()
        mix = mix(2)

        # launch some echos. Each recplay(er) will be restarted at random
        # times until off; then we stop each one, keeping track with
        # count how many players are acive.
        sched_select(rtsched)  // for scheduling below
        off = false // set true to end everything
        count = 4
        for i = 0 to count:
            var delay = i * delay_spread + random()  # spread out the delays
            // for the first pizz section, rates will be 3, 1.5, 0, -1.5:
            var rate = step_to_ratio(rate_origin + i * rate_slope)
            var rp = recplay(zero_ugen, 1, 1)
            rp.set_speed(rate)
            rp.borrow(recplay)
            // rp.term() -- do not terminate because we reuse 4 rp's many until
            // off is set to true (see end_all()). We clean up by explicitly
            // fading and removing outgain and setting off to get rid of
            // references to recplay's in scheduled events.
            var name = mix_name(i)
            mix.ins(name, rp, pan_45(pr_unif(0.3, 0.7), gain))
            sched_cause(delay, this, 'echo', rp, rate, name)
        sched_cause(dur, this, 'end_all')
        print "Pizz.init - ending in", dur, "secs"
        outgain = gain_control(mix, gain_slider)
        outgain.trace()
        super.init("Pizz", outgain)


    def echo(rp, rate, name):
        if off:
            print "Pizz.echo: off is set; removing recplay", name, "from mixer"
            count = count - 1
            mix.rem(name)
        else:
            print "Pizz.echo: (re)starting playback from", name
            rp.start(0)
            // Note: recording is 6.5 sec long (a constant in init.srp)
            sched_cause(6.7 / rate + random(), this, 'echo', rp, rate, name)


    def end_all():
        display "Pizz.end_all - ending Pizz", count
        off = true
        if count > 0:
            print "    deferring ending until players finish playing"
            sched_cause(3, this, 'end_all')
        else:
            outgain.mute()
            outgain = nil
            // TODO: creator should remove references to this instance


    def end_now():
        print "Pizz.end_now: fading out in 0.1 sec"
        outgain.fade(0.1)  // force fade-out
        off = true
