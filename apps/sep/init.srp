# init.srp for Separation Logic
#
# Roger B. Dannenberg
# September, 2024

require "debug"
require "wxserpent"
require "prob"
require "arco"
require "allugens"
require "slider"
require "reverb"
require "steps"
require "constraint"
require "air"
require "points"
require "pizz"
require "melo"
require "fast"
require "gliss"
require "pan"
require "mididevice"
require "midicontrol"


MUSIC_PATH = "/Users/rbd/Music/separation-logic/"

SHOWTRIG_X = 280
SHOWTRIG_Y = 360


pizz_rec_obj = nil  // global used to check for recording


# Sound files for testing:

audioinput_files = [
        "1-air.wav",    // intro sound, 2 air tones
        "2-points.wav", // short tones that are recorded and layered
        "3-pizz.wav",   // pizz tones that are recorded and layered
        "4-melody.wav", // a lyrical passage that is recorded and layered
        "5-fast.wav",   // fast riffs that are processed and reverbed
        "6-slow.wav",   // not used
        "5-fast-a.wav", // first fast riff only
        "5-fast-b.wav", // 2nd fast riff only
        "5-fast-c.wav", // 3rd fast riff only
        "5-fast-d.wav", // 4th fast riff only
        "5-fast-e.wav", // 5th fast riff only
        "7-fastpoints.wav", // 2-points.wav sped up, not used
        "multiphonic.wav",  // multiphonics
        "sing.wav",     // sung tone with voice sweep
        "singtone.wav", // sung tone steady
        "whistle.wav",  // whistle tones at end
        "long.wav",     // long melody at end
        "air-only2.wav"  // air tones from end of a recording
        ]

arco_set_input_files(audioinput_files)


def play_into_input_from(name):
    var fullname = MUSIC_PATH + name
    display "play_into_input_from", name, fullname
    simulate_input_from_file(fullname)

def main():
    arco_init(latency = 10, network = false, title = "Separation Logic",
              appname = "sep")
    display "main", prefs
    midi_devices = Midi_devices(prefs, open_later = true)
    midi_devices.open_midi(device = 'midi_in_device')
    display "main", prefs, midi_devices.success, midi_devices.in_dev, midi_devices.out_dev
    arco_run()


ui_initialized = false

class Center_constraint (Simple_constraint):
# constraint that adjusts overall gain for [left, right] that pans to center.
# converts slider value from dB to linear:
    def compute(): return pan_45(0.5, db_to_linear(x))


class Db_constraint (Simple_constraint):
    def compute(): return db_to_linear(x)


def arco_ready():
# called when arco is intialized and ready to make sound or when
# arco audio stream has been reopened
    print "**** arco audio is running! ****"
    var win = default_window
    if ui_initialized:
        return
    test_menu = Menu(win, "Test")
    test_menu.item("Create RBD Control Panel",
                   "creates lots of extra controls for testing",
                   nil, nil, 'create_debug_controls')
    sep_mixer = Sep_mixer()
#TODO: e.g. simulator.cycles_control
    simulator = nil
#    simulator = Simulator()
    air_mgr = Air_mgr()
    sep_cue = Sep_cue()
    fast_mgr = Fast_mgr()
    gliss_mgr = Gliss_mgr()
    trigger_mgr = Trigger_mgr(default_window, SHOWTRIG_X, SHOWTRIG_Y)
    win.fit_to_children()

    // -------- input to output ----------
    monitor_gain_constraint = Center_constraint(0.0)
    var input_left = route(1).ins(input_ugen, 0, 0)
    monitor_gain = gain_control(input_left, monitor_gain_sl,
                                monitor_gain_constraint, term = false)
    display "in to out", monitor_gain, input_left
    monitor_gain.play()



def create_debug_controls(rest ignore)
    controls = Sep_controls("Separation Logic - Test")


pattern = [5, 7, 9, 12, 6, 8, 10, 13, 2, 4, 5, 9, 6, 8, 10, 13]

shift1 = 0
shift2 = 0
shift3 = 0
cycle_period = 0.1
cycle_transpose = 0


//---------------------- MIDI and CONTROL ---------------------

// create and apply gain constraint connected to a slider

def gain_control(input, slider, optional constraint, keyword term = true):
#
# multiply input by gain determined by slider; the result is
# the multiplier that implements gain, so it represents the output.
# If term is true, the multiplier has the CAN_TERMINATE flag set, and
# when the multiplier is freed, the constraint's finish method is
# invoked.
# 
    display "gain_control", input, slider, slider.val, constraint
    if not constraint:
        constraint = Db_constraint()
    constraint.connect(slider)
    var ugen = constraint.get_const()
    var m = mult(input, ugen)
    if term:
        m.atend(FINISH, constraint)
    return m


######### trigger, indicator, and input detection ###########

def actl_trig(timestamp, address, types, idnum, rms)
    // display "TRIG ONSET DETECTED:", idnum, rms
    trigger_mgr.trigger()

def actl_onoff(timestamp, address, types, idnum, onoff)
    trigger_mgr.onoff(onoff)


class Trigger_mgr:
# create object main program and keep it around for whole performance;
#    creation includes indicator light on GUI
# start_trigger to initialize trigger for first note
# stop_trigger when done
# start_onoff to detect playing in FAST and ENABLE2 sections
# stop_onoff when done

    var running  // tells us if we are connected
    var trigger_mode  // 'start' for trigger at start, 'fast' for onoff detect,
                      // 'gliss' for trigger in gliss
    var trig_ugen  // the unit generator
    var on_or_off  // 0 or 1 reflecting state from trig_ugen

    def init(win, x, y):
        display "Trigger_mgr init", x, y
        Statictext(win, "Audio trigger:", x, y, 100, 20, 'showtrig_label')
        // window size of 896 is multiple of 32 and ~20ms,
        // gives ~100Hz analysis rate. Pause for 0.2s after trigger:
        trig_ugen = trig(input_ugen, "/actl/trig", 896, 0.01, 0.2)
        o2_method_new("/actl/trig", "if", 'actl_trig', t)
        o2_method_new("/actl/onoff", "ii", 'actl_onoff', t)
        Eventlight(win, 20, x + 100, y, 'showtrig_light')
        showtrig_light.on_color = "GREEN"
        on_or_off = 0


    def start_trigger(mode):
        display "Trigger_mgr.start_trigger", mode
        if trigger_mode and trigger_mode != mode:
            stop_onoff()
        trig_ugen.set_threshold(0.01)
        trigger_mode = mode
        enable()


    def stop_trigger():
        display "Trigger_mgr.stop_trigger"
        trigger_mode = nil
        trig_ugen.set_threshold(10000.0)
        disable()
        

    def start_onoff(mode, optional runlen = 0.001):
        display "Trigger_mgr.start_onoff", mode
        if trigger_mode and trigger_mode != mode:
           stop_trigger()
        trig_ugen.onoff("/actl/onoff", 0.02, runlen)
        trigger_mode = mode
        enable()


    def stop_onoff():
        display "Trigger_mgr.stop_onoff"
        trigger_mode = nil
        trig_ugen.onoff("", 0.02, 0.02)
        disable()


    def trigger():
    # callback from Arco server
        showtrig_light.blink()
        // display "Trigger_mgr.trigger", trigger_mode
        if trigger_mode == 'start':
            air_mgr.trigger()
            trigger_mode = nil
        elif trigger_mode == 'gliss':
            gliss_mgr.gliss_action()


    def onoff(onoff):
    # callback from Arco server
        if onoff == on_or_off:
            return
        on_or_off = onoff
        if trigger_mode == 'fast':
            fast_mgr.onoff(onoff)
        

    def enable()
        if running:
            print "WARNING: trigger is already running"
        else:
            print "Trigger_mgr.enable: trig_ugen.run()"
            trig_ugen.run()
            running = true


    def disable()
        if not running:
            print "WARNING: Trigger_mgr.disable: trigger is not running"
        else:
            print "Trigger_mgr.disable: trig_ugen.unrun()"
            trig_ugen.unrun()
            running = false



// --------------- Cue Display and Actions -----------------

CUE_START = 1 // beginning, wait for audio trigger
CUE_POINTS = 2     // A
CUE_PIZZ = 3       // B
CUE_MELO = 4       // C
CUE_FAST = 5       // D
CUE_ENABLE2 = 6    // E
CUE_GLISS = 7      // F
CUE_GLISSUP = 8    // G
CUE_GLISSNORM = 9  // H
CUE_WHISTLE = 10   // I
CUE_AIR = 11       // J
CUE_END = 12       // K

sep_cue_to_string = ["  ", "0", "A", "B", "C", "D", "E",
                     "F", "G", "H", "I", "J", "K"]

sep_cue_to_descr = ["  ", "Start", "Point", "Pizz", "Melo", "Riffs", "Riffs2",
                    "Droop", "Up", "Norm", "Whistl", "Air", "End"] 

cue_to_file_name = { CUE_START: "1-air.wav",
                     CUE_POINTS: "2-points.wav",
                     CUE_PIZZ: "3-pizz.wav",
                     CUE_MELO: "4-melody.wav",
                     CUE_FAST: "5-fast-a.wav",
                     CUE_ENABLE2: "5-fast-c.wav",
                     CUE_GLISS: "long.wav",
                     CUE_WHISTLE: "whistle.wav",
                     CUE_AIR: "air-only2.wav" }

fast_file_names = ["5-fast-a.wav", "5-fast-b.wav", "5-fast-c.wav",
                   "5-fast-d.wav", "5-fast-e.wav", "5-fast-b.wav", 
                   "5-fast-d.wav"]

class Cue_buttons:
    def init(x, y):
        make_button(CUE_START, 'cue_0_btn', 'cue_0', x = x, y = y)
        make_button(CUE_POINTS, 'cue_a_btn', 'cue_a')
        make_button(CUE_PIZZ, 'cue_b_btn', 'cue_b')
        make_button(CUE_MELO, 'cue_c_btn', 'cue_c')
        make_button(CUE_FAST, 'cue_d_btn', 'cue_d')
        make_button(CUE_GLISS, 'cue_f_btn', 'cue_f')
        make_button(CUE_WHISTLE, 'cue_i_btn', 'cue_i')
        make_button(CUE_AIR, 'cue_j_btn', 'cue_j')


    def make_button(i, varname, method, keyword x = 'S', y = 'D'):
        Button(default_window, sep_cue_to_string[i], x, y, 20, 20, varname).
                add_target_method(this, method)
        wxs_x = wxs_x + 25  // move right for descriptive text
        Statictext(default_window, sep_cue_to_descr[i], 'S', 'S', 60, 20)
        wxs_x = wxs_x - 25  // move back to button position
        

    def cue_0(rest ignore):
        print "cue_0"
        sep_cue.set_cue_num(CUE_START)

    def cue_a(rest ignore):
        sep_cue.set_cue_num(CUE_POINTS)

    def cue_b(rest ignore):
        sep_cue.set_cue_num(CUE_PIZZ)

    def cue_c(rest ignore):
        sep_cue.set_cue_num(CUE_MELO)

    def cue_d(rest ignore):
        sep_cue.set_cue_num(CUE_FAST)

    def cue_f(rest ignore):
        sep_cue.set_cue_num(CUE_GLISS)

    def cue_i(rest ignore):
        sep_cue.set_cue_num(CUE_WHISTLE)

    def cue_j(rest ignore):
        sep_cue.set_cue_num(CUE_AIR)


class Sep_cue:
    var cue_num
    var advance_last_time
    var fast_num


    def init():
        cue_num = 0
        x = 265
        y = 230
        fast_num = 0
        Statictext(default_window, " ", x, y, 80, 100, 'sepcue_text')
        sepcue_text.set_color("YELLOW")
        sepcue_text.set_font(95, WXS_FONT_SWISS, WXS_FONT_NORMAL, WXS_FONT_BOLD,
                             false, "")
        wxs_space = WXS_DEFAULT_SPACE + 10
        Button(default_window, "Skip Cue", x + 85, y, 85, 'H', 'sepskip_btn')
        sepskip_btn.add_target_method(this, 'sep_skip')
        // wxs_y = wxs_y + 20
        Button(default_window, "Sim Cue", 'S', 'D', 'S', 'H', 'sepsim_btn')
        sepsim_btn.add_target_method(this, 'sep_sim')
        // wxs_y = wxs_y + 20
        Button(default_window, "Next Cue", 'S', 'D', 'S', 'H', 'sepcue_btn')
        sepcue_btn.add_target_method(this, 'sep_advance')
        wxs_space = WXS_DEFAULT_SPACE
        advance_last_time = -10
        cue_num = 0
        cue_buttons = Cue_buttons(x + 10, 7)



    def sep_skip(rest ignore):
        set_cue_num(cue_num + 1, "sep_skip")


    def sep_sim(rest ignore):
    # "sim" means play a recording to simulate input. The recording corresponds
    # to the current cue_num.
        print "**** sep_sim", cue_to_string(cue_num)
        var file_name = cue_to_file_name.get(cue_num)
        if cue_num == CUE_FAST:  // special case: multiple files for this cue
            file_name = fast_file_names[fast_num]
            fast_num = (fast_num + 1) % len(fast_file_names)
        if not file_name:
            print "********* NO INPUT SIMULATION FILE FOR THIS CUE ************"
        else:
            display "sep_sim: playing", file_name
            play_into_input_from(file_name)


    def set_cue_num(num, optional source = "set_cue_num"):
        cue_num = num
        sepcue_text.set_string(cue_to_string(cue_num))
        print "****", source, "to", cue_to_string(cue_num)
        // ------- these changes are installed regardless of how we get to the cue:
        if cue_num == CUE_START:
            print "Setting up trigger for CUE_START cue"
            trigger_mgr.start_trigger('start')   // enables "air" section
        elif cue_num == CUE_POINTS:
            trigger_mgr.stop_trigger()
            points_mgr = Points_mgr()
        elif cue_num == CUE_PIZZ:
            if points_mgr:
                points_mgr.stop_recording()
            pizz_rec_obj = Pizz_rec()
            pizz_instr = Pizz(pizz_rec_obj.recplay, 4, 1.5, 3, -1.5, 75,
                              pizz_gain_sl)
            pizz_instr.play()
        elif cue_num == CUE_MELO:
            melo_mgr= Melo_mgr()
        elif cue_num == CUE_FAST:
            start_cue_fast()
        elif cue_num == CUE_ENABLE2:
            start_cue_fast()
            // fast_mgr.cycles_control(true, false)
            // fast_mgr.enable2(true)                
            fast_mgr.start2()
        elif cue_num == CUE_GLISS:
            fast_mgr.finish()   // safe even if not started
            gliss_mgr.start()
            sched_select(rtsched)
            sched_cause(30, this, 'pizz_rep')
        elif cue_num == CUE_GLISSUP:
            gliss_mgr.gliss_rate = -20
        elif cue_num == CUE_GLISSNORM:
            gliss_mgr.gliss_rate = 4
        elif cue_num == CUE_WHISTLE:
            print "CUE_WHISTLE in set_cue_num"
            // if necessary, set gliss_mgr to the state of CUE_GLISSNORM
            gliss_mgr.start()
            gliss_mgr.gliss_rate = 4
        elif cue_num == CUE_AIR:
            gliss_mgr.finish()
            print "CUE_AIR in set_cue_num"
            start_cue_fast(false)
            fast_mgr.reverb_gain.set_points(0.5, 0.03)
        elif cue_num == CUE_END:
            fast_mgr.finish()
            fast_mgr = nil

            
    def start_cue_fast(optional trigger_enable = true):
        if not fast_mgr.started:
            fast_mgr.start(trigger_enable)
        // shut down air, points, pizz, melo if running
        if air_mgr:
            air_mgr.finish()
            air_mgr = nil
        if points_mgr:
            points_mgr.finish()
            points_mgr = nil
        if pizz_instr:
            pizz_instr.fade(0.5)
            pizz_instr = nil
        if melo_mgr:
            melo_mgr.stop()
            melo_mgr = nil

    

    def sep_advance(rest ignore):
//        print "*** sep_advance turning on trace ***"
//        trace(1)
//        print "*** sep_advance turned on trace ***"
        display "sep_advance", rtsched.time, advance_last_time
        if advance_last_time + 3 > rtsched.time
            print "**** sep_advance: TOO SOON, IGNORING THIS INPUT ****"
            return
        advance_last_time = rtsched.time
        set_cue_num(cue_num + 1, "sep_advance")

        if cue_num == CUE_START:
            nil
        elif cue_num == CUE_POINTS:
            nil
        elif cue_num == CUE_PIZZ:
            nil
        elif cue_num == CUE_MELO:
            nil
        elif cue_num == CUE_FAST:
            nil
        elif cue_num == CUE_ENABLE2:
            nil
        elif cue_num == CUE_GLISS:
            nil
        elif cue_num == CUE_GLISSUP:
            nil
        elif cue_num == CUE_GLISSNORM:
            nil
        elif cue_num == CUE_WHISTLE:
            nil // do nothing here!
        elif cue_num == CUE_AIR:
            nil
        elif cue_num == CUE_END:
            nil
        else:
            simulator.cycles_control(false, true)
            print "WARNING: sep_advace: unknown cue"



    def cue_to_string(n):
        if n > 0 and n < len(sep_cue_to_string):
            sep_cue_to_string[n]
        else:
            "?"


    def pizz_rep():
        if not pizz_rec_obj:
            print "####### WARNING: cannot reprise pizz without a recording"
            print "        Was 'B - Pizz' skipped?"
            return
        pizz_rep_instr = Pizz(pizz_rec_obj.recplay, 48, 1, 6.4, -0.8, 105,
                              pizzrep_gain_sl)
        pizz_rep_rev = multi_reverb(pizz_rep_instr, 3, 0.02, 2)
        pizz_rep_rev.play()




// -------------- pizz processing -----------------
//
class Pizz_rec:
    var recplay  // the recplay ugen for recording
    
    def init():
        recplay = recplay(input_ugen, 1, 1, 0.5)
        recplay.run()
        recplay.record(true)
        sched_cause(6.5, this, 'stop_recording')

    def stop_recording():
        recplay.record(false)
        recplay.unrun()


//
#TODO:
#require "midicontrol"

# -------------- control panel/mixer ---------------

//declare_msg_type('set_monitor_gain', "d")
//declare_msg_type('set_intro_gain', "d")
//declare_msg_type('set_points_gain', "d")
//declare_msg_type('set_pizz_gain', "d")
//declare_msg_type('set_melo_gain', "d")
//declare_msg_type('set_fast_gain', "d")
//declare_msg_type('set_droop_gain', "d")
//declare_msg_type('set_ending_gain', "d")

SLIDER_NAMES = ["0 - Intro", "A - Points", "B - Pizz",
                "C - Melody", "D - Riffs", "E - Extra", "F - Droop",
                "Pizz-rep", "Ending"]

SLIDER_SYMBOLS = ['intro_gain_sl', 'points_gain_sl',
                  'pizz_gain_sl', 'melo_gain_sl', 'fast_gain_sl',
                  'cycles_gain_sl', 'droop_gain_sl', 'pizzrep_gain_sl',
                  'ending_gain_sl']



class Sep_mixer:
    var trigger_threshold


    def set_trig_thresh(x):
    # handler for trig_thresh_sl
        display "set_trig_threshold", x
        trigger_mgr.trig_ugen.set_threshold(x)


    def init()
        win = default_window // Arco_window("Mixer", 550, 40, 280, 100)
        // win.set_prefs(prefs)

        Labeled_slider(win, "Flute thru", 10, 5, 250, 'H',
                       80, -60, 20, 0, 'db', 'monitor_gain_sl', prefs = prefs)

        Labeled_slider(win, "Threshold", 'S', 'D', 'S', 'S',
                       80, 0, 2, 0.1, 'linear', 'trig_thresh_sl', prefs = prefs)
        trig_thresh_sl.add_target_method(this, 'set_trig_thresh', 'x')

        Labeled_slider(win, "Capture Dly", 'S', 'D', 'S', 'S', 80, 0, 0.5,
                       0.3, 'linear', 'capture_dly_sl', prefs = prefs)

        for name at i in SLIDER_NAMES:
            Labeled_slider(win, name, 'S', 'D', 'S', 'S', 80, -60, 20, 0,
                           'db', SLIDER_SYMBOLS[i], prefs = prefs)

        Button(win, "Save", 'S', 'D', 'S', 'S', 'save_bt')
        save_bt.add_target_method(this, 'save_button_handler', 'x')
        
        Button(win, "Reload", 'S', 'D', 'S', 'S', 'reload_bt')
        reload_bt.add_target_method(this, 'reload_button_handler', 'x')
        
        win.fit_to_children()


    def save_button_handler(x)
    # handler for Save button
        prefs.save()
        

    def reload_button_handler(x)
    # handler for Reload button
        display "reload_button_handler", prefs
        prefs.init(prefs.file_name) // reload prefs from file to restore values
        monitor_gain_sl.set_value(prefs.get('monitor_gain_sl', 0))
        trig_thresh_sl.set_value(prefs.get('trigger_threshold_sl', 1))
        intro_gain_sl.set_value(prefs.get('intro_gain_sl', 1))
        points_gain_sl.set_value(prefs.get('points_gain_sl', 1))
        pizz_gain_sl.set_value(prefs.get('pizz_gain_sl', 1))
        melo_gain_sl.set_value(prefs.get('melo_gain_sl', 1))
        fast_gain_sl.set_value(prefs.get('fast_gain_sl', 1))
        cycles_gain_sl.set_value(prefs.get('cycles_gain_sl', 1))
        droop_gain_sl.set_value(prefs.get('droop_gain_sl', 1))
        pizzrep_gain_sl.set_value(prefs.get('pizzrep_gain_sl', 1))
        ending_gain_sl.set_value(prefs.get('ending_gain_sl', 1))

main()
