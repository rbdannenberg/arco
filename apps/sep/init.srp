# init.srp for Separation Logic
#
# Roger B. Dannenberg
# September, 2024

require "debug"
require "wxserpent"
require "prob"
require "arco"
require "allugens"
require "slider"
require "reverb"
require "steps"
require "constraint"
require "air"
require "points"
require "pizz"
require "melo"
require "fast"
require "pan"


SHOWTRIG_X = 330
SHOWTRIG_Y = 320


# Sound files for testing:

audioinput_files = [
        "1-air.wav",    // intro sound, 2 air tones
        "2-points.wav", // short tones that are recorded and layered
        "3-pizz.wav",   // pizz tones that are recorded and layered
        "4-melody.wav", // a lyrical passage that is recorded and layered
        "5-fast.wav",   // fast riffs that are processed and reverbed
        "6-slow.wav",   // not used
        "5-fast-a.wav", // first fast riff only
        "5-fast-b.wav", // 2nd fast riff only
        "5-fast-c.wav", // 3rd fast riff only
        "5-fast-d.wav", // 4th fast riff only
        "5-fast-e.wav", // 5th fast riff only
        "7-fastpoints.wav", // 2-points.wav sped up, not used
        "multiphonic.wav",  // multiphonics
        "sing.wav",     // sung tone with voice sweep
        "singtone.wav", // sung tone steady
        "whistle.wav",  // whistle tones at end
        "long.wav",     // long melody at end
        "air-only.wav"  // just air tones from 1-air.wav used at end
        ]

arco_set_input_files(audioinput_files)

def main():
    arco_init(latency = 10, network = false, title = "Separation Logic",
              appname = "sep")
    arco_run()


ui_initialized = false

class Center_constraint (Simple_constraint):
# constraint that adjusts overall gain for [left, right] that pans to center:
    def compute(): return pan_45(0.5, db_to_linear(x))


def arco_ready():
# called when arco is intialized and ready to make sound or when
# arco audio stream has been reopened
    print "**** arco audio is running! ****"
    var win = default_window
    if ui_initialized:
        return
    test_menu = Menu(win, "Test")
    test_menu.item("Create RBD Control Panel",
                   "creates lots of extra controls for testing",
                   nil, nil, 'create_debug_controls')
    sep_mixer = Sep_mixer()
#TODO: e.g. simulator.cycles_control
    simulator = nil
#    simulator = Simulator()
    air_mgr = Air_mgr()
    sep_cue = Sep_cue()
    trigger_mgr = Trigger_mgr(default_window, SHOWTRIG_X, SHOWTRIG_Y)
    sep_cue = Sep_cue
    win.fit_to_children()

    // -------- input to output ----------
    monitor_gain_constraint = Center_constraint(0.0)
    monitor_gain = gain_control(route(input_ugen, 0), monitor_gain_sl,
                                monitor_gain_constraint)
    monitor_gain.play()


def create_debug_controls(rest ignore)
    controls = Sep_controls("Separation Logic - Test")


pattern = [5, 7, 9, 12, 6, 8, 10, 13, 2, 4, 5, 9, 6, 8, 10, 13]

shift1 = 0
shift2 = 0
shift3 = 0
cycle_period = 0.1
cycle_transpose = 0


//---------------------- MIDI and CONTROL ---------------------

// create and apply gain constraint connected to a slider

ugen_to_constraint = {}  // mapping from ugen to constraint

def gain_control(input, slider, optional constraint):
    if not constraint:
        constraint = Ident_constraint()
    constraint.connect(slider)
    var ugen = constraint.get_const()
    ugen_to_constraint[ugen] = constraint
    return mult(input, ugen)

def constrained_ugen_finish(ugen):
    var constraint = ugen_to_constraint.get(ugen)
    if constraint:
        constraint.finish()


// make a trigger indicator

def actl_trig(timestamp, address, types, idnum, rms)
    display "TRIG ONSET DETECTED:", idnum, rms
    trigger_mgr.trigger()


class Trigger_mgr:
    var trigger_mode
    var trig_ugen  // the unit generator

    def init(win, x, y):
        display "Showtrig init", x, y
        Statictext(win, "Audio trigger:", x, y, 100, 20, 'showtrig_label')
        // window size of 896 is multiple of 32 and ~20ms,
        // gives ~100Hz analysis rate. Pause for 0.2s after trigger:
        trig_ugen = trig(input_ugen, "/actl/trig", 896, 0.01, 0.2)
        o2_method_new("/actl/trig", "if", 'actl_trig', t)
        Eventlight(win, 20, x + 100, y, 'showtrig_light')
        showtrig_light.on_color = "GREEN"

    def start():
        trigger_mode = 'start'

    def trigger():
        showtrig_light.blink()
        display "Trigger_mgr.trigger", trigger_mode
        if trigger_mode == 'start':
            air_mgr.trigger()
            trigger_mode = nil
        elif trigger_mode == 'gliss':
#TODO: gliss_mgr
            gliss_mgr.gliss_action()

    def enable()
        trig_ugen.run()



// --------------- Cue Display and Actions -----------------

CUE_START = 1 // beginning, wait for audio trigger
CUE_POINTS = 2     // A
CUE_PIZZ = 3       // B
CUE_MELO = 4       // C
CUE_FAST = 5       // D
CUE_ENABLE2 = 6    // E
CUE_GLISS = 7      // F
CUE_GLISSUP = 8    // G
CUE_GLISSNORM = 9  // H
CUE_WHISTLE = 10   // I
CUE_AIR = 11       // J
CUE_END = 12       // K

sep_cue_to_string = ["  ", "0", "A", "B", "C", "D", "E",
                     "F", "G", "H", "I", "J", "K"]

class Sep_cue:
    var cue_num
    var advance_last_time


    def init():
        cue_num = 0
        Statictext(default_window, " ", 245, 230, 80, 100, 'sepcue_text')
        sepcue_text.set_color("YELLOW")
        sepcue_text.set_font(95, WXS_FONT_SWISS, WXS_FONT_NORMAL, WXS_FONT_BOLD,
                             false, "")
        Button(default_window, "Next Cue", 350, 260, 85, 50, 'sepcue_btn')
        sepcue_btn.add_target_method(this, 'sep_advance')
        advance_last_time = -10
        cue_num = 0


    def sep_advance(rest ignore):
//        print "*** sep_advance turning on trace ***"
//        trace(1)
//        print "*** sep_advance turned on trace ***"
        display "sep_advance", rtsched.time, advance_last_time
        if advance_last_time + 3 > rtsched.time
            print "**** sep_advance: TOO SOON, IGNORING THIS INPUT ****"
            return
        advance_last_time = rtsched.time
        cue_num = cue_num + 1
        if cue_num == CUE_START:
            trigger_mgr.enable()  // runs unit generator
            trigger_mgr.start()   // enables "air" section
        elif cue_num == CUE_POINTS:
            points_obj = Points()
        elif cue_num == CUE_PIZZ:
            pizz_rec_obj = Pizz_rec()
            pizz_instr = Pizz(pizz_rec_obj.recplay, 4, 1.5, 3, -1.5, 75)
            pizz_instr.play()
        elif cue_num == CUE_MELO:
            melo_instr = Melo()
            melo_instr.play()
        elif cue_num == CUE_FAST:
            simulator.cycles_control(true, false)
        elif cue_num == CUE_ENABLE2:
            fast_instr = Fast()
            fast.play()
        elif cue_num == CUE_GLISS:
            simulator.cycles_control(false, false)

#TODO: fix:

            audio_server <- fast(false)
            audio_server <- gliss(true)
            rtsched.start_use()
            rtsched.cause(30, this, 'pizz_rep')
            rtsched.finish_use()
        elif cue_num == CUE_GLISSUP:
            audio_server <- set_gliss_rate(-20)
        elif cue_num == CUE_GLISSNORM:
            audio_server <- set_gliss_rate(4)
        elif cue_num == CUE_WHISTLE:
            nil // do nothing here!
        elif cue_num == CUE_AIR:
            simulator.cycles_control(true, true)
            audio_server <- wet(0.03)
        elif cue_num == CUE_END:
            audio_server <- endit()
        else:
            simulator.cycles_control(false, true)
            print "sep_advace: unknown cue"
        print "**** sep_advance", cue_to_string(cue_num)
        sepcue_text.set_string(cue_to_string(cue_num))


    def cue_to_string(n):
        if n > 0 and n < len(sep_cue_to_string):
            sep_cue_to_string[n]
        else:
            "?"


    def pizz_rep():
        pizz_rep_instr = Pizz(pizz_rec_obj.recplay, 48, 1, 6.4, -0.8,
                              pizzrep_gain, 105)
        pizz_rep_rev = Stereo_reverb(pizz_rep_instr, 0.02, 3)
        pizz_rep_rev.play()




// -------------- pizz processing -----------------
//
class Pizz_rec:
    var recplay  // the recplay ugen for recording
    
    def init():
        recplay = recplay(input_ugen, 1, 1, 0.5)
        recplay.run()
        recplay.record(true)
        sched_cause(6.5, this, 'stop_recording')

    def stop_recording():
        recplay.record(false)
        recplay.unrun()


//
#TODO:
#require "midicontrol"

# -------------- control panel/mixer ---------------

//declare_msg_type('set_monitor_gain', "d")
//declare_msg_type('set_intro_gain', "d")
//declare_msg_type('set_points_gain', "d")
//declare_msg_type('set_pizz_gain', "d")
//declare_msg_type('set_melo_gain', "d")
//declare_msg_type('set_fast_gain', "d")
//declare_msg_type('set_droop_gain', "d")
//declare_msg_type('set_ending_gain', "d")

class Sep_mixer:
    var win
    var trigger_threshold


    def set_trig_thresh(obj, x):
    # handler for trig_thresh_sl
        display "set_trig_threshold", x
        trigger_mgr.trig_ugen.set_threshold(x)


    def set_intro_gain(obj, x):
    # handler for intro_gain_sl
        air_mgr.set_gain(x)


    def set_points_gain(obj, x):
    # handler for points_gain_sl
        points.set_gain(x)


    def set_pizz_gain(obj, x):
    # handler for pizz_gain_sl
        pizz.set_gain(x)


//    def set_melo_gain(obj, x):
//    # handler for melo_gain_sl
//        ??


//    def set_fast_gain(obj, x):
//    # handler for fast_gain_sl
//        ??


//    def set_cycles_gain(obj, x):
//    # handler for cycles_gain_sl
//        ??


//    def set_droop_gain(obj, x):
//    # handler for droop_gain_sl
//        ??


//    def set_pizzrep_gain(obj, x):
//    # handler for pizzrep_gain_sl
//        pizzrep_gain = x


//    def set_ending_gain(obj, x):
//    # handler for pizzrep_gain_sl
//        ??


    def init()
        win = Window("Separation Logic", 550, 40, 280, 100)

        Labeled_slider(win, "Flute thru", 10, 5, 250, 'H',
                       80, -60, 20, 0, 'db', 'monitor_gain_sl', prefs = prefs)
        display "init", monitor_gain_sl.val, prefs.get('monitor_gain_sl')

        Labeled_slider(win, "Threshold", 'S', 'D', 'S', 'S',
                       80, 0, 2, 0.1, 'linear', 'trig_thresh_sl', prefs = prefs)
        trig_thresh_sl.add_target_method(this, 'set_trig_thresh')

        Labeled_slider(win, "0 - Intro", 'S', 'D', 'S', 'S',
                       80, 0, 2, 1, 'linear', 'intro_gain_sl', prefs = prefs)
        // intro_gain_sl.add_target_method(this, 'set_intro_gain')
        //                          'set_intro_gain', 0, 2, 1)

        Labeled_slider(win, "A - Points", 'S', 'D', 'S', 'S',
                       80, 0, 2, 1, 'linear', 'points_gain_sl', prefs = prefs)
        // points_gain_sl.add_target_method(this, 'set_points_gain')
        //                           'set_points_gain', 0, 2, 1)

        Labeled_slider(win, "B - Pizz", 'S', 'D', 'S', 'S',
                       80, 0, 2, 1, 'linear', 'pizz_gain_sl', prefs = prefs)
        // pizz_gain_sl.add_target_method(this, 'set_pizz_gain')
        //                         'set_pizz_gain', 0, 2, 1)

        Labeled_slider(win, "C - Melody", 'S', 'D', 'S', 'S',
                       80, 0, 2, 1, 'linear', 'melo_gain_sl', prefs = prefs)
        // melo_gain_sl.add_target_method(this, 'set_melo_gain')
        //                         'set_melo_gain', 0, 2, 1)

        Labeled_slider(win, "D - Riffs", 'S', 'D', 'S', 'S',
                       80, 0, 2, 1, 'linear', 'fast_gain_sl', prefs = prefs)
        // fast_gain_sl.add_target_method(this, 'set_fast_gain')
        //                         'set_fast_gain', 0, 2, 1)

        Labeled_slider(win, "D - Extra", 'S', 'D', 'S', 'S',
                       80, 0, 2, 1, 'linear', 'cycles_gain_sl', prefs = prefs)
        // cycles_gain_sl.add_target_method(this, 'set_cycles_gain')
        //                           'set_cycles_gain', 0, 2, 1)

        Labeled_slider(win, "E - Droop", 'S', 'D', 'S', 'S',
                       80, 0, 2, 1, 'linear', 'droop_gain_sl', prefs = prefs)
        // droop_gain_sl.add_target_method(this, 'set_droop_gain')
        //                          'set_droop_gain', 0, 2, 1)

        Labeled_slider(win, "Pizz-rep", 'S', 'D', 'S', 'S',
                       80, 0, 2, 1, 'linear', 'pizzrep_gain_sl', prefs = prefs)
        // pizzrep_gain_sl.add_target_method(this, 'set_pizzrep_gain')
        //                            'set_pizzrep_gain', 0, 2, 1)

        Labeled_slider(win, "Ending", 'S', 'D', 'S', 'S',
                       80, 0, 2, 1, 'linear', 'ending_gain_sl', prefs = prefs)
        // ending_gain_sl.add_target_method(this, 'set_ending_gain')
        //                           'set_ending_gain', 0, 2, 1)

        Button(win, "Save", 80, 'D', 'S', 'S', 'save_bt')
        save_bt.add_target_method(this, 'save_button_handler')
        
        Button(win, "Reload", 'S', 'D', 'S', 'S', 'reload_bt')
        reload_bt.add_target_method(this, 'reload_button_handler')
        
        win.fit_to_children()


    def save_button_handler(rest ignore)
    # handler for Save button
        prefs.save()
        

    def reload_button_handler(rest ignore)
    # handler for Reload button
        display "reload_button_handler", prefs
        prefs.init(prefs.file_name) // reload prefs from file to restore values
        monitor_gain_sl.set_value(prefs.get('monitor_gain_sl', 0))
        trig_thresh_sl.set_value(prefs.get('trigger_threshold_sl', 1))
        intro_gain_sl.set_value(prefs.get('intro_gain_sl', 1))
        points_gain_sl.set_value(prefs.get('points_gain_sl', 1))
        pizz_gain_sl.set_value(prefs.get('pizz_gain_sl', 1))
        melo_gain_sl.set_value(prefs.get('melo_gain_sl', 1))
        fast_gain_sl.set_value(prefs.get('fast_gain_sl', 1))
        cycles_gain_sl.set_value(prefs.get('cycles_gain_sl', 1))
        droop_gain_sl.set_value(prefs.get('droop_gain_sl', 1))
        pizzrep_gain_sl.set_value(prefs.get('pizzrep_gain_sl', 1))
        ending_gain_sl.set_value(prefs.get('ending_gain_sl', 1))

main()
