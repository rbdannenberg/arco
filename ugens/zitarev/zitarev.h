/* zitarev -- unit generator for arco
 *
 * generated by f2a.py
 */

/*------------- BEGIN FAUST PREAMBLE -------------*/

/* ------------------------------------------------------------
name: "zitarev"
Code generated with Faust 2.59.6 (https://faust.grame.fr)
Compilation options: -lang cpp -light -ct 1 -cn Zitarev -es 1 -mcd 16 -single -ftz 0
------------------------------------------------------------ */

#ifndef  __Zitarev_H__
#define  __Zitarev_H__

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>
#include <cstdint>
#include <math.h>

#ifndef FAUSTCLASS 
#define FAUSTCLASS Zitarev
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

#if defined(_WIN32)
#define RESTRICT __restrict
#else
#define RESTRICT __restrict__
#endif

static float Zitarev_faustpower2_f(float value) {
    return value * value;
}
/*-------------- END FAUST PREAMBLE --------------*/

extern const char *Zitarev_name;

class Zitarev : public Ugen {
public:
    struct Zitarev_state {
        FAUSTFLOAT fEntry0;
        float fRec0[2];
        int IOTA0;
        float fVec0[16384];
        FAUSTFLOAT fEntry1;
        float fRec1[2];
        FAUSTFLOAT fEntry2;
        float fRec15[2];
        float fRec14[2];
        float fVec1[32768];
        float fVec2[16384];
        float fVec3[4096];
        float fRec12[2];
        float fRec19[2];
        float fRec18[2];
        float fVec4[16384];
        float fVec5[2048];
        float fRec16[2];
        float fRec23[2];
        float fRec22[2];
        float fVec6[16384];
        float fVec7[4096];
        float fRec20[2];
        float fRec27[2];
        float fRec26[2];
        float fVec8[16384];
        float fVec9[4096];
        float fRec24[2];
        float fRec31[2];
        float fRec30[2];
        float fVec10[32768];
        float fVec11[2048];
        float fRec28[2];
        float fRec35[2];
        float fRec34[2];
        float fVec12[32768];
        float fVec13[4096];
        float fRec32[2];
        float fRec39[2];
        float fRec38[2];
        float fVec14[16384];
        float fVec15[4096];
        float fRec36[2];
        float fRec43[2];
        float fRec42[2];
        float fVec16[16384];
        float fVec17[2048];
        float fRec40[2];
        float fRec4[3];
        float fRec5[3];
        float fRec6[3];
        float fRec7[3];
        float fRec8[3];
        float fRec9[3];
        float fRec10[3];
        float fRec11[3];
        float fRec3[3];
        float fRec2[3];
        float fRec45[3];
        float fRec44[3];
    };
    Vec<Zitarev_state> states;
    void (Zitarev::*run_channel)(Zitarev_state *state);

    Ugen_ptr snd;
    int snd_stride;
    Sample_ptr snd_samps;

    Ugen_ptr wetdry;
    Sample_ptr wetdry_samps;

    Ugen_ptr gain;
    Sample_ptr gain_samps;

    Ugen_ptr t60m;
    Sample_ptr t60m_samps;

    float fConst1;
    float fConst2;
    float fConst4;
    float fConst6;
    float fConst8;
    float fConst9;
    float fConst10;
    float fConst12;
    float fConst13;
    int iConst15;
    int iConst16;
    int iConst17;
    float fConst19;
    float fConst20;
    int iConst22;
    int iConst23;
    float fConst25;
    float fConst26;
    int iConst28;
    int iConst29;
    float fConst31;
    float fConst32;
    int iConst34;
    int iConst35;
    float fConst37;
    float fConst38;
    int iConst40;
    int iConst41;
    float fConst43;
    float fConst44;
    int iConst46;
    int iConst47;
    float fConst49;
    float fConst50;
    int iConst52;
    int iConst53;
    float fConst55;
    float fConst56;
    int iConst58;
    int iConst59;
    float fConst60;
    float fConst61;

    Zitarev(int id, Ugen_ptr snd_, Ugen_ptr wetdry_, Ugen_ptr gain_, Ugen_ptr t60m_) :
            Ugen(id, 'a', 2) {
        snd = snd_;
        wetdry = wetdry_;
        gain = gain_;
        t60m = t60m_;
        flags = CAN_TERMINATE;
        states.set_size(chans);
        float fConst0 = std::min<float>(1.92e+05f, std::max<float>(1.0f, float(AR)));
        fConst1 = 44.1f / fConst0;
        fConst2 = 1.0f - fConst1;
        float fConst3 = 9424.778f / fConst0;
        fConst4 = (1.0f - fConst3) / (fConst3 + 1.0f);
        float fConst5 = 1979.2034f / fConst0;
        fConst6 = (1.0f - fConst5) / (fConst5 + 1.0f);
        float fConst7 = std::floor(0.210389f * fConst0 + 0.5f);
        fConst8 = (0.0f - 6.9077554f * fConst7) / fConst0;
        fConst9 = std::cos(37699.113f / fConst0);
        fConst10 = std::exp(0.33333334f * fConst8);
        float fConst11 = 1.0f / std::tan(628.31854f / fConst0);
        fConst12 = 1.0f / (fConst11 + 1.0f);
        fConst13 = 1.0f - fConst11;
        float fConst14 = std::floor(0.024421f * fConst0 + 0.5f);
        iConst15 = int(std::min<float>(16384.0f, std::max<float>(0.0f, fConst7 - fConst14)));
        iConst16 = int(std::min<float>(8192.0f, std::max<float>(0.0f, 0.06f * fConst0)));
        iConst17 = int(std::min<float>(2048.0f, std::max<float>(0.0f, fConst14 + -1.0f)));
        float fConst18 = std::floor(0.125f * fConst0 + 0.5f);
        fConst19 = (0.0f - 6.9077554f * fConst18) / fConst0;
        fConst20 = std::exp(0.33333334f * fConst19);
        float fConst21 = std::floor(0.013458f * fConst0 + 0.5f);
        iConst22 = int(std::min<float>(8192.0f, std::max<float>(0.0f, fConst18 - fConst21)));
        iConst23 = int(std::min<float>(1024.0f, std::max<float>(0.0f, fConst21 + -1.0f)));
        float fConst24 = std::floor(0.127837f * fConst0 + 0.5f);
        fConst25 = (0.0f - 6.9077554f * fConst24) / fConst0;
        fConst26 = std::exp(0.33333334f * fConst25);
        float fConst27 = std::floor(0.031604f * fConst0 + 0.5f);
        iConst28 = int(std::min<float>(8192.0f, std::max<float>(0.0f, fConst24 - fConst27)));
        iConst29 = int(std::min<float>(2048.0f, std::max<float>(0.0f, fConst27 + -1.0f)));
        float fConst30 = std::floor(0.174713f * fConst0 + 0.5f);
        fConst31 = (0.0f - 6.9077554f * fConst30) / fConst0;
        fConst32 = std::exp(0.33333334f * fConst31);
        float fConst33 = std::floor(0.022904f * fConst0 + 0.5f);
        iConst34 = int(std::min<float>(8192.0f, std::max<float>(0.0f, fConst30 - fConst33)));
        iConst35 = int(std::min<float>(2048.0f, std::max<float>(0.0f, fConst33 + -1.0f)));
        float fConst36 = std::floor(0.219991f * fConst0 + 0.5f);
        fConst37 = (0.0f - 6.9077554f * fConst36) / fConst0;
        fConst38 = std::exp(0.33333334f * fConst37);
        float fConst39 = std::floor(0.019123f * fConst0 + 0.5f);
        iConst40 = int(std::min<float>(16384.0f, std::max<float>(0.0f, fConst36 - fConst39)));
        iConst41 = int(std::min<float>(1024.0f, std::max<float>(0.0f, fConst39 + -1.0f)));
        float fConst42 = std::floor(0.256891f * fConst0 + 0.5f);
        fConst43 = (0.0f - 6.9077554f * fConst42) / fConst0;
        fConst44 = std::exp(0.33333334f * fConst43);
        float fConst45 = std::floor(0.027333f * fConst0 + 0.5f);
        iConst46 = int(std::min<float>(16384.0f, std::max<float>(0.0f, fConst42 - fConst45)));
        iConst47 = int(std::min<float>(2048.0f, std::max<float>(0.0f, fConst45 + -1.0f)));
        float fConst48 = std::floor(0.192303f * fConst0 + 0.5f);
        fConst49 = (0.0f - 6.9077554f * fConst48) / fConst0;
        fConst50 = std::exp(0.33333334f * fConst49);
        float fConst51 = std::floor(0.029291f * fConst0 + 0.5f);
        iConst52 = int(std::min<float>(8192.0f, std::max<float>(0.0f, fConst48 - fConst51)));
        iConst53 = int(std::min<float>(2048.0f, std::max<float>(0.0f, fConst51 + -1.0f)));
        float fConst54 = std::floor(0.153129f * fConst0 + 0.5f);
        fConst55 = (0.0f - 6.9077554f * fConst54) / fConst0;
        fConst56 = std::exp(0.33333334f * fConst55);
        float fConst57 = std::floor(0.020346f * fConst0 + 0.5f);
        iConst58 = int(std::min<float>(8192.0f, std::max<float>(0.0f, fConst54 - fConst57)));
        iConst59 = int(std::min<float>(1024.0f, std::max<float>(0.0f, fConst57 + -1.0f)));
        fConst60 = 0.0f - std::cos(fConst5) * (fConst6 + 1.0f);
        fConst61 = 0.0f - std::cos(fConst3) * (fConst4 + 1.0f);
        init_snd(snd);
        init_wetdry(wetdry);
        init_gain(gain);
        init_t60m(t60m);
        run_channel = (void (Zitarev::*)(Zitarev_state *)) 0;
        update_run_channel();
    }

    ~Zitarev() {
        snd->unref();
        wetdry->unref();
        gain->unref();
        t60m->unref();
    }

    const char *classname() { return Zitarev_name; }

    void initialize_channel_states() {
        for (int i = 0; i < chans; i++) {
            for (int l0 = 0; l0 < 2; l0 = l0 + 1) {
                states[i].fRec0[l0] = 0.0f;
            }
            states[i].IOTA0 = 0;
            for (int l1 = 0; l1 < 16384; l1 = l1 + 1) {
                states[i].fVec0[l1] = 0.0f;
            }
            for (int l2 = 0; l2 < 2; l2 = l2 + 1) {
                states[i].fRec1[l2] = 0.0f;
            }
            for (int l3 = 0; l3 < 2; l3 = l3 + 1) {
                states[i].fRec15[l3] = 0.0f;
            }
            for (int l4 = 0; l4 < 2; l4 = l4 + 1) {
                states[i].fRec14[l4] = 0.0f;
            }
            for (int l5 = 0; l5 < 32768; l5 = l5 + 1) {
                states[i].fVec1[l5] = 0.0f;
            }
            for (int l6 = 0; l6 < 16384; l6 = l6 + 1) {
                states[i].fVec2[l6] = 0.0f;
            }
            for (int l7 = 0; l7 < 4096; l7 = l7 + 1) {
                states[i].fVec3[l7] = 0.0f;
            }
            for (int l8 = 0; l8 < 2; l8 = l8 + 1) {
                states[i].fRec12[l8] = 0.0f;
            }
            for (int l9 = 0; l9 < 2; l9 = l9 + 1) {
                states[i].fRec19[l9] = 0.0f;
            }
            for (int l10 = 0; l10 < 2; l10 = l10 + 1) {
                states[i].fRec18[l10] = 0.0f;
            }
            for (int l11 = 0; l11 < 16384; l11 = l11 + 1) {
                states[i].fVec4[l11] = 0.0f;
            }
            for (int l12 = 0; l12 < 2048; l12 = l12 + 1) {
                states[i].fVec5[l12] = 0.0f;
            }
            for (int l13 = 0; l13 < 2; l13 = l13 + 1) {
                states[i].fRec16[l13] = 0.0f;
            }
            for (int l14 = 0; l14 < 2; l14 = l14 + 1) {
                states[i].fRec23[l14] = 0.0f;
            }
            for (int l15 = 0; l15 < 2; l15 = l15 + 1) {
                states[i].fRec22[l15] = 0.0f;
            }
            for (int l16 = 0; l16 < 16384; l16 = l16 + 1) {
                states[i].fVec6[l16] = 0.0f;
            }
            for (int l17 = 0; l17 < 4096; l17 = l17 + 1) {
                states[i].fVec7[l17] = 0.0f;
            }
            for (int l18 = 0; l18 < 2; l18 = l18 + 1) {
                states[i].fRec20[l18] = 0.0f;
            }
            for (int l19 = 0; l19 < 2; l19 = l19 + 1) {
                states[i].fRec27[l19] = 0.0f;
            }
            for (int l20 = 0; l20 < 2; l20 = l20 + 1) {
                states[i].fRec26[l20] = 0.0f;
            }
            for (int l21 = 0; l21 < 16384; l21 = l21 + 1) {
                states[i].fVec8[l21] = 0.0f;
            }
            for (int l22 = 0; l22 < 4096; l22 = l22 + 1) {
                states[i].fVec9[l22] = 0.0f;
            }
            for (int l23 = 0; l23 < 2; l23 = l23 + 1) {
                states[i].fRec24[l23] = 0.0f;
            }
            for (int l24 = 0; l24 < 2; l24 = l24 + 1) {
                states[i].fRec31[l24] = 0.0f;
            }
            for (int l25 = 0; l25 < 2; l25 = l25 + 1) {
                states[i].fRec30[l25] = 0.0f;
            }
            for (int l26 = 0; l26 < 32768; l26 = l26 + 1) {
                states[i].fVec10[l26] = 0.0f;
            }
            for (int l27 = 0; l27 < 2048; l27 = l27 + 1) {
                states[i].fVec11[l27] = 0.0f;
            }
            for (int l28 = 0; l28 < 2; l28 = l28 + 1) {
                states[i].fRec28[l28] = 0.0f;
            }
            for (int l29 = 0; l29 < 2; l29 = l29 + 1) {
                states[i].fRec35[l29] = 0.0f;
            }
            for (int l30 = 0; l30 < 2; l30 = l30 + 1) {
                states[i].fRec34[l30] = 0.0f;
            }
            for (int l31 = 0; l31 < 32768; l31 = l31 + 1) {
                states[i].fVec12[l31] = 0.0f;
            }
            for (int l32 = 0; l32 < 4096; l32 = l32 + 1) {
                states[i].fVec13[l32] = 0.0f;
            }
            for (int l33 = 0; l33 < 2; l33 = l33 + 1) {
                states[i].fRec32[l33] = 0.0f;
            }
            for (int l34 = 0; l34 < 2; l34 = l34 + 1) {
                states[i].fRec39[l34] = 0.0f;
            }
            for (int l35 = 0; l35 < 2; l35 = l35 + 1) {
                states[i].fRec38[l35] = 0.0f;
            }
            for (int l36 = 0; l36 < 16384; l36 = l36 + 1) {
                states[i].fVec14[l36] = 0.0f;
            }
            for (int l37 = 0; l37 < 4096; l37 = l37 + 1) {
                states[i].fVec15[l37] = 0.0f;
            }
            for (int l38 = 0; l38 < 2; l38 = l38 + 1) {
                states[i].fRec36[l38] = 0.0f;
            }
            for (int l39 = 0; l39 < 2; l39 = l39 + 1) {
                states[i].fRec43[l39] = 0.0f;
            }
            for (int l40 = 0; l40 < 2; l40 = l40 + 1) {
                states[i].fRec42[l40] = 0.0f;
            }
            for (int l41 = 0; l41 < 16384; l41 = l41 + 1) {
                states[i].fVec16[l41] = 0.0f;
            }
            for (int l42 = 0; l42 < 2048; l42 = l42 + 1) {
                states[i].fVec17[l42] = 0.0f;
            }
            for (int l43 = 0; l43 < 2; l43 = l43 + 1) {
                states[i].fRec40[l43] = 0.0f;
            }
            for (int l44 = 0; l44 < 3; l44 = l44 + 1) {
                states[i].fRec4[l44] = 0.0f;
            }
            for (int l45 = 0; l45 < 3; l45 = l45 + 1) {
                states[i].fRec5[l45] = 0.0f;
            }
            for (int l46 = 0; l46 < 3; l46 = l46 + 1) {
                states[i].fRec6[l46] = 0.0f;
            }
            for (int l47 = 0; l47 < 3; l47 = l47 + 1) {
                states[i].fRec7[l47] = 0.0f;
            }
            for (int l48 = 0; l48 < 3; l48 = l48 + 1) {
                states[i].fRec8[l48] = 0.0f;
            }
            for (int l49 = 0; l49 < 3; l49 = l49 + 1) {
                states[i].fRec9[l49] = 0.0f;
            }
            for (int l50 = 0; l50 < 3; l50 = l50 + 1) {
                states[i].fRec10[l50] = 0.0f;
            }
            for (int l51 = 0; l51 < 3; l51 = l51 + 1) {
                states[i].fRec11[l51] = 0.0f;
            }
            for (int l52 = 0; l52 < 3; l52 = l52 + 1) {
                states[i].fRec3[l52] = 0.0f;
            }
            for (int l53 = 0; l53 < 3; l53 = l53 + 1) {
                states[i].fRec2[l53] = 0.0f;
            }
            for (int l54 = 0; l54 < 3; l54 = l54 + 1) {
                states[i].fRec45[l54] = 0.0f;
            }
            for (int l55 = 0; l55 < 3; l55 = l55 + 1) {
                states[i].fRec44[l55] = 0.0f;
            }
        }
    }

    void update_run_channel() {
        // initialize run_channel based on input types
        void (Zitarev::*new_run_channel)(Zitarev_state *state);
            if (snd->rate == 'b') {
                snd = new Upsample(-1, snd->chans, snd);
            }
            if (wetdry->rate == 'a') {
                wetdry = new Dnsampleb(-1, wetdry->chans, wetdry, LOWPASS500);
            }
            if (gain->rate == 'a') {
                gain = new Dnsampleb(-1, gain->chans, gain, LOWPASS500);
            }
            if (t60m->rate == 'a') {
                t60m = new Dnsampleb(-1, t60m->chans, t60m, LOWPASS500);
            }
            new_run_channel = &Zitarev::chan_abbb_a;
        if (new_run_channel != run_channel) {
            initialize_channel_states();
            run_channel = new_run_channel;
        }
    }

    void print_sources(int indent, bool print_flag) {
        snd->print_tree(indent, print_flag, "snd");
        wetdry->print_tree(indent, print_flag, "wetdry");
        gain->print_tree(indent, print_flag, "gain");
        t60m->print_tree(indent, print_flag, "t60m");
    }

    void repl_snd(Ugen_ptr ugen) {
        snd->unref();
        init_snd(ugen);
        update_run_channel();
    }

    void repl_wetdry(Ugen_ptr ugen) {
        wetdry->unref();
        init_wetdry(ugen);
        update_run_channel();
    }

    void repl_gain(Ugen_ptr ugen) {
        gain->unref();
        init_gain(ugen);
        update_run_channel();
    }

    void repl_t60m(Ugen_ptr ugen) {
        t60m->unref();
        init_t60m(ugen);
        update_run_channel();
    }

    void set_snd(int chan, float f) {
        snd->const_set(chan, f, "Zitarev::set_snd");
    }

    void set_wetdry(int chan, float f) {
        wetdry->const_set(chan, f, "Zitarev::set_wetdry");
    }

    void set_gain(int chan, float f) {
        gain->const_set(chan, f, "Zitarev::set_gain");
    }

    void set_t60m(int chan, float f) {
        t60m->const_set(chan, f, "Zitarev::set_t60m");
    }

    void init_snd(Ugen_ptr ugen) { init_param(ugen, snd, &snd_stride); }

    void init_wetdry(Ugen_ptr ugen) { init_param(ugen, wetdry, NULL); }

    void init_gain(Ugen_ptr ugen) { init_param(ugen, gain, NULL); }

    void init_t60m(Ugen_ptr ugen) { init_param(ugen, t60m, NULL); }

    void chan_abbb_a(Zitarev_state *state) {
        FAUSTFLOAT* input0 = snd_samps;
        FAUSTFLOAT* input1 = snd_samps + snd_stride;
        FAUSTFLOAT* output0 = out_samps;
        FAUSTFLOAT* output1 = out_samps + BL;
        float fSlow0 = fConst1 * std::pow(1e+01f, 0.05f * float(gain_samps[0]));
        float fSlow1 = fConst1 * float(wetdry_samps[0]);
        float fSlow2 = float(t60m_samps[0]);
        float fSlow3 = std::exp(fConst8 / fSlow2);
        float fSlow4 = Zitarev_faustpower2_f(fSlow3);
        float fSlow5 = 1.0f - fConst9 * fSlow4;
        float fSlow6 = 1.0f - fSlow4;
        float fSlow7 = std::sqrt(std::max<float>(0.0f, Zitarev_faustpower2_f(fSlow5) / Zitarev_faustpower2_f(fSlow6) + -1.0f));
        float fSlow8 = fSlow5 / fSlow6;
        float fSlow9 = fSlow3 * (fSlow7 + (1.0f - fSlow8));
        float fSlow10 = fConst10 / fSlow3 + -1.0f;
        float fSlow11 = fSlow8 - fSlow7;
        float fSlow12 = std::exp(fConst19 / fSlow2);
        float fSlow13 = Zitarev_faustpower2_f(fSlow12);
        float fSlow14 = 1.0f - fConst9 * fSlow13;
        float fSlow15 = 1.0f - fSlow13;
        float fSlow16 = std::sqrt(std::max<float>(0.0f, Zitarev_faustpower2_f(fSlow14) / Zitarev_faustpower2_f(fSlow15) + -1.0f));
        float fSlow17 = fSlow14 / fSlow15;
        float fSlow18 = fSlow12 * (fSlow16 + (1.0f - fSlow17));
        float fSlow19 = fConst20 / fSlow12 + -1.0f;
        float fSlow20 = fSlow17 - fSlow16;
        float fSlow21 = std::exp(fConst25 / fSlow2);
        float fSlow22 = Zitarev_faustpower2_f(fSlow21);
        float fSlow23 = 1.0f - fConst9 * fSlow22;
        float fSlow24 = 1.0f - fSlow22;
        float fSlow25 = std::sqrt(std::max<float>(0.0f, Zitarev_faustpower2_f(fSlow23) / Zitarev_faustpower2_f(fSlow24) + -1.0f));
        float fSlow26 = fSlow23 / fSlow24;
        float fSlow27 = fSlow21 * (fSlow25 + (1.0f - fSlow26));
        float fSlow28 = fConst26 / fSlow21 + -1.0f;
        float fSlow29 = fSlow26 - fSlow25;
        float fSlow30 = std::exp(fConst31 / fSlow2);
        float fSlow31 = Zitarev_faustpower2_f(fSlow30);
        float fSlow32 = 1.0f - fConst9 * fSlow31;
        float fSlow33 = 1.0f - fSlow31;
        float fSlow34 = std::sqrt(std::max<float>(0.0f, Zitarev_faustpower2_f(fSlow32) / Zitarev_faustpower2_f(fSlow33) + -1.0f));
        float fSlow35 = fSlow32 / fSlow33;
        float fSlow36 = fSlow30 * (fSlow34 + (1.0f - fSlow35));
        float fSlow37 = fConst32 / fSlow30 + -1.0f;
        float fSlow38 = fSlow35 - fSlow34;
        float fSlow39 = std::exp(fConst37 / fSlow2);
        float fSlow40 = Zitarev_faustpower2_f(fSlow39);
        float fSlow41 = 1.0f - fConst9 * fSlow40;
        float fSlow42 = 1.0f - fSlow40;
        float fSlow43 = std::sqrt(std::max<float>(0.0f, Zitarev_faustpower2_f(fSlow41) / Zitarev_faustpower2_f(fSlow42) + -1.0f));
        float fSlow44 = fSlow41 / fSlow42;
        float fSlow45 = fSlow39 * (fSlow43 + (1.0f - fSlow44));
        float fSlow46 = fConst38 / fSlow39 + -1.0f;
        float fSlow47 = fSlow44 - fSlow43;
        float fSlow48 = std::exp(fConst43 / fSlow2);
        float fSlow49 = Zitarev_faustpower2_f(fSlow48);
        float fSlow50 = 1.0f - fConst9 * fSlow49;
        float fSlow51 = 1.0f - fSlow49;
        float fSlow52 = std::sqrt(std::max<float>(0.0f, Zitarev_faustpower2_f(fSlow50) / Zitarev_faustpower2_f(fSlow51) + -1.0f));
        float fSlow53 = fSlow50 / fSlow51;
        float fSlow54 = fSlow48 * (fSlow52 + (1.0f - fSlow53));
        float fSlow55 = fConst44 / fSlow48 + -1.0f;
        float fSlow56 = fSlow53 - fSlow52;
        float fSlow57 = std::exp(fConst49 / fSlow2);
        float fSlow58 = Zitarev_faustpower2_f(fSlow57);
        float fSlow59 = 1.0f - fConst9 * fSlow58;
        float fSlow60 = 1.0f - fSlow58;
        float fSlow61 = std::sqrt(std::max<float>(0.0f, Zitarev_faustpower2_f(fSlow59) / Zitarev_faustpower2_f(fSlow60) + -1.0f));
        float fSlow62 = fSlow59 / fSlow60;
        float fSlow63 = fSlow57 * (fSlow61 + (1.0f - fSlow62));
        float fSlow64 = fConst50 / fSlow57 + -1.0f;
        float fSlow65 = fSlow62 - fSlow61;
        float fSlow66 = std::exp(fConst55 / fSlow2);
        float fSlow67 = Zitarev_faustpower2_f(fSlow66);
        float fSlow68 = 1.0f - fConst9 * fSlow67;
        float fSlow69 = 1.0f - fSlow67;
        float fSlow70 = std::sqrt(std::max<float>(0.0f, Zitarev_faustpower2_f(fSlow68) / Zitarev_faustpower2_f(fSlow69) + -1.0f));
        float fSlow71 = fSlow68 / fSlow69;
        float fSlow72 = fSlow66 * (fSlow70 + (1.0f - fSlow71));
        float fSlow73 = fConst56 / fSlow66 + -1.0f;
        float fSlow74 = fSlow71 - fSlow70;
        for (int i0 = 0; i0 < BL; i0 = i0 + 1) {
            state->fRec0[0] = fSlow0 + fConst2 * state->fRec0[1];
            float fTemp0 = float(input0[i0]);
            state->fVec0[state->IOTA0 & 16383] = fTemp0;
            state->fRec1[0] = fSlow1 + fConst2 * state->fRec1[1];
            float fTemp1 = state->fRec1[0] + 1.0f;
            float fTemp2 = 1.0f - 0.5f * fTemp1;
            state->fRec15[0] = 0.0f - fConst12 * (fConst13 * state->fRec15[1] - (state->fRec5[1] + state->fRec5[2]));
            state->fRec14[0] = fSlow9 * (state->fRec5[1] + fSlow10 * state->fRec15[0]) + fSlow11 * state->fRec14[1];
            state->fVec1[state->IOTA0 & 32767] = 0.35355338f * state->fRec14[0] + 1e-20f;
            float fTemp3 = float(input1[i0]);
            state->fVec2[state->IOTA0 & 16383] = fTemp3;
            float fTemp4 = 0.3f * state->fVec2[(state->IOTA0 - iConst16) & 16383];
            float fTemp5 = 0.6f * state->fRec12[1] + state->fVec1[(state->IOTA0 - iConst15) & 32767] + fTemp4;
            state->fVec3[state->IOTA0 & 4095] = fTemp5;
            state->fRec12[0] = state->fVec3[(state->IOTA0 - iConst17) & 4095];
            float fRec13 = 0.0f - 0.6f * fTemp5;
            state->fRec19[0] = 0.0f - fConst12 * (fConst13 * state->fRec19[1] - (state->fRec10[1] + state->fRec10[2]));
            state->fRec18[0] = fSlow18 * (state->fRec10[1] + fSlow19 * state->fRec19[0]) + fSlow20 * state->fRec18[1];
            state->fVec4[state->IOTA0 & 16383] = 0.35355338f * state->fRec18[0] + 1e-20f;
            float fTemp6 = 0.3f * state->fVec0[(state->IOTA0 - iConst16) & 16383];
            float fTemp7 = state->fVec4[(state->IOTA0 - iConst22) & 16383] - (fTemp6 + 0.6f * state->fRec16[1]);
            state->fVec5[state->IOTA0 & 2047] = fTemp7;
            state->fRec16[0] = state->fVec5[(state->IOTA0 - iConst23) & 2047];
            float fRec17 = 0.6f * fTemp7;
            state->fRec23[0] = 0.0f - fConst12 * (fConst13 * state->fRec23[1] - (state->fRec6[1] + state->fRec6[2]));
            state->fRec22[0] = fSlow27 * (state->fRec6[1] + fSlow28 * state->fRec23[0]) + fSlow29 * state->fRec22[1];
            state->fVec6[state->IOTA0 & 16383] = 0.35355338f * state->fRec22[0] + 1e-20f;
            float fTemp8 = state->fVec6[(state->IOTA0 - iConst28) & 16383] - (fTemp6 + 0.6f * state->fRec20[1]);
            state->fVec7[state->IOTA0 & 4095] = fTemp8;
            state->fRec20[0] = state->fVec7[(state->IOTA0 - iConst29) & 4095];
            float fRec21 = 0.6f * fTemp8;
            state->fRec27[0] = 0.0f - fConst12 * (fConst13 * state->fRec27[1] - (state->fRec8[1] + state->fRec8[2]));
            state->fRec26[0] = fSlow36 * (state->fRec8[1] + fSlow37 * state->fRec27[0]) + fSlow38 * state->fRec26[1];
            state->fVec8[state->IOTA0 & 16383] = 0.35355338f * state->fRec26[0] + 1e-20f;
            float fTemp9 = fTemp6 + state->fVec8[(state->IOTA0 - iConst34) & 16383] - 0.6f * state->fRec24[1];
            state->fVec9[state->IOTA0 & 4095] = fTemp9;
            state->fRec24[0] = state->fVec9[(state->IOTA0 - iConst35) & 4095];
            float fRec25 = 0.6f * fTemp9;
            state->fRec31[0] = 0.0f - fConst12 * (fConst13 * state->fRec31[1] - (state->fRec11[1] + state->fRec11[2]));
            state->fRec30[0] = fSlow45 * (state->fRec11[1] + fSlow46 * state->fRec31[0]) + fSlow47 * state->fRec30[1];
            state->fVec10[state->IOTA0 & 32767] = 0.35355338f * state->fRec30[0] + 1e-20f;
            float fTemp10 = 0.6f * state->fRec28[1] + state->fVec10[(state->IOTA0 - iConst40) & 32767] - fTemp4;
            state->fVec11[state->IOTA0 & 2047] = fTemp10;
            state->fRec28[0] = state->fVec11[(state->IOTA0 - iConst41) & 2047];
            float fRec29 = 0.0f - 0.6f * fTemp10;
            state->fRec35[0] = 0.0f - fConst12 * (fConst13 * state->fRec35[1] - (state->fRec7[1] + state->fRec7[2]));
            state->fRec34[0] = fSlow54 * (state->fRec7[1] + fSlow55 * state->fRec35[0]) + fSlow56 * state->fRec34[1];
            state->fVec12[state->IOTA0 & 32767] = 0.35355338f * state->fRec34[0] + 1e-20f;
            float fTemp11 = 0.6f * state->fRec32[1] + state->fVec12[(state->IOTA0 - iConst46) & 32767] - fTemp4;
            state->fVec13[state->IOTA0 & 4095] = fTemp11;
            state->fRec32[0] = state->fVec13[(state->IOTA0 - iConst47) & 4095];
            float fRec33 = 0.0f - 0.6f * fTemp11;
            state->fRec39[0] = 0.0f - fConst12 * (fConst13 * state->fRec39[1] - (state->fRec9[1] + state->fRec9[2]));
            state->fRec38[0] = fSlow63 * (state->fRec9[1] + fSlow64 * state->fRec39[0]) + fSlow65 * state->fRec38[1];
            state->fVec14[state->IOTA0 & 16383] = 0.35355338f * state->fRec38[0] + 1e-20f;
            float fTemp12 = state->fVec14[(state->IOTA0 - iConst52) & 16383] + fTemp4 + 0.6f * state->fRec36[1];
            state->fVec15[state->IOTA0 & 4095] = fTemp12;
            state->fRec36[0] = state->fVec15[(state->IOTA0 - iConst53) & 4095];
            float fRec37 = 0.0f - 0.6f * fTemp12;
            state->fRec43[0] = 0.0f - fConst12 * (fConst13 * state->fRec43[1] - (state->fRec4[1] + state->fRec4[2]));
            state->fRec42[0] = fSlow72 * (state->fRec4[1] + fSlow73 * state->fRec43[0]) + fSlow74 * state->fRec42[1];
            state->fVec16[state->IOTA0 & 16383] = 0.35355338f * state->fRec42[0] + 1e-20f;
            float fTemp13 = state->fVec16[(state->IOTA0 - iConst58) & 16383] + fTemp6 - 0.6f * state->fRec40[1];
            state->fVec17[state->IOTA0 & 2047] = fTemp13;
            state->fRec40[0] = state->fVec17[(state->IOTA0 - iConst59) & 2047];
            float fRec41 = 0.6f * fTemp13;
            float fTemp14 = fRec41 + fRec25;
            float fTemp15 = fRec17 + fRec21 + fTemp14;
            state->fRec4[0] = state->fRec12[1] + state->fRec16[1] + state->fRec20[1] + state->fRec24[1] + state->fRec28[1] + state->fRec32[1] + state->fRec36[1] + state->fRec40[1] + fRec29 + fRec33 + fRec37 + fRec13 + fTemp15;
            state->fRec5[0] = state->fRec16[1] + state->fRec20[1] + state->fRec24[1] + state->fRec40[1] + fTemp15 - (state->fRec12[1] + state->fRec28[1] + state->fRec32[1] + state->fRec36[1] + fRec29 + fRec33 + fRec13 + fRec37);
            float fTemp16 = fRec21 + fRec17;
            state->fRec6[0] = state->fRec12[1] + state->fRec24[1] + state->fRec36[1] + state->fRec40[1] + fRec37 + fRec13 + fTemp14 - (state->fRec16[1] + state->fRec20[1] + state->fRec28[1] + state->fRec32[1] + fRec29 + fRec33 + fTemp16);
            state->fRec7[0] = state->fRec24[1] + state->fRec28[1] + state->fRec32[1] + state->fRec40[1] + fRec29 + fRec33 + fTemp14 - (state->fRec12[1] + state->fRec16[1] + state->fRec20[1] + state->fRec36[1] + fRec37 + fRec13 + fTemp16);
            float fTemp17 = fRec41 + fRec21;
            float fTemp18 = fRec25 + fRec17;
            state->fRec8[0] = state->fRec12[1] + state->fRec20[1] + state->fRec32[1] + state->fRec40[1] + fRec33 + fRec13 + fTemp17 - (state->fRec16[1] + state->fRec24[1] + state->fRec28[1] + state->fRec36[1] + fRec29 + fRec37 + fTemp18);
            state->fRec9[0] = state->fRec20[1] + state->fRec28[1] + state->fRec36[1] + state->fRec40[1] + fRec29 + fRec37 + fTemp17 - (state->fRec12[1] + state->fRec16[1] + state->fRec24[1] + state->fRec32[1] + fRec33 + fRec13 + fTemp18);
            float fTemp19 = fRec41 + fRec17;
            float fTemp20 = fRec25 + fRec21;
            state->fRec10[0] = state->fRec12[1] + state->fRec16[1] + state->fRec28[1] + state->fRec40[1] + fRec29 + fRec13 + fTemp19 - (state->fRec20[1] + state->fRec24[1] + state->fRec32[1] + state->fRec36[1] + fRec33 + fRec37 + fTemp20);
            state->fRec11[0] = state->fRec16[1] + state->fRec32[1] + state->fRec36[1] + state->fRec40[1] + fRec33 + fRec37 + fTemp19 - (state->fRec12[1] + state->fRec20[1] + state->fRec24[1] + state->fRec28[1] + fRec29 + fRec13 + fTemp20);
            float fTemp21 = 0.37f * (state->fRec5[0] + state->fRec6[0]);
            float fTemp22 = fConst60 * state->fRec3[1];
            state->fRec3[0] = fTemp21 - (fTemp22 + fConst6 * state->fRec3[2]);
            float fTemp23 = fConst6 * state->fRec3[0];
            float fTemp24 = 0.5f * (fTemp23 + state->fRec3[2] + fTemp21 + fTemp22 + (fTemp23 + fTemp22 + state->fRec3[2] - fTemp21));
            float fTemp25 = fConst61 * state->fRec2[1];
            state->fRec2[0] = fTemp24 - (fTemp25 + fConst4 * state->fRec2[2]);
            float fTemp26 = fConst4 * state->fRec2[0];
            output0[i0] = FAUSTFLOAT(state->fRec0[0] * (fTemp0 * fTemp2 + 0.25f * fTemp1 * (fTemp26 + state->fRec2[2] + fTemp24 + fTemp25 + (fTemp26 + fTemp25 + state->fRec2[2] - fTemp24))));
            float fTemp27 = 0.37f * (state->fRec5[0] - state->fRec6[0]);
            float fTemp28 = fConst60 * state->fRec45[1];
            state->fRec45[0] = fTemp27 - (fTemp28 + fConst6 * state->fRec45[2]);
            float fTemp29 = fConst6 * state->fRec45[0];
            float fTemp30 = 0.5f * (fTemp29 + state->fRec45[2] + fTemp27 + fTemp28 + (fTemp29 + fTemp28 + state->fRec45[2] - fTemp27));
            float fTemp31 = fConst61 * state->fRec44[1];
            state->fRec44[0] = fTemp30 - (fTemp31 + fConst4 * state->fRec44[2]);
            float fTemp32 = fConst4 * state->fRec44[0];
            output1[i0] = FAUSTFLOAT(state->fRec0[0] * (fTemp3 * fTemp2 + 0.25f * fTemp1 * (fTemp32 + state->fRec44[2] + fTemp30 + fTemp31 + (fTemp32 + fTemp31 + state->fRec44[2] - fTemp30))));
            state->fRec0[1] = state->fRec0[0];
            state->IOTA0 = state->IOTA0 + 1;
            state->fRec1[1] = state->fRec1[0];
            state->fRec15[1] = state->fRec15[0];
            state->fRec14[1] = state->fRec14[0];
            state->fRec12[1] = state->fRec12[0];
            state->fRec19[1] = state->fRec19[0];
            state->fRec18[1] = state->fRec18[0];
            state->fRec16[1] = state->fRec16[0];
            state->fRec23[1] = state->fRec23[0];
            state->fRec22[1] = state->fRec22[0];
            state->fRec20[1] = state->fRec20[0];
            state->fRec27[1] = state->fRec27[0];
            state->fRec26[1] = state->fRec26[0];
            state->fRec24[1] = state->fRec24[0];
            state->fRec31[1] = state->fRec31[0];
            state->fRec30[1] = state->fRec30[0];
            state->fRec28[1] = state->fRec28[0];
            state->fRec35[1] = state->fRec35[0];
            state->fRec34[1] = state->fRec34[0];
            state->fRec32[1] = state->fRec32[0];
            state->fRec39[1] = state->fRec39[0];
            state->fRec38[1] = state->fRec38[0];
            state->fRec36[1] = state->fRec36[0];
            state->fRec43[1] = state->fRec43[0];
            state->fRec42[1] = state->fRec42[0];
            state->fRec40[1] = state->fRec40[0];
            state->fRec4[2] = state->fRec4[1];
            state->fRec4[1] = state->fRec4[0];
            state->fRec5[2] = state->fRec5[1];
            state->fRec5[1] = state->fRec5[0];
            state->fRec6[2] = state->fRec6[1];
            state->fRec6[1] = state->fRec6[0];
            state->fRec7[2] = state->fRec7[1];
            state->fRec7[1] = state->fRec7[0];
            state->fRec8[2] = state->fRec8[1];
            state->fRec8[1] = state->fRec8[0];
            state->fRec9[2] = state->fRec9[1];
            state->fRec9[1] = state->fRec9[0];
            state->fRec10[2] = state->fRec10[1];
            state->fRec10[1] = state->fRec10[0];
            state->fRec11[2] = state->fRec11[1];
            state->fRec11[1] = state->fRec11[0];
            state->fRec3[2] = state->fRec3[1];
            state->fRec3[1] = state->fRec3[0];
            state->fRec2[2] = state->fRec2[1];
            state->fRec2[1] = state->fRec2[0];
            state->fRec45[2] = state->fRec45[1];
            state->fRec45[1] = state->fRec45[0];
            state->fRec44[2] = state->fRec44[1];
            state->fRec44[1] = state->fRec44[0];
        }
    }

    void real_run() {
        snd_samps = snd->run(current_block);  // update input
        wetdry_samps = wetdry->run(current_block);  // update input
        gain_samps = gain->run(current_block);  // update input
        t60m_samps = t60m->run(current_block);  // update input
        Zitarev_state *state = &states[0];
        (this->*run_channel)(state);
    }
};
#endif
