/* zitarev -- unit generator for arco
 *
 * generated by f2a.py
 */

/*------------- BEGIN FAUST PREAMBLE -------------*/

/* ------------------------------------------------------------
name: "zitarev"
Code generated with Faust 2.75.7 (https://faust.grame.fr)
Compilation options: -lang cpp -light -ct 1 -cn Zitarev -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0
------------------------------------------------------------ */

#ifndef  __Zitarev_H__
#define  __Zitarev_H__

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>
#include <cstdint>
#include <math.h>

#ifndef FAUSTCLASS 
#define FAUSTCLASS Zitarev
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

#if defined(_WIN32)
#define RESTRICT __restrict
#else
#define RESTRICT __restrict__
#endif

static float Zitarev_faustpower2_f(float value) {
    return value * value;
}
/*-------------- END FAUST PREAMBLE --------------*/

extern const char *Zitarev_name;

class Zitarev : public Ugen {
public:
    struct Zitarev_state {
        FAUSTFLOAT fEntry0;
        float fRec0[2];
        int IOTA0;
        float fVec0[16384];
        FAUSTFLOAT fEntry1;
        float fRec1[2];
        FAUSTFLOAT fEntry2;
        float fRec14[2];
        float fVec1[32768];
        float fVec2[16384];
        float fVec3[4096];
        float fRec12[2];
        float fRec17[2];
        float fVec4[16384];
        float fVec5[4096];
        float fRec15[2];
        float fRec20[2];
        float fVec6[16384];
        float fVec7[2048];
        float fRec18[2];
        float fRec23[2];
        float fVec8[16384];
        float fVec9[2048];
        float fRec21[2];
        float fRec26[2];
        float fVec10[16384];
        float fVec11[4096];
        float fRec24[2];
        float fRec29[2];
        float fVec12[32768];
        float fVec13[2048];
        float fRec27[2];
        float fRec32[2];
        float fVec14[16384];
        float fVec15[4096];
        float fRec30[2];
        float fRec35[2];
        float fVec16[32768];
        float fVec17[4096];
        float fRec33[2];
        float fRec4[2];
        float fRec5[2];
        float fRec6[2];
        float fRec7[2];
        float fRec8[2];
        float fRec9[2];
        float fRec10[2];
        float fRec11[2];
        float fRec3[3];
        float fRec2[3];
        float fRec37[3];
        float fRec36[3];
    };
    Vec<Zitarev_state> states;
    void (Zitarev::*run_channel)(Zitarev_state *state);

    Ugen_ptr input;
    int input_stride;
    Sample_ptr input_samps;

    Ugen_ptr wet;
    int wet_stride;
    Sample_ptr wet_samps;

    Ugen_ptr gain;
    int gain_stride;
    Sample_ptr gain_samps;

    Ugen_ptr rt60;
    int rt60_stride;
    Sample_ptr rt60_samps;

    float fConst0;
    float fConst1;
    float fConst2;
    float fConst3;
    float fConst4;
    float fConst5;
    float fConst6;
    float fConst7;
    float fConst8;
    int iConst9;
    int iConst10;
    int iConst11;
    float fConst12;
    float fConst13;
    float fConst14;
    int iConst15;
    int iConst16;
    float fConst17;
    float fConst18;
    float fConst19;
    int iConst20;
    int iConst21;
    float fConst22;
    float fConst23;
    float fConst24;
    int iConst25;
    int iConst26;
    float fConst27;
    float fConst28;
    float fConst29;
    int iConst30;
    int iConst31;
    float fConst32;
    float fConst33;
    float fConst34;
    int iConst35;
    int iConst36;
    float fConst37;
    float fConst38;
    float fConst39;
    int iConst40;
    int iConst41;
    float fConst42;
    float fConst43;
    float fConst44;
    int iConst45;
    int iConst46;
    float fConst47;
    float fConst48;
    float fConst49;
    float fConst50;
    float fConst51;
    float fConst52;

    Zitarev(int id, Ugen_ptr input_, Ugen_ptr wet_, Ugen_ptr gain_, Ugen_ptr rt60_) :
            Ugen(id, 'a', 2) {
        input = input_;
        wet = wet_;
        gain = gain_;
        rt60 = rt60_;
        flags = CAN_TERMINATE;
        states.set_size(chans);
        fConst0 = std::min<float>(1.92e+05f, std::max<float>(1.0f, float(AR)));
        fConst1 = 44.1f / fConst0;
        fConst2 = 1.0f - fConst1;
        fConst3 = 1979.2034f / fConst0;
        fConst4 = (1.0f - fConst3) / (fConst3 + 1.0f);
        fConst5 = std::floor(0.256891f * fConst0 + 0.5f);
        fConst6 = 6.9077554f * (fConst5 / fConst0);
        fConst7 = std::cos(37699.113f / fConst0);
        fConst8 = std::floor(0.027333f * fConst0 + 0.5f);
        iConst9 = int(std::min<float>(16384.0f, std::max<float>(0.0f, fConst5 - fConst8)));
        iConst10 = int(std::min<float>(8192.0f, std::max<float>(0.0f, 0.06f * fConst0)));
        iConst11 = int(std::min<float>(2048.0f, std::max<float>(0.0f, fConst8 + -1.0f)));
        fConst12 = std::floor(0.174713f * fConst0 + 0.5f);
        fConst13 = 6.9077554f * (fConst12 / fConst0);
        fConst14 = std::floor(0.022904f * fConst0 + 0.5f);
        iConst15 = int(std::min<float>(8192.0f, std::max<float>(0.0f, fConst12 - fConst14)));
        iConst16 = int(std::min<float>(2048.0f, std::max<float>(0.0f, fConst14 + -1.0f)));
        fConst17 = std::floor(0.153129f * fConst0 + 0.5f);
        fConst18 = 6.9077554f * (fConst17 / fConst0);
        fConst19 = std::floor(0.020346f * fConst0 + 0.5f);
        iConst20 = int(std::min<float>(8192.0f, std::max<float>(0.0f, fConst17 - fConst19)));
        iConst21 = int(std::min<float>(1024.0f, std::max<float>(0.0f, fConst19 + -1.0f)));
        fConst22 = std::floor(0.125f * fConst0 + 0.5f);
        fConst23 = 6.9077554f * (fConst22 / fConst0);
        fConst24 = std::floor(0.013458f * fConst0 + 0.5f);
        iConst25 = int(std::min<float>(8192.0f, std::max<float>(0.0f, fConst22 - fConst24)));
        iConst26 = int(std::min<float>(1024.0f, std::max<float>(0.0f, fConst24 + -1.0f)));
        fConst27 = std::floor(0.127837f * fConst0 + 0.5f);
        fConst28 = 6.9077554f * (fConst27 / fConst0);
        fConst29 = std::floor(0.031604f * fConst0 + 0.5f);
        iConst30 = int(std::min<float>(8192.0f, std::max<float>(0.0f, fConst27 - fConst29)));
        iConst31 = int(std::min<float>(2048.0f, std::max<float>(0.0f, fConst29 + -1.0f)));
        fConst32 = std::floor(0.219991f * fConst0 + 0.5f);
        fConst33 = 6.9077554f * (fConst32 / fConst0);
        fConst34 = std::floor(0.019123f * fConst0 + 0.5f);
        iConst35 = int(std::min<float>(16384.0f, std::max<float>(0.0f, fConst32 - fConst34)));
        iConst36 = int(std::min<float>(1024.0f, std::max<float>(0.0f, fConst34 + -1.0f)));
        fConst37 = std::floor(0.192303f * fConst0 + 0.5f);
        fConst38 = 6.9077554f * (fConst37 / fConst0);
        fConst39 = std::floor(0.029291f * fConst0 + 0.5f);
        iConst40 = int(std::min<float>(8192.0f, std::max<float>(0.0f, fConst37 - fConst39)));
        iConst41 = int(std::min<float>(2048.0f, std::max<float>(0.0f, fConst39 + -1.0f)));
        fConst42 = std::floor(0.210389f * fConst0 + 0.5f);
        fConst43 = 6.9077554f * (fConst42 / fConst0);
        fConst44 = std::floor(0.024421f * fConst0 + 0.5f);
        iConst45 = int(std::min<float>(16384.0f, std::max<float>(0.0f, fConst42 - fConst44)));
        iConst46 = int(std::min<float>(2048.0f, std::max<float>(0.0f, fConst44 + -1.0f)));
        fConst47 = std::cos(fConst3) * (fConst4 + 1.0f);
        fConst48 = 9424.778f / fConst0;
        fConst49 = (1.0f - fConst48) / (fConst48 + 1.0f);
        fConst50 = (fConst49 + 1.0f) * std::cos(fConst48);
        fConst51 = 2.0f * fConst49;
        fConst52 = 2.0f * fConst50;
        init_input(input);
        init_wet(wet);
        init_gain(gain);
        init_rt60(rt60);
        run_channel = (void (Zitarev::*)(Zitarev_state *)) 0;
        update_run_channel();
    }

    ~Zitarev() {
        input->unref();
        wet->unref();
        gain->unref();
        rt60->unref();
    }

    const char *classname() { return Zitarev_name; }

    void initialize_channel_states() {
        for (int i = 0; i < chans; i++) {
            for (int l0 = 0; l0 < 2; l0 = l0 + 1) {
                states[i].fRec0[l0] = 0.0f;
            }
            states[i].IOTA0 = 0;
            for (int l1 = 0; l1 < 16384; l1 = l1 + 1) {
                states[i].fVec0[l1] = 0.0f;
            }
            for (int l2 = 0; l2 < 2; l2 = l2 + 1) {
                states[i].fRec1[l2] = 0.0f;
            }
            for (int l3 = 0; l3 < 2; l3 = l3 + 1) {
                states[i].fRec14[l3] = 0.0f;
            }
            for (int l4 = 0; l4 < 32768; l4 = l4 + 1) {
                states[i].fVec1[l4] = 0.0f;
            }
            for (int l5 = 0; l5 < 16384; l5 = l5 + 1) {
                states[i].fVec2[l5] = 0.0f;
            }
            for (int l6 = 0; l6 < 4096; l6 = l6 + 1) {
                states[i].fVec3[l6] = 0.0f;
            }
            for (int l7 = 0; l7 < 2; l7 = l7 + 1) {
                states[i].fRec12[l7] = 0.0f;
            }
            for (int l8 = 0; l8 < 2; l8 = l8 + 1) {
                states[i].fRec17[l8] = 0.0f;
            }
            for (int l9 = 0; l9 < 16384; l9 = l9 + 1) {
                states[i].fVec4[l9] = 0.0f;
            }
            for (int l10 = 0; l10 < 4096; l10 = l10 + 1) {
                states[i].fVec5[l10] = 0.0f;
            }
            for (int l11 = 0; l11 < 2; l11 = l11 + 1) {
                states[i].fRec15[l11] = 0.0f;
            }
            for (int l12 = 0; l12 < 2; l12 = l12 + 1) {
                states[i].fRec20[l12] = 0.0f;
            }
            for (int l13 = 0; l13 < 16384; l13 = l13 + 1) {
                states[i].fVec6[l13] = 0.0f;
            }
            for (int l14 = 0; l14 < 2048; l14 = l14 + 1) {
                states[i].fVec7[l14] = 0.0f;
            }
            for (int l15 = 0; l15 < 2; l15 = l15 + 1) {
                states[i].fRec18[l15] = 0.0f;
            }
            for (int l16 = 0; l16 < 2; l16 = l16 + 1) {
                states[i].fRec23[l16] = 0.0f;
            }
            for (int l17 = 0; l17 < 16384; l17 = l17 + 1) {
                states[i].fVec8[l17] = 0.0f;
            }
            for (int l18 = 0; l18 < 2048; l18 = l18 + 1) {
                states[i].fVec9[l18] = 0.0f;
            }
            for (int l19 = 0; l19 < 2; l19 = l19 + 1) {
                states[i].fRec21[l19] = 0.0f;
            }
            for (int l20 = 0; l20 < 2; l20 = l20 + 1) {
                states[i].fRec26[l20] = 0.0f;
            }
            for (int l21 = 0; l21 < 16384; l21 = l21 + 1) {
                states[i].fVec10[l21] = 0.0f;
            }
            for (int l22 = 0; l22 < 4096; l22 = l22 + 1) {
                states[i].fVec11[l22] = 0.0f;
            }
            for (int l23 = 0; l23 < 2; l23 = l23 + 1) {
                states[i].fRec24[l23] = 0.0f;
            }
            for (int l24 = 0; l24 < 2; l24 = l24 + 1) {
                states[i].fRec29[l24] = 0.0f;
            }
            for (int l25 = 0; l25 < 32768; l25 = l25 + 1) {
                states[i].fVec12[l25] = 0.0f;
            }
            for (int l26 = 0; l26 < 2048; l26 = l26 + 1) {
                states[i].fVec13[l26] = 0.0f;
            }
            for (int l27 = 0; l27 < 2; l27 = l27 + 1) {
                states[i].fRec27[l27] = 0.0f;
            }
            for (int l28 = 0; l28 < 2; l28 = l28 + 1) {
                states[i].fRec32[l28] = 0.0f;
            }
            for (int l29 = 0; l29 < 16384; l29 = l29 + 1) {
                states[i].fVec14[l29] = 0.0f;
            }
            for (int l30 = 0; l30 < 4096; l30 = l30 + 1) {
                states[i].fVec15[l30] = 0.0f;
            }
            for (int l31 = 0; l31 < 2; l31 = l31 + 1) {
                states[i].fRec30[l31] = 0.0f;
            }
            for (int l32 = 0; l32 < 2; l32 = l32 + 1) {
                states[i].fRec35[l32] = 0.0f;
            }
            for (int l33 = 0; l33 < 32768; l33 = l33 + 1) {
                states[i].fVec16[l33] = 0.0f;
            }
            for (int l34 = 0; l34 < 4096; l34 = l34 + 1) {
                states[i].fVec17[l34] = 0.0f;
            }
            for (int l35 = 0; l35 < 2; l35 = l35 + 1) {
                states[i].fRec33[l35] = 0.0f;
            }
            for (int l36 = 0; l36 < 2; l36 = l36 + 1) {
                states[i].fRec4[l36] = 0.0f;
            }
            for (int l37 = 0; l37 < 2; l37 = l37 + 1) {
                states[i].fRec5[l37] = 0.0f;
            }
            for (int l38 = 0; l38 < 2; l38 = l38 + 1) {
                states[i].fRec6[l38] = 0.0f;
            }
            for (int l39 = 0; l39 < 2; l39 = l39 + 1) {
                states[i].fRec7[l39] = 0.0f;
            }
            for (int l40 = 0; l40 < 2; l40 = l40 + 1) {
                states[i].fRec8[l40] = 0.0f;
            }
            for (int l41 = 0; l41 < 2; l41 = l41 + 1) {
                states[i].fRec9[l41] = 0.0f;
            }
            for (int l42 = 0; l42 < 2; l42 = l42 + 1) {
                states[i].fRec10[l42] = 0.0f;
            }
            for (int l43 = 0; l43 < 2; l43 = l43 + 1) {
                states[i].fRec11[l43] = 0.0f;
            }
            for (int l44 = 0; l44 < 3; l44 = l44 + 1) {
                states[i].fRec3[l44] = 0.0f;
            }
            for (int l45 = 0; l45 < 3; l45 = l45 + 1) {
                states[i].fRec2[l45] = 0.0f;
            }
            for (int l46 = 0; l46 < 3; l46 = l46 + 1) {
                states[i].fRec37[l46] = 0.0f;
            }
            for (int l47 = 0; l47 < 3; l47 = l47 + 1) {
                states[i].fRec36[l47] = 0.0f;
            }
        }
    }

    void update_run_channel() {
        // initialize run_channel based on input types
        void (Zitarev::*new_run_channel)(Zitarev_state *state);
        if (input->rate == 'b') {
            input = new Upsample(-1, input->chans, input);
        }
        if (wet->rate == 'a') {
            wet = new Dnsampleb(-1, wet->chans, wet, LOWPASS500);
        }
        if (gain->rate == 'a') {
            gain = new Dnsampleb(-1, gain->chans, gain, LOWPASS500);
        }
        if (rt60->rate == 'a') {
            rt60 = new Dnsampleb(-1, rt60->chans, rt60, LOWPASS500);
        }
        new_run_channel = &Zitarev::chan_abbb_a;
        run_channel = new_run_channel;
    }

    void print_sources(int indent, bool print_flag) {
        input->print_tree(indent, print_flag, "input");
        wet->print_tree(indent, print_flag, "wet");
        gain->print_tree(indent, print_flag, "gain");
        rt60->print_tree(indent, print_flag, "rt60");
    }

    void repl_input(Ugen_ptr ugen) {
        input->unref();
        init_input(ugen);
        update_run_channel();
    }

    void repl_wet(Ugen_ptr ugen) {
        wet->unref();
        init_wet(ugen);
        update_run_channel();
    }

    void repl_gain(Ugen_ptr ugen) {
        gain->unref();
        init_gain(ugen);
        update_run_channel();
    }

    void repl_rt60(Ugen_ptr ugen) {
        rt60->unref();
        init_rt60(ugen);
        update_run_channel();
    }

    void set_input(int chan, float f) {
        input->const_set(chan, f, "Zitarev::set_input");
    }

    void set_wet(int chan, float f) {
        wet->const_set(chan, f, "Zitarev::set_wet");
    }

    void set_gain(int chan, float f) {
        gain->const_set(chan, f, "Zitarev::set_gain");
    }

    void set_rt60(int chan, float f) {
        rt60->const_set(chan, f, "Zitarev::set_rt60");
    }

    void init_input(Ugen_ptr ugen) { init_param(ugen, input, &input_stride); }

    void init_wet(Ugen_ptr ugen) { init_param(ugen, wet, NULL); }

    void init_gain(Ugen_ptr ugen) { init_param(ugen, gain, NULL); }

    void init_rt60(Ugen_ptr ugen) { init_param(ugen, rt60, NULL); }

    void chan_abbb_a(Zitarev_state *state) {
        FAUSTFLOAT* input0 = input_samps;
        FAUSTFLOAT* input1 = input_samps + input_stride;
        FAUSTFLOAT* output0 = out_samps;
        FAUSTFLOAT* output1 = out_samps + BL;
        float fSlow0 = fConst1 * float(gain_samps[0]);
        float fSlow1 = fConst1 * float(wet_samps[0]);
        float fSlow2 = float(rt60_samps[0]);
        float fSlow3 = std::exp(-(fConst6 / fSlow2));
        float fSlow4 = Zitarev_faustpower2_f(fSlow3);
        float fSlow5 = 1.0f - fConst7 * fSlow4;
        float fSlow6 = 1.0f - fSlow4;
        float fSlow7 = std::sqrt(std::max<float>(0.0f, Zitarev_faustpower2_f(fSlow5) / Zitarev_faustpower2_f(fSlow6) + -1.0f));
        float fSlow8 = fSlow5 / fSlow6;
        float fSlow9 = fSlow3 * (fSlow7 + (1.0f - fSlow8));
        float fSlow10 = fSlow8 - fSlow7;
        float fSlow11 = std::exp(-(fConst13 / fSlow2));
        float fSlow12 = Zitarev_faustpower2_f(fSlow11);
        float fSlow13 = 1.0f - fConst7 * fSlow12;
        float fSlow14 = 1.0f - fSlow12;
        float fSlow15 = std::sqrt(std::max<float>(0.0f, Zitarev_faustpower2_f(fSlow13) / Zitarev_faustpower2_f(fSlow14) + -1.0f));
        float fSlow16 = fSlow13 / fSlow14;
        float fSlow17 = (fSlow15 + (1.0f - fSlow16)) * fSlow11;
        float fSlow18 = fSlow16 - fSlow15;
        float fSlow19 = std::exp(-(fConst18 / fSlow2));
        float fSlow20 = Zitarev_faustpower2_f(fSlow19);
        float fSlow21 = 1.0f - fConst7 * fSlow20;
        float fSlow22 = 1.0f - fSlow20;
        float fSlow23 = std::sqrt(std::max<float>(0.0f, Zitarev_faustpower2_f(fSlow21) / Zitarev_faustpower2_f(fSlow22) + -1.0f));
        float fSlow24 = fSlow21 / fSlow22;
        float fSlow25 = fSlow19 * (fSlow23 + (1.0f - fSlow24));
        float fSlow26 = fSlow24 - fSlow23;
        float fSlow27 = std::exp(-(fConst23 / fSlow2));
        float fSlow28 = Zitarev_faustpower2_f(fSlow27);
        float fSlow29 = 1.0f - fConst7 * fSlow28;
        float fSlow30 = 1.0f - fSlow28;
        float fSlow31 = std::sqrt(std::max<float>(0.0f, Zitarev_faustpower2_f(fSlow29) / Zitarev_faustpower2_f(fSlow30) + -1.0f));
        float fSlow32 = fSlow29 / fSlow30;
        float fSlow33 = fSlow27 * (fSlow31 + (1.0f - fSlow32));
        float fSlow34 = fSlow32 - fSlow31;
        float fSlow35 = std::exp(-(fConst28 / fSlow2));
        float fSlow36 = Zitarev_faustpower2_f(fSlow35);
        float fSlow37 = 1.0f - fConst7 * fSlow36;
        float fSlow38 = 1.0f - fSlow36;
        float fSlow39 = std::sqrt(std::max<float>(0.0f, Zitarev_faustpower2_f(fSlow37) / Zitarev_faustpower2_f(fSlow38) + -1.0f));
        float fSlow40 = fSlow37 / fSlow38;
        float fSlow41 = fSlow35 * (fSlow39 + (1.0f - fSlow40));
        float fSlow42 = fSlow40 - fSlow39;
        float fSlow43 = std::exp(-(fConst33 / fSlow2));
        float fSlow44 = Zitarev_faustpower2_f(fSlow43);
        float fSlow45 = 1.0f - fConst7 * fSlow44;
        float fSlow46 = 1.0f - fSlow44;
        float fSlow47 = std::sqrt(std::max<float>(0.0f, Zitarev_faustpower2_f(fSlow45) / Zitarev_faustpower2_f(fSlow46) + -1.0f));
        float fSlow48 = fSlow45 / fSlow46;
        float fSlow49 = fSlow43 * (fSlow47 + (1.0f - fSlow48));
        float fSlow50 = fSlow48 - fSlow47;
        float fSlow51 = std::exp(-(fConst38 / fSlow2));
        float fSlow52 = Zitarev_faustpower2_f(fSlow51);
        float fSlow53 = 1.0f - fConst7 * fSlow52;
        float fSlow54 = 1.0f - fSlow52;
        float fSlow55 = std::sqrt(std::max<float>(0.0f, Zitarev_faustpower2_f(fSlow53) / Zitarev_faustpower2_f(fSlow54) + -1.0f));
        float fSlow56 = fSlow53 / fSlow54;
        float fSlow57 = fSlow51 * (fSlow55 + (1.0f - fSlow56));
        float fSlow58 = fSlow56 - fSlow55;
        float fSlow59 = std::exp(-(fConst43 / fSlow2));
        float fSlow60 = Zitarev_faustpower2_f(fSlow59);
        float fSlow61 = 1.0f - fConst7 * fSlow60;
        float fSlow62 = 1.0f - fSlow60;
        float fSlow63 = std::sqrt(std::max<float>(0.0f, Zitarev_faustpower2_f(fSlow61) / Zitarev_faustpower2_f(fSlow62) + -1.0f));
        float fSlow64 = fSlow61 / fSlow62;
        float fSlow65 = fSlow59 * (fSlow63 + (1.0f - fSlow64));
        float fSlow66 = fSlow64 - fSlow63;
        for (int i0 = 0; i0 < BL; i0 = i0 + 1) {
            state->fRec0[0] = fSlow0 + fConst2 * state->fRec0[1];
            float fTemp0 = float(input0[i0]);
            state->fVec0[state->IOTA0 & 16383] = fTemp0;
            state->fRec1[0] = fSlow1 + fConst2 * state->fRec1[1];
            float fTemp1 = 1.0f - state->fRec1[0];
            state->fRec14[0] = fSlow9 * state->fRec7[1] + fSlow10 * state->fRec14[1];
            state->fVec1[state->IOTA0 & 32767] = 0.35355338f * state->fRec14[0] + 1e-20f;
            float fTemp2 = 0.6f * state->fRec12[1] + state->fVec1[(state->IOTA0 - iConst9) & 32767];
            float fTemp3 = float(input1[i0]);
            state->fVec2[state->IOTA0 & 16383] = fTemp3;
            float fTemp4 = 0.3f * state->fVec2[(state->IOTA0 - iConst10) & 16383];
            state->fVec3[state->IOTA0 & 4095] = fTemp2 - fTemp4;
            state->fRec12[0] = state->fVec3[(state->IOTA0 - iConst11) & 4095];
            float fRec13 = 0.6f * (fTemp4 - fTemp2);
            state->fRec17[0] = fSlow17 * state->fRec8[1] + fSlow18 * state->fRec17[1];
            state->fVec4[state->IOTA0 & 16383] = 0.35355338f * state->fRec17[0] + 1e-20f;
            float fTemp5 = 0.3f * state->fVec0[(state->IOTA0 - iConst10) & 16383];
            float fTemp6 = state->fVec4[(state->IOTA0 - iConst15) & 16383] + fTemp5 - 0.6f * state->fRec15[1];
            state->fVec5[state->IOTA0 & 4095] = fTemp6;
            state->fRec15[0] = state->fVec5[(state->IOTA0 - iConst16) & 4095];
            float fRec16 = 0.6f * fTemp6;
            state->fRec20[0] = fSlow25 * state->fRec4[1] + fSlow26 * state->fRec20[1];
            state->fVec6[state->IOTA0 & 16383] = 0.35355338f * state->fRec20[0] + 1e-20f;
            float fTemp7 = state->fVec6[(state->IOTA0 - iConst20) & 16383] + fTemp5 - 0.6f * state->fRec18[1];
            state->fVec7[state->IOTA0 & 2047] = fTemp7;
            state->fRec18[0] = state->fVec7[(state->IOTA0 - iConst21) & 2047];
            float fRec19 = 0.6f * fTemp7;
            state->fRec23[0] = fSlow33 * state->fRec10[1] + fSlow34 * state->fRec23[1];
            state->fVec8[state->IOTA0 & 16383] = 0.35355338f * state->fRec23[0] + 1e-20f;
            float fTemp8 = state->fVec8[(state->IOTA0 - iConst25) & 16383] - (0.6f * state->fRec21[1] + fTemp5);
            state->fVec9[state->IOTA0 & 2047] = fTemp8;
            state->fRec21[0] = state->fVec9[(state->IOTA0 - iConst26) & 2047];
            float fRec22 = 0.6f * fTemp8;
            state->fRec26[0] = fSlow41 * state->fRec6[1] + fSlow42 * state->fRec26[1];
            state->fVec10[state->IOTA0 & 16383] = 0.35355338f * state->fRec26[0] + 1e-20f;
            float fTemp9 = state->fVec10[(state->IOTA0 - iConst30) & 16383] - (0.6f * state->fRec24[1] + fTemp5);
            state->fVec11[state->IOTA0 & 4095] = fTemp9;
            state->fRec24[0] = state->fVec11[(state->IOTA0 - iConst31) & 4095];
            float fRec25 = 0.6f * fTemp9;
            state->fRec29[0] = fSlow49 * state->fRec11[1] + fSlow50 * state->fRec29[1];
            state->fVec12[state->IOTA0 & 32767] = 0.35355338f * state->fRec29[0] + 1e-20f;
            float fTemp10 = 0.6f * state->fRec27[1] + state->fVec12[(state->IOTA0 - iConst35) & 32767];
            state->fVec13[state->IOTA0 & 2047] = fTemp10 - fTemp4;
            state->fRec27[0] = state->fVec13[(state->IOTA0 - iConst36) & 2047];
            float fRec28 = 0.6f * (fTemp4 - fTemp10);
            state->fRec32[0] = fSlow57 * state->fRec9[1] + fSlow58 * state->fRec32[1];
            state->fVec14[state->IOTA0 & 16383] = 0.35355338f * state->fRec32[0] + 1e-20f;
            float fTemp11 = state->fVec14[(state->IOTA0 - iConst40) & 16383] + fTemp4 + 0.6f * state->fRec30[1];
            state->fVec15[state->IOTA0 & 4095] = fTemp11;
            state->fRec30[0] = state->fVec15[(state->IOTA0 - iConst41) & 4095];
            float fRec31 = -(0.6f * fTemp11);
            state->fRec35[0] = fSlow65 * state->fRec5[1] + fSlow66 * state->fRec35[1];
            state->fVec16[state->IOTA0 & 32767] = 0.35355338f * state->fRec35[0] + 1e-20f;
            float fTemp12 = fTemp4 + 0.6f * state->fRec33[1] + state->fVec16[(state->IOTA0 - iConst45) & 32767];
            state->fVec17[state->IOTA0 & 4095] = fTemp12;
            state->fRec33[0] = state->fVec17[(state->IOTA0 - iConst46) & 4095];
            float fRec34 = -(0.6f * fTemp12);
            float fTemp13 = fRec19 + fRec16;
            float fTemp14 = fRec22 + fRec25 + fTemp13;
            state->fRec4[0] = state->fRec12[1] + state->fRec15[1] + state->fRec18[1] + state->fRec21[1] + state->fRec24[1] + fRec28 + fRec13 + fRec31 + fRec34 + fTemp14 + state->fRec27[1] + state->fRec33[1] + state->fRec30[1];
            state->fRec5[0] = state->fRec15[1] + state->fRec18[1] + state->fRec21[1] + state->fRec24[1] + fTemp14 - (state->fRec27[1] + state->fRec12[1] + fRec28 + fRec13 + fRec34 + fRec31 + state->fRec33[1] + state->fRec30[1]);
            float fTemp15 = fRec25 + fRec22;
            state->fRec6[0] = fRec31 + fRec34 + fTemp13 + state->fRec18[1] + state->fRec15[1] + state->fRec33[1] + state->fRec30[1] - (fRec28 + fRec13 + fTemp15 + state->fRec24[1] + state->fRec21[1] + state->fRec12[1] + state->fRec27[1]);
            state->fRec7[0] = fRec28 + fRec13 + fTemp13 + state->fRec18[1] + state->fRec15[1] + state->fRec12[1] + state->fRec27[1] - (fRec31 + fRec34 + fTemp15 + state->fRec24[1] + state->fRec21[1] + state->fRec33[1] + state->fRec30[1]);
            float fTemp16 = fRec19 + fRec25;
            float fTemp17 = fRec16 + fRec22;
            state->fRec8[0] = fRec13 + fRec34 + fTemp16 + state->fRec24[1] + state->fRec18[1] + state->fRec12[1] + state->fRec33[1] - (fRec28 + fRec31 + fTemp17 + state->fRec21[1] + state->fRec15[1] + state->fRec27[1] + state->fRec30[1]);
            state->fRec9[0] = fRec28 + fRec31 + fTemp16 + state->fRec24[1] + state->fRec18[1] + state->fRec27[1] + state->fRec30[1] - (fRec13 + fRec34 + fTemp17 + state->fRec21[1] + state->fRec15[1] + state->fRec12[1] + state->fRec33[1]);
            float fTemp18 = fRec19 + fRec22;
            float fTemp19 = fRec16 + fRec25;
            state->fRec10[0] = fRec28 + fRec34 + fTemp18 + state->fRec21[1] + state->fRec18[1] + state->fRec27[1] + state->fRec33[1] - (fRec13 + fRec31 + fTemp19 + state->fRec24[1] + state->fRec15[1] + state->fRec12[1] + state->fRec30[1]);
            state->fRec11[0] = fRec13 + fRec31 + fTemp18 + state->fRec21[1] + state->fRec18[1] + state->fRec12[1] + state->fRec30[1] - (fRec28 + fRec34 + fTemp19 + state->fRec24[1] + state->fRec15[1] + state->fRec27[1] + state->fRec33[1]);
            float fTemp20 = 0.37f * (state->fRec5[0] + state->fRec6[0]);
            float fTemp21 = fConst47 * state->fRec3[1];
            float fTemp22 = fTemp20 + fTemp21;
            state->fRec3[0] = fTemp22 - fConst4 * state->fRec3[2];
            float fTemp23 = fConst4 * state->fRec3[0];
            state->fRec2[0] = 0.5f * (fTemp23 + fTemp20 + state->fRec3[2] - fTemp21 + (state->fRec3[2] + fTemp23 - fTemp22)) + fConst50 * state->fRec2[1] - fConst49 * state->fRec2[2];
            output0[i0] = FAUSTFLOAT(state->fRec0[0] * (fTemp0 * fTemp1 + 0.5f * state->fRec1[0] * (2.0f * state->fRec2[2] + fConst51 * state->fRec2[0] - fConst52 * state->fRec2[1])));
            float fTemp24 = 0.37f * (state->fRec5[0] - state->fRec6[0]);
            float fTemp25 = fConst47 * state->fRec37[1];
            float fTemp26 = fTemp24 + fTemp25;
            state->fRec37[0] = fTemp26 - fConst4 * state->fRec37[2];
            float fTemp27 = fConst4 * state->fRec37[0];
            state->fRec36[0] = 0.5f * (fTemp27 + fTemp24 + state->fRec37[2] - fTemp25 + (state->fRec37[2] + fTemp27 - fTemp26)) + fConst50 * state->fRec36[1] - fConst49 * state->fRec36[2];
            output1[i0] = FAUSTFLOAT(state->fRec0[0] * (fTemp3 * fTemp1 + 0.5f * state->fRec1[0] * (2.0f * state->fRec36[2] + fConst51 * state->fRec36[0] - fConst52 * state->fRec36[1])));
            state->fRec0[1] = state->fRec0[0];
            state->IOTA0 = state->IOTA0 + 1;
            state->fRec1[1] = state->fRec1[0];
            state->fRec14[1] = state->fRec14[0];
            state->fRec12[1] = state->fRec12[0];
            state->fRec17[1] = state->fRec17[0];
            state->fRec15[1] = state->fRec15[0];
            state->fRec20[1] = state->fRec20[0];
            state->fRec18[1] = state->fRec18[0];
            state->fRec23[1] = state->fRec23[0];
            state->fRec21[1] = state->fRec21[0];
            state->fRec26[1] = state->fRec26[0];
            state->fRec24[1] = state->fRec24[0];
            state->fRec29[1] = state->fRec29[0];
            state->fRec27[1] = state->fRec27[0];
            state->fRec32[1] = state->fRec32[0];
            state->fRec30[1] = state->fRec30[0];
            state->fRec35[1] = state->fRec35[0];
            state->fRec33[1] = state->fRec33[0];
            state->fRec4[1] = state->fRec4[0];
            state->fRec5[1] = state->fRec5[0];
            state->fRec6[1] = state->fRec6[0];
            state->fRec7[1] = state->fRec7[0];
            state->fRec8[1] = state->fRec8[0];
            state->fRec9[1] = state->fRec9[0];
            state->fRec10[1] = state->fRec10[0];
            state->fRec11[1] = state->fRec11[0];
            state->fRec3[2] = state->fRec3[1];
            state->fRec3[1] = state->fRec3[0];
            state->fRec2[2] = state->fRec2[1];
            state->fRec2[1] = state->fRec2[0];
            state->fRec37[2] = state->fRec37[1];
            state->fRec37[1] = state->fRec37[0];
            state->fRec36[2] = state->fRec36[1];
            state->fRec36[1] = state->fRec36[0];
        }
    }

    void real_run() {
        input_samps = input->run(current_block);  // update input
        wet_samps = wet->run(current_block);  // update input
        gain_samps = gain->run(current_block);  // update input
        rt60_samps = rt60->run(current_block);  // update input
        Zitarev_state *state = states.get_array();
        (this->*run_channel)(state);
    }
};
#endif
