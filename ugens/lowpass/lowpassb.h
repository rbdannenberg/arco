/* lowpassb -- unit generator for arco
 *
 * generated by f2a.py
 */

/*------------- BEGIN FAUST PREAMBLE -------------*/

/* ------------------------------------------------------------
name: "lowpassb"
Code generated with Faust 2.59.6 (https://faust.grame.fr)
Compilation options: -lang cpp -os0 -fpga-mem 10000 -light -ct 1 -cn Lowpassb -es 1 -mcd 16 -single -ftz 0
------------------------------------------------------------ */

#ifndef  __Lowpassb_H__
#define  __Lowpassb_H__

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>
#include <cstdint>
#include <math.h>


#ifndef FAUSTCLASS 
#define FAUSTCLASS Lowpassb
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

#if defined(_WIN32)
#define RESTRICT __restrict
#else
#define RESTRICT __restrict__
#endif

#define FAUST_INT_CONTROLS 0
#define FAUST_REAL_CONTROLS 4
/*-------------- END FAUST PREAMBLE --------------*/

extern const char *Lowpassb_name;

class Lowpassb : public Ugen {
public:
    struct Lowpassb_state {
        FAUSTFLOAT fEntry0;
        FAUSTFLOAT fEntry1;
        float fVec0[2];
        float fRec0[2];
    };
    Vec<Lowpassb_state> states;
    void (Lowpassb::*run_channel)(Lowpassb_state *state);

    Ugen_ptr snd;
    int snd_stride;
    Sample_ptr snd_samps;

    Ugen_ptr cutoff;
    int cutoff_stride;
    Sample_ptr cutoff_samps;

    float fConst0;

    Lowpassb(int id, int nchans, Ugen_ptr snd_, Ugen_ptr cutoff_) :
            Ugen(id, 'b', nchans) {
        snd = snd_;
        cutoff = cutoff_;
        states.init(chans);
        fConst0 = 3.1415927f / std::min<float>(1.92e+05f, std::max<float>(1.0f, float(AR)));
        init_snd(snd);
        init_cutoff(cutoff);
    }

    ~Lowpassb() {
        snd->unref();
        cutoff->unref();
    }

    const char *classname() { return Lowpassb_name; }

    void initialize_channel_states() {
        for (int i = 0; i < chans; i++) {
            for (int l0 = 0; l0 < 2; l0 = l0 + 1) {
                states[i].fVec0[l0] = 0.0f;
            }
            for (int l1 = 0; l1 < 2; l1 = l1 + 1) {
                states[i].fRec0[l1] = 0.0f;
            }
        }
    }

    void print_sources(int indent, bool print) {
        snd->print_tree(indent, print, "snd");
        cutoff->print_tree(indent, print, "cutoff");
    }

    void repl_snd(Ugen_ptr inp) {
        snd->unref();
        init_snd(inp);
    }

    void repl_cutoff(Ugen_ptr inp) {
        cutoff->unref();
        init_cutoff(inp);
    }

    void set_snd(int chan, float f) {
        assert(snd->rate == 'c');
        snd->output[chan] = f;
    }

    void set_cutoff(int chan, float f) {
        assert(cutoff->rate == 'c');
        cutoff->output[chan] = f;
    }

    void init_snd(Ugen_ptr ugen) { init_param(ugen, snd, snd_stride); }

    void init_cutoff(Ugen_ptr ugen) { init_param(ugen, cutoff, cutoff_stride); }

    void real_run() {
        snd_samps = snd->run(current_block); // update input
        cutoff_samps = cutoff->run(current_block); // update input
        Lowpassb_state *state = &states[0];
        for (int i = 0; i < chans; i++) {
            FAUSTFLOAT tmp_0 = 1.0f / std::tan(fConst0 * float(*cutoff_samps));
            FAUSTFLOAT tmp_1 = 1.0f / (tmp_0 + 1.0f);
            FAUSTFLOAT tmp_2 = 1.0f - tmp_0;
            FAUSTFLOAT tmp_3 = float(*snd_samps);
            state->fVec0[0] = tmp_3;
            state->fRec0[0] = 0.0f - tmp_1 * (tmp_2 * state->fRec0[1] - (tmp_3 + state->fVec0[1]));
            *out_samps++ = FAUSTFLOAT(state->fRec0[0]);
            state->fVec0[1] = state->fVec0[0];
            state->fRec0[1] = state->fRec0[0];            state++;
            snd_samps += snd_stride;
            cutoff_samps += cutoff_stride;
        }
    }
};
#endif
