/* mult -- unit generator for arco
 *
 * generated by f2a.py
 */

/*------------- BEGIN FAUST PREAMBLE -------------*/

/* ------------------------------------------------------------
name: "mult"
Code generated with Faust 2.59.6 (https://faust.grame.fr)
Compilation options: -lang cpp -light -ct 1 -cn Mult -es 1 -mcd 16 -single -ftz 0
------------------------------------------------------------ */

#ifndef  __Mult_H__
#define  __Mult_H__

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>
#include <cstdint>

#ifndef FAUSTCLASS 
#define FAUSTCLASS Mult
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

#if defined(_WIN32)
#define RESTRICT __restrict
#else
#define RESTRICT __restrict__
#endif
/*-------------- END FAUST PREAMBLE --------------*/

extern const char *Mult_name;

class Mult : public Ugen {
public:
    struct Mult_state {
        Sample fSlow0_prev;
    };
    Vec<Mult_state> states;
    void (Mult::*run_channel)(Mult_state *state);

    Ugen_ptr x1;
    int x1_stride;
    Sample_ptr x1_samps;

    Ugen_ptr x2;
    int x2_stride;
    Sample_ptr x2_samps;


    Mult(int id, int nchans, Ugen_ptr x1_, Ugen_ptr x2_) :
            Ugen(id, 'a', nchans) {
        x1 = x1_;
        x2 = x2_;
        flags = CAN_TERMINATE;
        states.set_size(chans);

        init_x1(x1);
        init_x2(x2);
        run_channel = (void (Mult::*)(Mult_state *)) 0;
        update_run_channel();
    }

    ~Mult() {
        x1->unref();
        x2->unref();
    }

    const char *classname() { return Mult_name; }

    void initialize_channel_states() {
        for (int i = 0; i < chans; i++) {

            states[i].fSlow0_prev = 0.0f;
        }
    }

    void update_run_channel() {
        // initialize run_channel based on input types
        void (Mult::*new_run_channel)(Mult_state *state);
            if (x1->rate == 'a') {
                if (x2->rate == 'a') {
                    new_run_channel = &Mult::chan_aa_a;
                } else {
                    new_run_channel = &Mult::chan_ab_a;
                }
            } else {
                if (x2->rate == 'a') {
                    new_run_channel = &Mult::chan_ba_a;
                } else {
                    new_run_channel = &Mult::chan_bb_a;
                }
            }
        if (new_run_channel != run_channel) {
            initialize_channel_states();
            run_channel = new_run_channel;
        }
    }

    void print_sources(int indent, bool print_flag) {
        x1->print_tree(indent, print_flag, "x1");
        x2->print_tree(indent, print_flag, "x2");
    }

    void repl_x1(Ugen_ptr ugen) {
        x1->unref();
        init_x1(ugen);
        update_run_channel();
    }

    void repl_x2(Ugen_ptr ugen) {
        x2->unref();
        init_x2(ugen);
        update_run_channel();
    }

    void set_x1(int chan, float f) {
        x1->const_set(chan, f, "Mult::set_x1");
    }

    void set_x2(int chan, float f) {
        x2->const_set(chan, f, "Mult::set_x2");
    }

    void init_x1(Ugen_ptr ugen) { init_param(ugen, x1, x1_stride); }

    void init_x2(Ugen_ptr ugen) { init_param(ugen, x2, x2_stride); }

    void chan_aa_a(Mult_state *state) {
        FAUSTFLOAT* input0 = x1_samps;
        FAUSTFLOAT* input1 = x2_samps;
        for (int i0 = 0; i0 < BL; i0 = i0 + 1) {
            *out_samps++ = FAUSTFLOAT(float(input0[i0]) * float(input1[i0]));
        }
    }

    void chan_ab_a(Mult_state *state) {
        FAUSTFLOAT* input0 = x1_samps;
        float fSlow0 = float(*x2_samps);
        Sample fSlow0_incr = (fSlow0 - state->fSlow0_prev) * BL_RECIP;
        Sample fSlow0_fast = state->fSlow0_prev;
        state->fSlow0_prev = fSlow0;
        for (int i0 = 0; i0 < BL; i0 = i0 + 1) {
            fSlow0_fast += fSlow0_incr;
            *out_samps++ = FAUSTFLOAT(fSlow0_fast * float(input0[i0]));
        }
    }

    void chan_ba_a(Mult_state *state) {
        FAUSTFLOAT* input0 = x2_samps;
        float fSlow0 = float(*x1_samps);
        Sample fSlow0_incr = (fSlow0 - state->fSlow0_prev) * BL_RECIP;
        Sample fSlow0_fast = state->fSlow0_prev;
        state->fSlow0_prev = fSlow0;
        for (int i0 = 0; i0 < BL; i0 = i0 + 1) {
            fSlow0_fast += fSlow0_incr;
            *out_samps++ = FAUSTFLOAT(fSlow0_fast * float(input0[i0]));
        }
    }

    void chan_bb_a(Mult_state *state) {
        float fSlow0 = float(*x1_samps) * float(*x2_samps);
        Sample fSlow0_incr = (fSlow0 - state->fSlow0_prev) * BL_RECIP;
        Sample fSlow0_fast = state->fSlow0_prev;
        state->fSlow0_prev = fSlow0;
        for (int i0 = 0; i0 < BL; i0 = i0 + 1) {
            fSlow0_fast += fSlow0_incr;
            *out_samps++ = FAUSTFLOAT(fSlow0_fast);
        }
    }

    void real_run() {
        x1_samps = x1->run(current_block); // update input
        x2_samps = x2->run(current_block); // update input
        if (((x1->flags | x2->flags) & TERMINATED) &&
            (flags & CAN_TERMINATE)) {
            terminate();
        }
        Mult_state *state = &states[0];
        for (int i = 0; i < chans; i++) {
            (this->*run_channel)(state);
            state++;
            x1_samps += x1_stride;
            x2_samps += x2_stride;
        }
    }
};
#endif
