/* ------------------------------------------------------------
name: "multb", "mult"
Code generated with Faust 2.59.6 (https://faust.grame.fr)
Compilation options: -lang cpp -os0 -fpga-mem 10000 -light -ct 1 -cn Multb -es 1 -mcd 16 -single -ftz 0
------------------------------------------------------------ */

#ifndef  __Multb_H__
#define  __Multb_H__

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>
#include <cstdint>


#ifndef FAUSTCLASS 
#define FAUSTCLASS Multb
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

#if defined(_WIN32)
#define RESTRICT __restrict
#else
#define RESTRICT __restrict__
#endif

#define FAUST_INT_CONTROLS 0
#define FAUST_REAL_CONTROLS 1

class Multb : public one_sample_dsp<float> {
	
 private:
	
	FAUSTFLOAT fEntry0;
	FAUSTFLOAT fEntry1;
	int fSampleRate;
	
 public:
	Multb() {}

	Multb(int* icontrol, float* fcontrol):one_sample_dsp(icontrol, fcontrol) {}

	void metadata(Meta* m) { 
		m->declare("compile_options", "-lang cpp -os0 -fpga-mem 10000 -light -ct 1 -cn Multb -es 1 -mcd 16 -single -ftz 0");
		m->declare("description", "Mult(iply) Unit Generator for Arco");
		m->declare("filename", "multb_bb_b.dsp");
		m->declare("interpolated", "x1 x2");
		m->declare("name", "multb");
	}

	virtual int getNumInputs() {
		return 0;
	}
	virtual int getNumOutputs() {
		return 1;
	}
	
	static void classInit(int sample_rate) {}
	
	void staticInit(int sample_rate) {
	}
	
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
	}
	
	virtual void instanceResetUserInterface() {
		fEntry0 = FAUSTFLOAT(0.0f);
		fEntry1 = FAUSTFLOAT(0.0f);
	}
	
	virtual void instanceClear() {
	}
	
	virtual void init(int sample_rate) {
		instanceInit(sample_rate);
	}
	
	virtual void instanceInit(int sample_rate) {
		staticInit(sample_rate);
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	
	virtual Multb* clone() {
		return new Multb();
	}
	
	virtual int getSampleRate() {
		return fSampleRate;
	}
	
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("multb");
		ui_interface->addNumEntry("x1", &fEntry0, FAUSTFLOAT(0.0f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.1f));
		ui_interface->addNumEntry("x2", &fEntry1, FAUSTFLOAT(0.0f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.1f));
		ui_interface->closeBox();
	}
	
	virtual void control(int* RESTRICT iControl, float* RESTRICT fControl) {
		fControl[0] = float(fEntry0) * float(fEntry1);
	}

	virtual int getNumIntControls() { return 0; }
	virtual int getNumRealControls() { return 1; }
	
	virtual void compute(FAUSTFLOAT* RESTRICT inputs, FAUSTFLOAT* RESTRICT outputs, int* RESTRICT iControl, float* RESTRICT fControl) {
		outputs[0] = FAUSTFLOAT(fControl[0]);
	}

};

#endif
