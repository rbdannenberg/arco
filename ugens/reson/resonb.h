/* resonb -- unit generator for arco
 *
 * generated by f2a.py
 */

/*------------- BEGIN FAUST PREAMBLE -------------*/

/* ------------------------------------------------------------
name: "resonb"
Code generated with Faust 2.75.7 (https://faust.grame.fr)
Compilation options: -lang cpp -os -light -ct 1 -cn Resonb -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0
------------------------------------------------------------ */

#ifndef  __Resonb_H__
#define  __Resonb_H__

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>
#include <cstdint>
#include <math.h>

#ifndef FAUSTCLASS 
#define FAUSTCLASS Resonb
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

#if defined(_WIN32)
#define RESTRICT __restrict
#else
#define RESTRICT __restrict__
#endif

static float Resonb_faustpower2_f(float value) {
    return value * value;
}
/*-------------- END FAUST PREAMBLE --------------*/

extern const char *Resonb_name;

class Resonb : public Ugen {
public:
    struct Resonb_state {
        FAUSTFLOAT fEntry0;
        FAUSTFLOAT fEntry1;
        FAUSTFLOAT fEntry2;
        float fRec0[3];
    };
    Vec<Resonb_state> states;
    void (Resonb::*run_channel)(Resonb_state *state);

    Ugen_ptr input;
    int input_stride;
    Sample_ptr input_samps;

    Ugen_ptr center;
    int center_stride;
    Sample_ptr center_samps;

    Ugen_ptr q;
    int q_stride;
    Sample_ptr q_samps;

    float fConst0;

    Resonb(int id, int nchans, Ugen_ptr input_, Ugen_ptr center_, Ugen_ptr q_) :
            Ugen(id, 'b', nchans) {
        input = input_;
        center = center_;
        q = q_;
        flags = CAN_TERMINATE;
        states.set_size(chans);
        fConst0 = 3.1415927f / std::min<float>(1.92e+05f, std::max<float>(1.0f, float(BR)));
        init_input(input);
        init_center(center);
        init_q(q);
    }

    ~Resonb() {
        input->unref();
        center->unref();
        q->unref();
    }

    const char *classname() { return Resonb_name; }

    void initialize_channel_states() {
        for (int i = 0; i < chans; i++) {
            for (int l0 = 0; l0 < 3; l0 = l0 + 1) {
                states[i].fRec0[l0] = 0.0f;
            }
        }
    }

    void print_sources(int indent, bool print_flag) {
        input->print_tree(indent, print_flag, "input");
        center->print_tree(indent, print_flag, "center");
        q->print_tree(indent, print_flag, "q");
    }

    void repl_input(Ugen_ptr ugen) {
        input->unref();
        init_input(ugen);
    }

    void repl_center(Ugen_ptr ugen) {
        center->unref();
        init_center(ugen);
    }

    void repl_q(Ugen_ptr ugen) {
        q->unref();
        init_q(ugen);
    }

    void set_input(int chan, float f) {
        input->const_set(chan, f, "Resonb::set_input");
    }

    void set_center(int chan, float f) {
        center->const_set(chan, f, "Resonb::set_center");
    }

    void set_q(int chan, float f) {
        q->const_set(chan, f, "Resonb::set_q");
    }

    void init_input(Ugen_ptr ugen) { init_param(ugen, input, &input_stride); }

    void init_center(Ugen_ptr ugen) { init_param(ugen, center, &center_stride); }

    void init_q(Ugen_ptr ugen) { init_param(ugen, q, &q_stride); }

    void real_run() {
        input_samps = input->run(current_block);  // update input
        center_samps = center->run(current_block);  // update input
        q_samps = q->run(current_block);  // update input
        if (((input->flags) & TERMINATED) &&
            (flags & CAN_TERMINATE)) {
            terminate();
        }
        Resonb_state *state = &states[0];
        for (int i = 0; i < chans; i++) {
            float fSlow0 = 1.0f / std::max<float>(float(q_samps[0]), 0.1f);
            float fSlow1 = std::tan(fConst0 * std::max<float>(float(center_samps[0]), 0.1f));
            float fSlow2 = 1.0f / fSlow1;
            float fSlow3 = 1.0f / ((fSlow0 + fSlow2) / fSlow1 + 1.0f);
            float fSlow4 = float(input_samps[0]);
            float fSlow5 = (fSlow2 - fSlow0) / fSlow1 + 1.0f;
            float fSlow6 = 2.0f * (1.0f - 1.0f / Resonb_faustpower2_f(fSlow1));
            state->fRec0[0] = fSlow4 - fSlow3 * (fSlow5 * state->fRec0[2] + fSlow6 * state->fRec0[1]);
            out_samps[0] = FAUSTFLOAT(fSlow3 * (state->fRec0[2] + state->fRec0[0] + 2.0f * state->fRec0[1]));
            state->fRec0[2] = state->fRec0[1];
            state->fRec0[1] = state->fRec0[0];
    
            state++;
            out_samps++;
            input_samps += input_stride;
            center_samps += center_stride;
            q_samps += q_stride;
        }
    }
};
#endif
