/* reson -- unit generator for arco
 *
 * generated by f2a.py
 */

#include "arcougen.h"
#include "reson.h"

const char *Reson_name = "Reson";

/* O2SM INTERFACE: /arco/reson/new int32 id, int32 chans, int32 snd, int32 center, int32 q;
 */
void arco_reson_new(O2SM_HANDLER_ARGS)
{
    // begin unpack message (machine-generated):
    int32_t id = argv[0]->i;
    int32_t chans = argv[1]->i;
    int32_t snd = argv[2]->i;
    int32_t center = argv[3]->i;
    int32_t q = argv[4]->i;
    // end unpack message

    ANY_UGEN_FROM_ID(snd_ugen, snd, "arco_reson_new");
    ANY_UGEN_FROM_ID(center_ugen, center, "arco_reson_new");
    ANY_UGEN_FROM_ID(q_ugen, q, "arco_reson_new");

    new Reson(id, chans, snd_ugen, center_ugen, q_ugen);
}


/* O2SM INTERFACE: /arco/reson/repl_snd int32 id, int32 snd_id;
 */
static void arco_reson_repl_snd(O2SM_HANDLER_ARGS)
{
    // begin unpack message (machine-generated):
    int32_t id = argv[0]->i;
    int32_t snd_id = argv[1]->i;
    // end unpack message

    UGEN_FROM_ID(Reson, reson, id, "arco_reson_repl_snd");
    ANY_UGEN_FROM_ID(snd, snd_id, "arco_reson_repl_snd");
    reson->repl_snd(snd);
}


/* O2SM INTERFACE: /arco/reson/set_snd int32 id, int32 chan, float val;
 */
static void arco_reson_set_snd (O2SM_HANDLER_ARGS)
{
    // begin unpack message (machine-generated):
    int32_t id = argv[0]->i;
    int32_t chan = argv[1]->i;
    float val = argv[2]->f;
    // end unpack message

    UGEN_FROM_ID(Reson, reson, id, "arco_reson_set_snd");
    reson->set_snd(chan, val);
}


/* O2SM INTERFACE: /arco/reson/repl_center int32 id, int32 center_id;
 */
static void arco_reson_repl_center(O2SM_HANDLER_ARGS)
{
    // begin unpack message (machine-generated):
    int32_t id = argv[0]->i;
    int32_t center_id = argv[1]->i;
    // end unpack message

    UGEN_FROM_ID(Reson, reson, id, "arco_reson_repl_center");
    ANY_UGEN_FROM_ID(center, center_id, "arco_reson_repl_center");
    reson->repl_center(center);
}


/* O2SM INTERFACE: /arco/reson/set_center int32 id, int32 chan, float val;
 */
static void arco_reson_set_center (O2SM_HANDLER_ARGS)
{
    // begin unpack message (machine-generated):
    int32_t id = argv[0]->i;
    int32_t chan = argv[1]->i;
    float val = argv[2]->f;
    // end unpack message

    UGEN_FROM_ID(Reson, reson, id, "arco_reson_set_center");
    reson->set_center(chan, val);
}


/* O2SM INTERFACE: /arco/reson/repl_q int32 id, int32 q_id;
 */
static void arco_reson_repl_q(O2SM_HANDLER_ARGS)
{
    // begin unpack message (machine-generated):
    int32_t id = argv[0]->i;
    int32_t q_id = argv[1]->i;
    // end unpack message

    UGEN_FROM_ID(Reson, reson, id, "arco_reson_repl_q");
    ANY_UGEN_FROM_ID(q, q_id, "arco_reson_repl_q");
    reson->repl_q(q);
}


/* O2SM INTERFACE: /arco/reson/set_q int32 id, int32 chan, float val;
 */
static void arco_reson_set_q (O2SM_HANDLER_ARGS)
{
    // begin unpack message (machine-generated):
    int32_t id = argv[0]->i;
    int32_t chan = argv[1]->i;
    float val = argv[2]->f;
    // end unpack message

    UGEN_FROM_ID(Reson, reson, id, "arco_reson_set_q");
    reson->set_q(chan, val);
}


static void reson_init()
{
    // O2SM INTERFACE INITIALIZATION: (machine generated)
    o2sm_method_new("/arco/reson/new", "iiiii", arco_reson_new, NULL, true,
                    true);
    o2sm_method_new("/arco/reson/repl_snd", "ii", arco_reson_repl_snd, NULL,
                    true, true);
    o2sm_method_new("/arco/reson/set_snd", "iif", arco_reson_set_snd, NULL,
                    true, true);
    o2sm_method_new("/arco/reson/repl_center", "ii", arco_reson_repl_center,
                    NULL, true, true);
    o2sm_method_new("/arco/reson/set_center", "iif", arco_reson_set_center,
                    NULL, true, true);
    o2sm_method_new("/arco/reson/repl_q", "ii", arco_reson_repl_q, NULL,
                    true, true);
    o2sm_method_new("/arco/reson/set_q", "iif", arco_reson_set_q, NULL,
                    true, true);
    // END INTERFACE INITIALIZATION

    // class initialization code from faust:
}

Initializer reson_init_obj(reson_init);
