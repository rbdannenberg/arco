/* sine -- unit generator for arco
 *
 * generated by f2a.py
 */

#include "arcougen.h"
#include "sine.h"

const char *Sine_name = "Sine";

/* O2SM INTERFACE: /arco/sine/new int32 id, int32 chans, int32 freq, int32 amp;
 */
void arco_sine_new(O2SM_HANDLER_ARGS)
{
    // begin unpack message (machine-generated):
    int32_t id = argv[0]->i;
    int32_t chans = argv[1]->i;
    int32_t freq = argv[2]->i;
    int32_t amp = argv[3]->i;
    // end unpack message

    ANY_UGEN_FROM_ID(freq_ugen, freq, "arco_sine_new");
    ANY_UGEN_FROM_ID(amp_ugen, amp, "arco_sine_new");

    new Sine(id, chans, freq_ugen, amp_ugen);
}


/* O2SM INTERFACE: /arco/sine/repl_freq int32 id, int32 freq_id;
 */
static void arco_sine_repl_freq (O2SM_HANDLER_ARGS)
{
    // begin unpack message (machine-generated):
    int32_t id = argv[0]->i;
    int32_t freq_id = argv[1]->i;
    // end unpack message

    UGEN_FROM_ID(Sine, sine, id, "arco_sine_repl_freq");
    ANY_UGEN_FROM_ID(freq, freq_id, "arco_sine_repl_freq");
    sine->repl_freq(freq);
}


/* O2SM INTERFACE: /arco/sine/set_freq int32 id, int32 chan, float val;
 */
static void arco_sine_set_freq (O2SM_HANDLER_ARGS)
{
    // begin unpack message (machine-generated):
    int32_t id = argv[0]->i;
    int32_t chan = argv[1]->i;
    float val = argv[2]->f;
    // end unpack message

    UGEN_FROM_ID(Sine, sine, id, "arco_sine_set_freq");
    sine->set_freq(chan, val);
}


/* O2SM INTERFACE: /arco/sine/repl_amp int32 id, int32 amp_id;
 */
static void arco_sine_repl_amp (O2SM_HANDLER_ARGS)
{
    // begin unpack message (machine-generated):
    int32_t id = argv[0]->i;
    int32_t amp_id = argv[1]->i;
    // end unpack message

    UGEN_FROM_ID(Sine, sine, id, "arco_sine_repl_amp");
    ANY_UGEN_FROM_ID(amp, amp_id, "arco_sine_repl_amp");
    sine->repl_amp(amp);
}


/* O2SM INTERFACE: /arco/sine/set_amp int32 id, int32 chan, float val;
 */
static void arco_sine_set_amp (O2SM_HANDLER_ARGS)
{
    // begin unpack message (machine-generated):
    int32_t id = argv[0]->i;
    int32_t chan = argv[1]->i;
    float val = argv[2]->f;
    // end unpack message

    UGEN_FROM_ID(Sine, sine, id, "arco_sine_set_amp");
    sine->set_amp(chan, val);
}


static void sine_init()
{
    // O2SM INTERFACE INITIALIZATION: (machine generated)
    o2sm_method_new("/arco/sine/new", "iiii", arco_sine_new, NULL, true,
                    true);
    o2sm_method_new("/arco/sine/repl_freq", "ii", arco_sine_repl_freq, NULL,
                    true, true);
    o2sm_method_new("/arco/sine/set_freq", "iif", arco_sine_set_freq, NULL,
                    true, true);
    o2sm_method_new("/arco/sine/repl_amp", "ii", arco_sine_repl_amp, NULL,
                    true, true);
    o2sm_method_new("/arco/sine/set_amp", "iif", arco_sine_set_amp, NULL,
                    true, true);
    // END INTERFACE INITIALIZATION

    // class initialization code from faust:
    SineSIG0* sig0 = newSineSIG0();
    sig0->instanceInitSineSIG0(AR);
    sig0->fillSineSIG0(65536, ftbl0SineSIG0);
    deleteSineSIG0(sig0);
}

Initializer sine_init_obj(sine_init);
