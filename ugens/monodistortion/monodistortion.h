/* monodistortion -- unit generator for arco
 *
 * generated by f2a.py
 */

/*------------- BEGIN FAUST PREAMBLE -------------*/

/* ------------------------------------------------------------
name: "monodistortion"
Code generated with Faust 2.74.6 (https://faust.grame.fr)
Compilation options: -lang cpp -light -ct 1 -cn Monodistortion -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0
------------------------------------------------------------ */

#ifndef  __Monodistortion_H__
#define  __Monodistortion_H__

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>
#include <cstdint>
#include <math.h>

#ifndef FAUSTCLASS 
#define FAUSTCLASS Monodistortion
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

#if defined(_WIN32)
#define RESTRICT __restrict
#else
#define RESTRICT __restrict__
#endif

static float Monodistortion_faustpower2_f(float value) {
    return value * value;
}
/*-------------- END FAUST PREAMBLE --------------*/

extern const char *Monodistortion_name;

class Monodistortion : public Ugen {
public:
    struct Monodistortion_state {
        float fVec0[2];
        float fRec1[2];
        FAUSTFLOAT fEntry0;
        float fVec1[2];
        FAUSTFLOAT fEntry1;
        float fRec0[2];
        FAUSTFLOAT fEntry2;
    };
    Vec<Monodistortion_state> states;
    void (Monodistortion::*run_channel)(Monodistortion_state *state);

    Ugen_ptr snd;
    int snd_stride;
    Sample_ptr snd_samps;

    Ugen_ptr gain;
    int gain_stride;
    Sample_ptr gain_samps;

    Ugen_ptr tone;
    int tone_stride;
    Sample_ptr tone_samps;

    Ugen_ptr volume;
    int volume_stride;
    Sample_ptr volume_samps;

    float fConst0;
    float fConst1;
    float fConst2;
    float fConst3;
    float fConst4;

    Monodistortion(int id, int nchans, Ugen_ptr snd_, Ugen_ptr gain_, Ugen_ptr tone_, Ugen_ptr volume_) :
            Ugen(id, 'a', nchans) {
        snd = snd_;
        gain = gain_;
        tone = tone_;
        volume = volume_;
        flags = CAN_TERMINATE;
        states.set_size(chans);
        fConst0 = std::min<float>(1.92e+05f, std::max<float>(1.0f, float(AR)));
        fConst1 = 1.0f / std::tan(2261.9468f / fConst0);
        fConst2 = 1.0f - fConst1;
        fConst3 = 1.0f / (fConst1 + 1.0f);
        fConst4 = 3.1415927f / fConst0;
        init_snd(snd);
        init_gain(gain);
        init_tone(tone);
        init_volume(volume);
        run_channel = (void (Monodistortion::*)(Monodistortion_state *)) 0;
        update_run_channel();
    }

    ~Monodistortion() {
        snd->unref();
        gain->unref();
        tone->unref();
        volume->unref();
    }

    const char *classname() { return Monodistortion_name; }

    void initialize_channel_states() {
        for (int i = 0; i < chans; i++) {
            for (int l0 = 0; l0 < 2; l0 = l0 + 1) {
                states[i].fVec0[l0] = 0.0f;
            }
            for (int l1 = 0; l1 < 2; l1 = l1 + 1) {
                states[i].fRec1[l1] = 0.0f;
            }
            for (int l2 = 0; l2 < 2; l2 = l2 + 1) {
                states[i].fVec1[l2] = 0.0f;
            }
            for (int l3 = 0; l3 < 2; l3 = l3 + 1) {
                states[i].fRec0[l3] = 0.0f;
            }
        }
    }

    void update_run_channel() {
        // initialize run_channel based on input types
        void (Monodistortion::*new_run_channel)(Monodistortion_state *state);
        if (snd->rate == 'b') {
            snd = new Upsample(-1, snd->chans, snd);
        }
        if (gain->rate == 'a') {
            gain = new Dnsampleb(-1, gain->chans, gain, LOWPASS500);
        }
        if (tone->rate == 'a') {
            tone = new Dnsampleb(-1, tone->chans, tone, LOWPASS500);
        }
        if (volume->rate == 'a') {
            volume = new Dnsampleb(-1, volume->chans, volume, LOWPASS500);
        }
        new_run_channel = &Monodistortion::chan_abbb_a;
        run_channel = new_run_channel;
    }

    void print_sources(int indent, bool print_flag) {
        snd->print_tree(indent, print_flag, "snd");
        gain->print_tree(indent, print_flag, "gain");
        tone->print_tree(indent, print_flag, "tone");
        volume->print_tree(indent, print_flag, "volume");
    }

    void repl_snd(Ugen_ptr ugen) {
        snd->unref();
        init_snd(ugen);
        update_run_channel();
    }

    void repl_gain(Ugen_ptr ugen) {
        gain->unref();
        init_gain(ugen);
        update_run_channel();
    }

    void repl_tone(Ugen_ptr ugen) {
        tone->unref();
        init_tone(ugen);
        update_run_channel();
    }

    void repl_volume(Ugen_ptr ugen) {
        volume->unref();
        init_volume(ugen);
        update_run_channel();
    }

    void set_snd(int chan, float f) {
        snd->const_set(chan, f, "Monodistortion::set_snd");
    }

    void set_gain(int chan, float f) {
        gain->const_set(chan, f, "Monodistortion::set_gain");
    }

    void set_tone(int chan, float f) {
        tone->const_set(chan, f, "Monodistortion::set_tone");
    }

    void set_volume(int chan, float f) {
        volume->const_set(chan, f, "Monodistortion::set_volume");
    }

    void init_snd(Ugen_ptr ugen) { init_param(ugen, snd, &snd_stride); }

    void init_gain(Ugen_ptr ugen) { init_param(ugen, gain, &gain_stride); }

    void init_tone(Ugen_ptr ugen) { init_param(ugen, tone, &tone_stride); }

    void init_volume(Ugen_ptr ugen) { init_param(ugen, volume, &volume_stride); }

    void chan_abbb_a(Monodistortion_state *state) {
        FAUSTFLOAT* input0 = snd_samps;
        FAUSTFLOAT* output0 = out_samps;
        float fSlow0 = std::pow(1e+01f, 2.0f * float(gain_samps[0]));
        float fSlow1 = 1.0f / std::tan(fConst4 * float(tone_samps[0]));
        float fSlow2 = 1.0f - fSlow1;
        float fSlow3 = 1.0f / (fSlow1 + 1.0f);
        float fSlow4 = float(volume_samps[0]);
        for (int i0 = 0; i0 < BL; i0 = i0 + 1) {
            float fTemp0 = float(input0[i0]);
            state->fVec0[0] = fTemp0;
            state->fRec1[0] = -(fConst3 * (fConst2 * state->fRec1[1] + fConst1 * (state->fVec0[1] - fTemp0)));
            float fTemp1 = std::max<float>(-1.0f, std::min<float>(1.0f, fSlow0 * state->fRec1[0]));
            float fTemp2 = fTemp1 * (1.0f - 0.33333334f * Monodistortion_faustpower2_f(fTemp1));
            state->fVec1[0] = fTemp2;
            state->fRec0[0] = -(fSlow3 * (fSlow2 * state->fRec0[1] - (fTemp2 + state->fVec1[1])));
            output0[i0] = FAUSTFLOAT(fSlow4 * state->fRec0[0]);
            state->fVec0[1] = state->fVec0[0];
            state->fRec1[1] = state->fRec1[0];
            state->fVec1[1] = state->fVec1[0];
            state->fRec0[1] = state->fRec0[0];
        }
    }

    void real_run() {
        snd_samps = snd->run(current_block);  // update input
        gain_samps = gain->run(current_block);  // update input
        tone_samps = tone->run(current_block);  // update input
        volume_samps = volume->run(current_block);  // update input
        Monodistortion_state *state = &states[0];
        for (int i = 0; i < chans; i++) {
            (this->*run_channel)(state);
            state++;
            out_samps += BL;
            audio_samps += audio_stride;
            gain_samps += gain_stride;
            tone_samps += tone_stride;
            volume_samps += volume_stride;
        }
    }
};
#endif
